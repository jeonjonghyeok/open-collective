{"version":3,"file":"serialize.js","sourceRoot":"","sources":["../../src/utils/serialize.ts"],"names":[],"mappings":"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","sourcesContent":["import {classOf, isClass, isCollection, isEmpty, isFunction, isNil, isPlainObject, MetadataTypes, objectKeys, Type} from \"@tsed/core\";\nimport {alterIgnore, getPropertiesStores, JsonEntityStore, JsonHookContext, JsonSchema} from \"@tsed/schema\";\nimport \"../components\";\nimport {JsonMapperContext} from \"../domain/JsonMapperContext\";\nimport {getJsonMapperTypes} from \"../domain/JsonMapperTypesContainer\";\nimport {JsonMapperMethods} from \"../interfaces/JsonMapperMethods\";\n\nexport interface JsonSerializerOptions<T = any, C = any> extends MetadataTypes<T, C> {\n  /**\n   * Types used to map complex types (Symbol, Array, Set, Map)\n   */\n  types?: Map<Type<any>, JsonMapperMethods>;\n  /**\n   * useAlias mapping\n   */\n  useAlias?: boolean;\n\n  [key: string]: any;\n}\n\nfunction alterValue(schema: JsonSchema, value: any, options: JsonHookContext) {\n  return schema.$hooks.alter(\"onSerialize\", value, [options]);\n}\n\nfunction getSchemaProperties(storedJson: JsonEntityStore, obj: any) {\n  const stores = Array.from(getPropertiesStores(storedJson).entries());\n\n  if (!stores.length) {\n    // fallback to auto discovering field from obj\n    objectKeys(obj).forEach((key) => {\n      const propStore = JsonEntityStore.from(classOf(storedJson.target), key);\n      stores.push([key, propStore]);\n    });\n  }\n\n  return stores;\n}\n\nfunction getObjectProperties(obj: any): [string, any][] {\n  return Object.entries(obj).filter(([, value]) => !isFunction(value));\n}\n\nfunction getType(propStore: JsonEntityStore, value: any) {\n  if (isNil(value) || propStore.type === Object || isCollection(propStore.type)) {\n    return undefined;\n  }\n\n  return propStore.type;\n}\n\nexport function classToPlainObject(obj: any, options: JsonSerializerOptions<any, any>) {\n  const {useAlias = true, type, ...props} = options;\n\n  const entity = JsonEntityStore.from(type || obj);\n\n  return getSchemaProperties(entity, obj).reduce((newObj, [key, propStore]) => {\n    const schema = propStore.schema;\n    if (alterIgnore(schema, {useAlias, ...props, self: obj})) {\n      return newObj;\n    }\n\n    let value = alterValue(schema, obj[key], {useAlias, ...props, self: obj});\n\n    value = serialize(value, {\n      useAlias,\n      type: value === obj[key] ? getType(propStore, value) : undefined,\n      collectionType: propStore.collectionType,\n      ...props\n    });\n\n    if (value === undefined) {\n      return newObj;\n    }\n\n    key = useAlias ? propStore.parent.schema.getAliasOf(key) || key : key;\n\n    return {\n      ...newObj,\n      [key]: value\n    };\n  }, {});\n}\n\nfunction toObject(obj: any, options: JsonSerializerOptions): any {\n  return getObjectProperties(obj).reduce(\n    (newObj, [key, value]) => ({\n      ...newObj,\n      [key]: serialize(value, options)\n    }),\n    {}\n  );\n}\n\nexport function serialize(obj: any, {type, collectionType, ...options}: JsonSerializerOptions = {}): any {\n  const types = options.types ? options.types : getJsonMapperTypes();\n  // prevent Object metadata assignation. TypeScript set Object by default on endpoint.type\n  type = type === Object ? undefined : type;\n\n  if (isEmpty(obj)) {\n    return obj;\n  }\n\n  if (obj.$toObject) {\n    // mongoose\n    return serialize(obj.$toObject(options, true), {type: type || obj.$getTarget(), collectionType, ...options});\n  }\n\n  if (type && isClass(type)) {\n    options.type = type;\n  }\n\n  if (isCollection(obj) && !options.collectionType) {\n    type = classOf(obj);\n    options.collectionType = type;\n  }\n\n  type = classOf(type || obj);\n\n  const context = new JsonMapperContext({\n    type,\n    options,\n    next: (data) =>\n      serialize(data, {\n        ...options,\n        collectionType: undefined,\n        type: options.type\n      })\n  });\n\n  if (types.has(type)) {\n    const jsonMapper = types.get(type)!;\n\n    return jsonMapper.serialize(obj, context);\n  }\n\n  if (typeof obj.toJSON === \"function\") {\n    // serialize from serialize method\n    return obj.toJSON(context);\n  }\n\n  if (typeof obj.serialize === \"function\") {\n    // serialize from serialize method\n    return obj.serialize(context);\n  }\n\n  return !isPlainObject(type) ? classToPlainObject(obj, options) : toObject(obj, options);\n}\n"]}