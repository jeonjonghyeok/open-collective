{"version":3,"file":"deserialize.js","sourceRoot":"","sources":["../../src/utils/deserialize.ts"],"names":[],"mappings":"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","sourcesContent":["import {isArray, isEmpty, isNil, MetadataTypes, nameOf, objectKeys, Type} from \"@tsed/core\";\nimport {getPropertiesStores, JsonEntityStore, JsonHookContext, JsonSchema} from \"@tsed/schema\";\nimport \"../components\";\nimport {JsonMapperContext} from \"../domain/JsonMapperContext\";\nimport {getJsonMapperTypes} from \"../domain/JsonMapperTypesContainer\";\nimport {JsonMapperMethods} from \"../interfaces/JsonMapperMethods\";\n\nexport interface JsonDeserializerOptions<T = any, C = any> extends MetadataTypes<T, C> {\n  /**\n   * Types used to map complex types (Symbol, Array, Set, Map)\n   */\n  types?: Map<Type<any>, JsonMapperMethods>;\n  /**\n   * useAlias mapping\n   */\n  useAlias?: boolean;\n  /**\n   * Accept additionalProperties or ignore it\n   */\n  additionalProperties?: boolean;\n  /**\n   * Use the store which have all metadata to deserialize correctly the model. This\n   * property is useful when you deal with metadata parameters.\n   */\n  store?: JsonEntityStore;\n\n  [key: string]: any;\n}\n\nfunction isDeserializable(obj: any, options: JsonDeserializerOptions) {\n  if ((!!options.collectionType && isNil(obj)) || obj === undefined) {\n    return false;\n  }\n\n  return !(isEmpty(options.type) || (options.type === Object && !options.collectionType));\n}\n\nfunction alterValue(schema: JsonSchema, value: any, options: JsonHookContext) {\n  return schema.$hooks.alter(\"onDeserialize\", value, [options]);\n}\n\nfunction transformCollection<T = any>(src: any, options: JsonDeserializerOptions<any, any>): T {\n  const {types, type = Object, collectionType} = options;\n\n  const context = new JsonMapperContext({\n    type,\n    collectionType,\n    options,\n    next: (data, {collectionType, ...options}) => deserialize(data, options)\n  });\n\n  return types?.get(options.collectionType)?.deserialize<T>(src, context);\n}\n\nfunction transformType<T = any>(src: any, options: JsonDeserializerOptions<any, any>): T {\n  const {types, type = Object} = options;\n\n  const context = new JsonMapperContext({\n    type,\n    options,\n    next: (data, {type, ...options}) => deserialize(data, options)\n  });\n\n  return types?.get(type)?.deserialize<T>(src, context);\n}\n\n/**\n * Transform given plain object to class.\n * @param src\n * @param options\n */\nexport function plainObjectToClass<T = any>(src: any, options: JsonDeserializerOptions): T {\n  if (isEmpty(src)) {\n    return src;\n  }\n\n  const {type, store = JsonEntityStore.from(type), ...next} = options;\n  const propertiesMap = getPropertiesStores(store);\n\n  let keys = objectKeys(src);\n  const additionalProperties = propertiesMap.size ? !!store.schema.get(\"additionalProperties\") || options.additionalProperties : true;\n  const out: any = new type(src);\n\n  propertiesMap.forEach((propStore) => {\n    const key = propStore.parent.schema.getAliasOf(propStore.propertyName) || propStore.propertyName;\n    keys = keys.filter((k) => k !== key);\n\n    let value = alterValue(propStore.schema, src[key], {...options, self: src});\n\n    next.type = propStore.computedType;\n\n    if (propStore.schema.hasGenerics) {\n      next.nestedGenerics = propStore.schema.nestedGenerics;\n    } else if (propStore.schema.isGeneric && options.nestedGenerics) {\n      const [genericTypes = [], ...nestedGenerics] = options.nestedGenerics;\n      const genericLabels = propStore.parent.schema.genericLabels || [];\n\n      next.type = genericTypes[genericLabels.indexOf(propStore.schema.genericType)] || Object;\n      next.nestedGenerics = nestedGenerics;\n    }\n\n    value = deserialize(value, {\n      ...next,\n      collectionType: propStore.collectionType\n    });\n\n    if (value !== undefined) {\n      out[propStore.propertyName] = value;\n    }\n  });\n\n  if (additionalProperties) {\n    keys.forEach((key) => {\n      out[key] = src[key];\n    });\n  }\n\n  return out;\n}\n\nfunction buildOptions(options: JsonDeserializerOptions<any, any>): any {\n  if (options.store instanceof JsonEntityStore) {\n    if (options.store.parameter && options.store.parameter.nestedGenerics.length) {\n      options.nestedGenerics = options.store.parameter.nestedGenerics;\n    }\n\n    options.type = options.store.computedType;\n    options.collectionType = options.store.collectionType;\n\n    delete options.store;\n  }\n\n  return {\n    ...options,\n    types: options.types ? options.types : getJsonMapperTypes()\n  };\n}\n\n/**\n * Transform given source to class base on the given `options.type`.\n *\n * @param src\n * @param options\n */\nexport function deserialize<T = any>(src: any, options: JsonDeserializerOptions = {}): T {\n  options = buildOptions(options);\n\n  if (!isDeserializable(src, options)) {\n    return src;\n  }\n\n  if (!options.collectionType && isArray(src)) {\n    options.collectionType = Array;\n  }\n\n  if (options.collectionType) {\n    if (!options.types?.has(options.collectionType)) {\n      throw new Error(`${nameOf(options.collectionType)} is not supported by JsonMapper.`);\n    }\n\n    return transformCollection(src, options);\n  }\n\n  if (options.types?.has(options.type)) {\n    return transformType(src, options);\n  }\n\n  // class converter\n  return plainObjectToClass(src, options);\n}\n"]}