{"version":3,"file":"JsonMapperContext.js","sourceRoot":"","sources":["../../src/domain/JsonMapperContext.ts"],"names":[],"mappings":";;;AAAA,qCAA8C;AAQ9C,MAAa,iBAAiB;IAM5B,YAAY,EAAC,IAAI,EAAE,cAAc,EAAE,IAAI,EAAE,OAAO,EAA0B;QACxE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,cAAc,GAAG,mBAAY,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,SAAS,CAAC;QAChF,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED,IAAI,CAAC,IAAS;QACZ,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;YACtB,GAAG,IAAI,CAAC,OAAO;YACf,IAAI,EAAE,IAAI,CAAC,IAAI;SAChB,CAAC,CAAC;IACL,CAAC;CACF;AAnBD,8CAmBC","sourcesContent":["import {isCollection, Type} from \"@tsed/core\";\nimport {JsonMapperCtx} from \"../interfaces/JsonMapperMethods\";\n\nexport interface IJsonMapperContextProps extends Partial<Omit<JsonMapperCtx, \"next\">> {\n  next: (data: any, options: any) => void;\n  options: any;\n}\n\nexport class JsonMapperContext implements JsonMapperCtx {\n  readonly collectionType: Type<any> | undefined;\n  readonly type: Type<any> | any;\n  readonly options: any;\n  private _next: (data: any, options: any) => void;\n\n  constructor({type, collectionType, next, options}: IJsonMapperContextProps) {\n    this.type = type;\n    this.collectionType = isCollection(collectionType) ? collectionType : undefined;\n    this._next = next;\n    this.options = options;\n  }\n\n  next(data: any) {\n    return this._next(data, {\n      ...this.options,\n      type: this.type\n    });\n  }\n}\n"]}