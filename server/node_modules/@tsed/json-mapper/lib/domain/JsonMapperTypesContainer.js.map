{"version":3,"file":"JsonMapperTypesContainer.js","sourceRoot":"","sources":["../../src/domain/JsonMapperTypesContainer.ts"],"names":[],"mappings":";;;AAGA,yCAAyC;AACzC,MAAM,wBAAwB,GAA2F,IAAI,GAAG,EAAE,CAAC;AAEnI,SAAgB,sBAAsB,CAAC,IAAe,EAAE,KAA8B;IACpF,wBAAwB,CAAC,GAAG,CAAC,IAAI,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,KAAK,EAAE,EAAC,CAAC,CAAC;AACrE,CAAC;AAFD,wDAEC;AAED,SAAgB,kBAAkB;IAChC,OAAO,IAAI,GAAG,CACZ,KAAK,CAAC,IAAI,CAAC,wBAAwB,CAAC,OAAO,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAC,QAAQ,EAAC,CAAC,EAAE,EAAE;QACvE,OAAO,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IACzB,CAAC,CAAC,CACH,CAAC;AACJ,CAAC;AAND,gDAMC","sourcesContent":["import {Type} from \"@tsed/core\";\nimport {JsonMapperMethods} from \"../interfaces/JsonMapperMethods\";\n\n// tslint:disable-next-line:variable-name\nconst JsonMapperTypesContainer: Map<Type<any> | Symbol, {token: Type<JsonMapperMethods>; instance: JsonMapperMethods}> = new Map();\n\nexport function registerJsonTypeMapper(type: Type<any>, token: Type<JsonMapperMethods>) {\n  JsonMapperTypesContainer.set(type, {token, instance: new token()});\n}\n\nexport function getJsonMapperTypes(): Map<Type<any> | Symbol, JsonMapperMethods> {\n  return new Map(\n    Array.from(JsonMapperTypesContainer.entries()).map(([key, {instance}]) => {\n      return [key, instance];\n    })\n  );\n}\n"]}