{"version":3,"file":"PrimitiveMapper.js","sourceRoot":"","sources":["../../src/components/PrimitiveMapper.ts"],"names":[],"mappings":";;;;AAAA,iDAA4C;AAC5C,yDAAoD;AAGpD;;;;GAIG;AAEH,IAAa,eAAe,GAA5B,MAAa,eAAe;IAC1B,WAAW,CAAI,IAAS,EAAE,GAAkB;QAC1C,QAAQ,GAAG,CAAC,IAAI,EAAE;YAChB,KAAK,MAAM;gBACT,OAAO,EAAE,GAAG,IAAI,CAAC;YAEnB,KAAK,MAAM;gBACT,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;oBAAE,OAAO,IAAI,CAAC;gBAE/C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;gBAEhB,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;oBACZ,MAAM,IAAI,uBAAU,CAAC,+CAA+C,CAAC,CAAC;iBACvE;gBAED,OAAO,CAAC,CAAC;YAEX,KAAK,OAAO;gBACV,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;oBAAE,OAAO,IAAI,CAAC;gBACpD,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;oBAAE,OAAO,KAAK,CAAC;gBACvD,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;oBAAE,OAAO,IAAI,CAAC;gBAC/C,IAAI,IAAI,KAAK,SAAS;oBAAE,OAAO,SAAS,CAAC;gBAEzC,OAAO,CAAC,CAAC,IAAI,CAAC;SACjB;IACH,CAAC;IAED,SAAS,CAAC,MAAiC;QACzC,OAAO,MAAM,CAAC;IAChB,CAAC;CACF,CAAA;AA9BY,eAAe;IAD3B,uBAAU,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC;GACvB,eAAe,CA8B3B;AA9BY,0CAAe","sourcesContent":["import {BadRequest} from \"@tsed/exceptions\";\nimport {JsonMapper} from \"../decorators/jsonMapper\";\nimport {JsonMapperCtx, JsonMapperMethods} from \"../interfaces/JsonMapperMethods\";\n\n/**\n * Mapper for the `String`, `Number` and `Boolean` types.\n * @jsonmapper\n * @component\n */\n@JsonMapper(String, Number, Boolean)\nexport class PrimitiveMapper implements JsonMapperMethods {\n  deserialize<T>(data: any, ctx: JsonMapperCtx): string | number | boolean | void | null {\n    switch (ctx.type) {\n      case String:\n        return \"\" + data;\n\n      case Number:\n        if ([null, \"null\"].includes(data)) return null;\n\n        const n = +data;\n\n        if (isNaN(n)) {\n          throw new BadRequest(\"Cast error. Expression value is not a number.\");\n        }\n\n        return n;\n\n      case Boolean:\n        if ([\"true\", \"1\", true].includes(data)) return true;\n        if ([\"false\", \"0\", false].includes(data)) return false;\n        if ([null, \"null\"].includes(data)) return null;\n        if (data === undefined) return undefined;\n\n        return !!data;\n    }\n  }\n\n  serialize(object: string | number | boolean): string | number | boolean {\n    return object;\n  }\n}\n"]}