{"version":3,"file":"ArrayMapper.js","sourceRoot":"","sources":["../../src/components/ArrayMapper.ts"],"names":[],"mappings":";;;;AAAA,yDAAoD;AAGpD;;;;GAIG;AAEH,IAAa,WAAW,GAAxB,MAAa,WAAW;IACtB,WAAW,CAAU,IAAS,EAAE,OAAsB;QACpD,OAAO,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3D,CAAC;IAED,SAAS,CAAC,IAAW,EAAE,OAAsB;QAC3C,OAAO,EAAE,CAAC,MAAM,CAAC,IAAW,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAClE,CAAC;CACF,CAAA;AARY,WAAW;IADvB,uBAAU,CAAC,KAAK,CAAC;GACL,WAAW,CAQvB;AARY,kCAAW","sourcesContent":["import {JsonMapper} from \"../decorators/jsonMapper\";\nimport {JsonMapperCtx, JsonMapperMethods} from \"../interfaces/JsonMapperMethods\";\n\n/**\n * Mapper for `Array` type.\n * @jsonmapper\n * @component\n */\n@JsonMapper(Array)\nexport class ArrayMapper implements JsonMapperMethods {\n  deserialize<T = any>(data: any, options: JsonMapperCtx): T[] {\n    return [].concat(data).map((item) => options.next(item));\n  }\n\n  serialize(data: any[], options: JsonMapperCtx): any {\n    return [].concat(data as any).map((item) => options.next(item));\n  }\n}\n"]}