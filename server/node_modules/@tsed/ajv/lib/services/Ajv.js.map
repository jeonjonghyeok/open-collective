{"version":3,"file":"Ajv.js","sourceRoot":"","sources":["../../src/services/Ajv.ts"],"names":[],"mappings":";;;AAAA,iCAAwE;AACxE,2BAA2B;AAG3B,yCAAyC;AAC5B,QAAA,GAAG,GAAQ,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAG1C,qBAAgB,CAAC;IACf,OAAO,EAAE,WAAG;IACZ,IAAI,EAAE,CAAC,kBAAa,CAAC;IACrB,KAAK,EAAE,kBAAa,CAAC,SAAS;IAC9B,UAAU,CAAC,aAA4B;QACrC,MAAM,EAAC,cAAc,EAAE,GAAG,KAAK,EAAC,GAAG,aAAa,CAAC,GAAG,CAAe,KAAK,CAAC,IAAI,EAAE,CAAC;QAEhF,OAAO,IAAI,GAAG,CAAC;YACb,OAAO,EAAE,KAAK;YACd,WAAW,EAAE,IAAI;YACjB,GAAG,KAAK;SACT,CAAC,CAAC;IACL,CAAC;CACF,CAAC,CAAC","sourcesContent":["import {Configuration, ProviderScope, registerProvider} from \"@tsed/di\";\nimport * as Ajv from \"ajv\";\nimport {IAjvSettings} from \"../interfaces/IAjvSettings\";\n\n// tslint:disable-next-line:variable-name\nexport const AJV: any = Symbol.for(\"AJV\");\nexport type AJV = Ajv.Ajv;\n\nregisterProvider({\n  provide: AJV,\n  deps: [Configuration],\n  scope: ProviderScope.SINGLETON,\n  useFactory(configuration: Configuration) {\n    const {errorFormatter, ...props} = configuration.get<IAjvSettings>(\"ajv\") || {};\n\n    return new Ajv({\n      verbose: false,\n      coerceTypes: true,\n      ...props\n    });\n  }\n});\n"]}