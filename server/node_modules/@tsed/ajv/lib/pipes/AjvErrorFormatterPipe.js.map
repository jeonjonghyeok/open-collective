{"version":3,"file":"AjvErrorFormatterPipe.js","sourceRoot":"","sources":["../../src/pipes/AjvErrorFormatterPipe.ts"],"names":[],"mappings":"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","sourcesContent":["import {Constant, PropertyMetadata} from \"@tsed/common\";\nimport {getValue, nameOf, setValue, Type} from \"@tsed/core\";\nimport {Injectable} from \"@tsed/di\";\nimport {ErrorObject} from \"ajv\";\nimport {AjvValidationError} from \"../errors/AjvValidationError\";\nimport {AjvErrorObject, ErrorFormatter} from \"../interfaces/IAjvSettings\";\n\nfunction defaultFormatter(error: AjvErrorObject) {\n  const value = JSON.stringify(error.data === undefined ? \"undefined\" : error.data);\n  const join = (list: any[]): string => list.filter(Boolean).join(\"\").trim();\n\n  if (error.collectionName) {\n    switch (error.collectionName) {\n      case \"Map\":\n        return join([\n          error.dataPath.replace(\"['\", \"Map<\").replace(\"']\", `, ${error.modelName || \"\"}>`),\n          ` ${error.message}. Given value: ${value}`\n        ]);\n      case \"Set\":\n        return join([\n          error.dataPath.replace(\"[\", \"Set<\").replace(\"]\", `, ${error.modelName || \"\"}>`),\n          ` ${error.message}. Given value: ${value}`\n        ]);\n    }\n  }\n\n  return join([\n    !error.modelName && \"Value\",\n    // index !== undefined && !error.modelName && \".\",\n    // index !== undefined && !isNaN(+index) && `[${index}]`,\n    // index !== undefined && isNaN(+index) && `${index}`,\n    // index !== undefined && error.modelName && isNaN(+index) && \".\",\n    `${error.modelName || \"\"}`,\n    error.dataPath,\n    ` ${error.message}. Given value: ${value}`\n  ]);\n}\n\n@Injectable()\nexport class AjvErrorFormatterPipe {\n  @Constant(\"ajv.errorFormatter\", defaultFormatter)\n  errorFormatter: ErrorFormatter;\n\n  transform(errors: ErrorObject[], options: any) {\n    const {type, collectionType, value} = options;\n\n    const message = errors\n      .map((error: AjvErrorObject) => {\n        if (collectionType) {\n          error.collectionName = nameOf(collectionType);\n        }\n\n        if (!error.data) {\n          if (error.dataPath) {\n            error.data = getValue(error.dataPath.replace(/^./, \"\"), value);\n          } else if (error.schemaPath !== \"#/required\") {\n            error.data = value;\n          }\n        }\n\n        if (error.dataPath && error.dataPath.match(/pwd|password|mdp|secret/)) {\n          error.data = \"[REDACTED]\";\n        }\n\n        if (type) {\n          error.modelName = nameOf(type);\n          error.message = this.mapClassError(error, type);\n        }\n\n        return this.errorFormatter.call(this, error, {});\n      })\n      .join(\"\\n\");\n\n    return new AjvValidationError(message, errors);\n  }\n\n  private mapClassError(error: AjvErrorObject, targetType: Type<any>) {\n    const propertyKey = getValue(error, \"params.missingProperty\");\n\n    if (propertyKey) {\n      const prop = PropertyMetadata.get(targetType, propertyKey);\n\n      if (prop) {\n        setValue(error, \"params.missingProperty\", prop.name || propertyKey);\n\n        return error.message!.replace(`'${propertyKey}'`, `'${prop.name || propertyKey}'`);\n      }\n    }\n\n    return error.message;\n  }\n}\n"]}