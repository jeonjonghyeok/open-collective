{"version":3,"file":"AjvValidationPipe.js","sourceRoot":"","sources":["../../src/pipes/AjvValidationPipe.ts"],"names":[],"mappings":";;;;AAAA,yCAAwG;AACxG,mDAA8C;AAC9C,yCAA2C;AAC3C,yCAAoC;AACpC,mEAA8D;AAG9D,IAAa,iBAAiB,GAA9B,MAAa,iBAAkB,SAAQ,uBAAc;IAOnD,WAAW,CAAC,KAAU,EAAE,QAAuB;QAC7C,IAAI,KAAK,KAAK,SAAS,EAAE;YACvB,OAAO,KAAK,CAAC;SACd;QAED,IAAI,KAAK,KAAK,MAAM,EAAE;YACpB,OAAO,IAAI,CAAC;SACb;QAED,IAAI,QAAQ,CAAC,WAAW,EAAE;YACxB,IAAI;gBACF,OAAO,yBAAW,CAAC,KAAK,EAAE;oBACxB,IAAI,EAAE,QAAQ,CAAC,IAAI;iBACpB,CAAC,CAAC;aACJ;YAAC,OAAO,EAAE,EAAE;gBACX,OAAO,KAAK,CAAC;aACd;SACF;QAED,IAAI,QAAQ,CAAC,OAAO,EAAE;YACpB,OAAO,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SACzB;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED,IAAI,CAAC,KAAU,EAAE,QAAuB;QACtC,OAAO,QAAQ,CAAC,SAAS,KAAK,mBAAU,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC;IACzE,CAAC;IAED,SAAS,CAAC,KAAU,EAAE,QAAuB;QAC3C,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE;YAC9B,OAAO,KAAK,CAAC;SACd;QAED,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAE1C,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAEtC,IAAI,KAAK,KAAK,SAAS,EAAE;YACvB,OAAO,KAAK,CAAC;SACd;QAED,MAAM,MAAM,GAAG,sBAAa,CAAC,QAAQ,CAAC,CAAC;QAEvC,IAAI,MAAM,EAAE;YACV,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAE/C,IAAI,CAAC,KAAK,EAAE;gBACV,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,MAAO,EAAE;oBAC/C,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS;oBAClD,cAAc,EAAE,QAAQ,CAAC,cAAc;oBACvC,KAAK;iBACN,CAAC,CAAC;aACJ;SACF;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CACF,CAAA;AAhEC;IADC,eAAM,EAAE;sCACE,6CAAqB;oDAAC;AAGjC;IADC,eAAM,CAAC,SAAG,CAAC;;8CACH;AALE,iBAAiB;IAD7B,yBAAgB,CAAC,uBAAc,CAAC;GACpB,iBAAiB,CAkE7B;AAlEY,8CAAiB","sourcesContent":["import {Inject, IPipe, OverrideProvider, ParamMetadata, ParamTypes, ValidationPipe} from \"@tsed/common\";\nimport {deserialize} from \"@tsed/json-mapper\";\nimport {getJsonSchema} from \"@tsed/schema\";\nimport {AJV} from \"../services/Ajv\";\nimport {AjvErrorFormatterPipe} from \"./AjvErrorFormatterPipe\";\n\n@OverrideProvider(ValidationPipe)\nexport class AjvValidationPipe extends ValidationPipe implements IPipe {\n  @Inject()\n  formatter: AjvErrorFormatterPipe;\n\n  @Inject(AJV)\n  ajv: AJV;\n\n  coerceTypes(value: any, metadata: ParamMetadata) {\n    if (value === undefined) {\n      return value;\n    }\n\n    if (value === \"null\") {\n      return null;\n    }\n\n    if (metadata.isPrimitive) {\n      try {\n        return deserialize(value, {\n          type: metadata.type\n        });\n      } catch (er) {\n        return value;\n      }\n    }\n\n    if (metadata.isArray) {\n      return [].concat(value);\n    }\n\n    return value;\n  }\n\n  skip(value: any, metadata: ParamMetadata) {\n    return metadata.paramType === ParamTypes.PATH && !metadata.isPrimitive;\n  }\n\n  transform(value: any, metadata: ParamMetadata): any {\n    if (this.skip(value, metadata)) {\n      return value;\n    }\n\n    value = this.coerceTypes(value, metadata);\n\n    this.checkIsRequired(value, metadata);\n\n    if (value === undefined) {\n      return value;\n    }\n\n    const schema = getJsonSchema(metadata);\n\n    if (schema) {\n      const valid = this.ajv.validate(schema, value);\n\n      if (!valid) {\n        throw this.formatter.transform(this.ajv.errors!, {\n          type: metadata.isClass ? metadata.type : undefined,\n          collectionType: metadata.collectionType,\n          value\n        });\n      }\n    }\n\n    return value;\n  }\n}\n"]}