"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AjvValidationPipe = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@tsed/common");
const json_mapper_1 = require("@tsed/json-mapper");
const schema_1 = require("@tsed/schema");
const Ajv_1 = require("../services/Ajv");
const AjvErrorFormatterPipe_1 = require("./AjvErrorFormatterPipe");
let AjvValidationPipe = class AjvValidationPipe extends common_1.ValidationPipe {
    coerceTypes(value, metadata) {
        if (value === undefined) {
            return value;
        }
        if (value === "null") {
            return null;
        }
        if (metadata.isPrimitive) {
            try {
                return json_mapper_1.deserialize(value, {
                    type: metadata.type
                });
            }
            catch (er) {
                return value;
            }
        }
        if (metadata.isArray) {
            return [].concat(value);
        }
        return value;
    }
    skip(value, metadata) {
        return metadata.paramType === common_1.ParamTypes.PATH && !metadata.isPrimitive;
    }
    transform(value, metadata) {
        if (this.skip(value, metadata)) {
            return value;
        }
        value = this.coerceTypes(value, metadata);
        this.checkIsRequired(value, metadata);
        if (value === undefined) {
            return value;
        }
        const schema = schema_1.getJsonSchema(metadata);
        if (schema) {
            const valid = this.ajv.validate(schema, value);
            if (!valid) {
                throw this.formatter.transform(this.ajv.errors, {
                    type: metadata.isClass ? metadata.type : undefined,
                    collectionType: metadata.collectionType,
                    value
                });
            }
        }
        return value;
    }
};
tslib_1.__decorate([
    common_1.Inject(),
    tslib_1.__metadata("design:type", AjvErrorFormatterPipe_1.AjvErrorFormatterPipe)
], AjvValidationPipe.prototype, "formatter", void 0);
tslib_1.__decorate([
    common_1.Inject(Ajv_1.AJV),
    tslib_1.__metadata("design:type", Object)
], AjvValidationPipe.prototype, "ajv", void 0);
AjvValidationPipe = tslib_1.__decorate([
    common_1.OverrideProvider(common_1.ValidationPipe)
], AjvValidationPipe);
exports.AjvValidationPipe = AjvValidationPipe;
//# sourceMappingURL=AjvValidationPipe.js.map