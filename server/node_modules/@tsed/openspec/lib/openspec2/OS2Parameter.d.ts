import { OpenSpecTypes } from "../common/OpenSpecTypes";
import { OS2BaseSchema, OS2Schema } from "./OS2Schema";
export declare type OS2BaseParameter = {
    name: string;
    in: "body" | "query" | "path" | "header" | "formData";
    required?: boolean;
    description?: string;
};
export declare type OS2BodyParameter = OS2BaseParameter & {
    in: "body";
    schema?: OS2Schema;
};
export declare type OS2GenericFormat = {
    type?: OpenSpecTypes;
    format?: string;
};
export declare type OS2IntegerFormat = {
    type: "integer";
    format?: "int32" | "int64";
};
export declare type OS2NumberFormat = {
    type: "number";
    format?: "float" | "double";
};
export declare type OS2StringFormat = {
    type: "string";
    format?: "" | "byte" | "binary" | "date" | "date-time" | "password";
};
export declare type OS2SchemaFormatConstraints = OS2GenericFormat | OS2IntegerFormat | OS2NumberFormat | OS2StringFormat;
export declare type OS2BaseFormatContrainedParameter = OS2BaseParameter & OS2SchemaFormatConstraints;
export declare type ParameterCollectionFormat = "csv" | "ssv" | "tsv" | "pipes" | "multi";
export declare type OS2QueryParameter = OS2BaseFormatContrainedParameter & OS2BaseSchema & {
    in: "query";
    allowEmptyValue?: boolean;
    collectionFormat?: ParameterCollectionFormat;
};
export declare type OS2PathParameter = OS2BaseFormatContrainedParameter & OS2BaseSchema & {
    in: "path";
    required: true;
};
export declare type OS2HeaderParameter = OS2BaseFormatContrainedParameter & OS2BaseSchema & {
    in: "header";
};
export declare type OS2FormDataParameter = OS2BaseFormatContrainedParameter & OS2BaseSchema & {
    in: "formData";
    type: OpenSpecTypes;
    allowEmptyValue?: boolean;
    collectionFormat?: ParameterCollectionFormat;
};
export declare type OS2Parameter = OS2BodyParameter | OS2FormDataParameter | OS2QueryParameter | OS2PathParameter | OS2HeaderParameter;
