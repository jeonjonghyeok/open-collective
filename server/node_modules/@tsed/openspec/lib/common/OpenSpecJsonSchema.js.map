{"version":3,"file":"OpenSpecJsonSchema.js","sourceRoot":"","sources":["../../src/common/OpenSpecJsonSchema.ts"],"names":[],"mappings":"","sourcesContent":["import {OpenSpecHash} from \"./OpenSpecHash\";\nimport {OpenSpecRef} from \"./OpenSpecRef\";\nimport {OpenSpecTypes} from \"./OpenSpecTypes\";\n\nexport interface OpenSpecBaseJsonSchema {\n  $ref?: string;\n  /**\n   * This attribute is a string that provides a short description of the instance property.\n   *\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-7.2\n   */\n  title?: string;\n  /**\n   * Must be strictly greater than 0.\n   * A numeric instance is valid only if division by this keyword's value results in an integer.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.1\n   */\n  multipleOf?: number;\n  /**\n   * Representing an inclusive upper limit for a numeric instance.\n   * This keyword validates only if the instance is less than or exactly equal to \"maximum\".\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.2\n   */\n  maximum?: number;\n  /**\n   * Representing an exclusive upper limit for a numeric instance.\n   * This keyword validates only if the instance is strictly less than (not equal to) to \"exclusiveMaximum\".\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.3\n   */\n  exclusiveMaximum?: boolean;\n  /**\n   * Representing an inclusive lower limit for a numeric instance.\n   * This keyword validates only if the instance is greater than or exactly equal to \"minimum\".\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.4\n   */\n  minimum?: number;\n  /**\n   * Representing an exclusive lower limit for a numeric instance.\n   * This keyword validates only if the instance is strictly greater than (not equal to) to \"exclusiveMinimum\".\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.5\n   */\n  exclusiveMinimum?: boolean;\n  /**\n   * Must be a non-negative integer.\n   * A string instance is valid against this keyword if its length is less than, or equal to, the value of this keyword.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.6\n   */\n  maxLength?: number;\n  /**\n   * Must be a non-negative integer.\n   * A string instance is valid against this keyword if its length is greater than, or equal to, the value of this keyword.\n   * Omitting this keyword has the same behavior as a value of 0.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.7\n   */\n  minLength?: number;\n  /**\n   * Should be a valid regular expression, according to the ECMA 262 regular expression dialect.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.8\n   */\n  pattern?: string;\n  /**\n   * Must be a non-negative integer.\n   * An array instance is valid against \"maxItems\" if its size is less than, or equal to, the value of this keyword.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.11\n   */\n  maxItems?: number;\n  /**\n   * Must be a non-negative integer.\n   * An array instance is valid against \"maxItems\" if its size is greater than, or equal to, the value of this keyword.\n   * Omitting this keyword has the same behavior as a value of 0.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.12\n   */\n  minItems?: number;\n  /**\n   * If this keyword has boolean value false, the instance validates successfully.\n   * If it has boolean value true, the instance validates successfully if all of its elements are unique.\n   * Omitting this keyword has the same behavior as a value of false.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.13\n   */\n  uniqueItems?: boolean;\n  /**\n   * Must be a non-negative integer.\n   * An object instance is valid against \"maxProperties\" if its number of properties is less than, or equal to, the value of this keyword.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.15\n   */\n  maxProperties?: number;\n  /**\n   * Must be a non-negative integer.\n   * An object instance is valid against \"maxProperties\" if its number of properties is greater than,\n   * or equal to, the value of this keyword.\n   * Omitting this keyword has the same behavior as a value of 0.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.16\n   */\n  minProperties?: number;\n  /**\n   * This provides an enumeration of all possible values that are valid\n   * for the instance property. This MUST be an array, and each item in\n   * the array represents a possible value for the instance value. If\n   * this attribute is defined, the instance value MUST be one of the\n   * values in the array in order for the schema to be valid.\n   *\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.23\n   */\n  enum?: any[];\n  /**\n   * This attribute is a string that provides a full description of the of purpose the instance property.\n   *\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-7.2\n   */\n  description?: string;\n  /**\n   * This keyword can be used to supply a default JSON value associated with a particular schema.\n   * It is RECOMMENDED that a default value be valid against the associated schema.\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-7.3\n   */\n  default?: any;\n  /**\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-8\n   */\n  format?: string;\n  /**\n   * A single type, or a union of simple types\n   * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.25\n   */\n  type?: OpenSpecTypes;\n}\n\nexport interface OpenSpecJsonSchema<Schema = any> extends OpenSpecBaseJsonSchema {\n  /**\n   * Required if type is \"array\". Describes the type of items in the array.\n   */\n  items?: Schema | OpenSpecRef;\n  /**\n   * A free-form property to include an example of an instance for this schema.\n   */\n  required?: string[];\n  /**\n   * Value can be boolean or object. Inline or referenced schema MUST be of a Schema Object and not a standard JSON Schema.\n   */\n  additionalProperties?: Schema | boolean;\n  /**\n   * Property definitions MUST be a Schema Object and not a standard JSON Schema (inline or referenced).\n   */\n  properties?: OpenSpecHash<Schema>;\n  /**\n   * Inline or referenced schema MUST be of a [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#schemaObject) and not a standard JSON Schema.\n   */\n  allOf?: (Schema | OpenSpecRef)[];\n  /**\n   * Additional external documentation for this schema.\n   */\n  example?: any;\n}\n"]}