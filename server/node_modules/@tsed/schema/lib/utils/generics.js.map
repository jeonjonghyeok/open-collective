{"version":3,"file":"generics.js","sourceRoot":"","sources":["../../src/utils/generics.ts"],"names":[],"mappings":";;;AAyCA;;;;GAIG;AACH,SAAgB,cAAc,CAAC,aAAuB,EAAE,YAAyB;IAC/E,OAAO,aAAa,CAAC,MAAM,CAAC,CAAC,GAAqB,EAAE,IAAY,EAAE,KAAa,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;AACrI,CAAC;AAFD,wCAEC;AAED;;;GAGG;AACH,SAAgB,kBAAkB,CAAC,OAA8C;IAC/E,IAAI,OAAO,CAAC,aAAa,IAAI,OAAO,CAAC,YAAY,EAAE;QACjD,MAAM,EAAC,aAAa,EAAE,YAAY,EAAE,GAAG,GAAG,EAAC,GAAG,OAAO,CAAC;QAEtD,OAAO;YACL,GAAG,GAAG;YACN,QAAQ,EAAE,cAAc,CAAC,aAAa,EAAE,YAAY,CAAC;SACtD,CAAC;KACH;IAED,OAAO,OAAO,CAAC;AACjB,CAAC;AAXD,gDAWC;AAED;;;GAGG;AACH,SAAgB,WAAW,CAAC,KAAqB;IAC/C,MAAM,CAAC,YAAY,EAAE,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC,cAAc,CAAC;IAEpD,OAAO;QACL,YAAY;QACZ,cAAc,EAAE,GAAG;KACpB,CAAC;AACJ,CAAC;AAPD,kCAOC","sourcesContent":["import {Type} from \"@tsed/core\";\n\n/**\n * @ignore\n */\nexport type GenericsMap = Map<string, Type<any>>;\n\n/**\n * @ignore\n */\nexport interface GenericTypes {\n  genericTypes: Type<any>[];\n\n  [key: string]: any;\n}\n\n/**\n * @ignore\n */\nexport interface GenericLabels {\n  genericLabels: string[];\n\n  [key: string]: any;\n}\n\n/**\n * @ignore\n */\nexport interface NestedGenerics {\n  nestedGenerics: Type<any>[][];\n\n  [key: string]: any;\n}\n\n/**\n * @ignore\n */\nexport interface GenericsContext extends GenericTypes, GenericLabels, NestedGenerics {\n  generics: GenericsMap;\n}\n\n/**\n * @ignore\n * @param genericLabels\n * @param genericTypes\n */\nexport function getGenericsMap(genericLabels: string[], genericTypes: Type<any>[]): GenericsMap {\n  return genericLabels.reduce((map: Map<string, any>, item: string, index: number) => map.set(item, genericTypes[index]), new Map());\n}\n\n/**\n * @ignore\n * @param options\n */\nexport function mapGenericsOptions(options: Partial<GenericTypes & GenericLabels>) {\n  if (options.genericLabels && options.genericTypes) {\n    const {genericLabels, genericTypes, ...ops} = options;\n\n    return {\n      ...ops,\n      generics: getGenericsMap(genericLabels, genericTypes)\n    };\n  }\n\n  return options;\n}\n\n/**\n * @ignore\n * @param value\n */\nexport function popGenerics(value: NestedGenerics): NestedGenerics & GenericTypes {\n  const [genericTypes, ...out] = value.nestedGenerics;\n\n  return {\n    genericTypes,\n    nestedGenerics: out\n  };\n}\n"]}