import { Type } from "@tsed/core";
import { OpenSpec2, OpenSpec3 } from "@tsed/openspec";
import { SpecTypes } from "../domain/SpecTypes";
import { JsonSchemaOptions } from "../interfaces";
export interface SpecSerializerOptions extends JsonSchemaOptions {
    specType?: SpecTypes.SWAGGER | SpecTypes.OPENAPI;
    /**
     * Paths
     */
    paths?: any;
    /**
     * Root path. This paths will be added to all generated paths Object.
     */
    rootPath?: string;
    /**
     * A function to generate the operationId.
     */
    operationIdFormatter?: (name: string, propertyKey: string, path: string) => string;
    /**
     * A pattern to generate the operationId.
     */
    operationIdPattern?: string;
}
export interface OS3SpecSerializerOptions extends SpecSerializerOptions {
    /**
     * Define Spec types level
     */
    specType: SpecTypes.OPENAPI;
}
export interface OS2SpecSerializerOptions extends SpecSerializerOptions {
    /**
     * Define Spec types level
     */
    specType: SpecTypes.SWAGGER;
}
/**
 * Return the swagger or open spec for the given class.
 * @param model
 * @param options
 */
export declare function getSpec(model: Type<any>, options: OS2SpecSerializerOptions): Partial<OpenSpec2>;
export declare function getSpec(model: Type<any>): Partial<OpenSpec2>;
export declare function getSpec(model: Type<any>, options: SpecSerializerOptions): Partial<OpenSpec2>;
/**
 * Return the swagger or open spec for the given class.
 * @param model
 * @param options
 */
export declare function getSpec(model: Type<any>, options: OS3SpecSerializerOptions): Partial<OpenSpec3>;
