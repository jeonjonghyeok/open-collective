"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.any = exports.object = exports.set = exports.map = exports.array = exports.url = exports.uri = exports.email = exports.time = exports.datetime = exports.date = exports.boolean = exports.string = exports.integer = exports.number = exports.from = void 0;
const core_1 = require("@tsed/core");
const domain_1 = require("../domain");
const JsonSchema_1 = require("../domain/JsonSchema");
function from(type = Object) {
    if (core_1.isClass(type) && []) {
        const { schema } = domain_1.JsonEntityStore.from(type);
        schema.properties = function properties(obj) {
            Object.entries(obj).forEach(([propertyKey, propSchema]) => {
                domain_1.JsonEntityStore.from(type.prototype, propertyKey).schema.assign(propSchema);
            });
            return this;
        };
        return schema;
    }
    return JsonSchema_1.JsonSchema.from({ type });
}
exports.from = from;
function number() {
    return from(Number);
}
exports.number = number;
function integer() {
    return from(Number).integer();
}
exports.integer = integer;
function string() {
    return from(String);
}
exports.string = string;
function boolean() {
    return from(Boolean);
}
exports.boolean = boolean;
function date() {
    return from(Date).format(domain_1.JsonFormatTypes.DATE);
}
exports.date = date;
function datetime() {
    return from(Date).format(domain_1.JsonFormatTypes.DATE_TIME);
}
exports.datetime = datetime;
function time() {
    return from(Date).format(domain_1.JsonFormatTypes.TIME);
}
exports.time = time;
function email() {
    return from(String).format(domain_1.JsonFormatTypes.EMAIL);
}
exports.email = email;
function uri() {
    return from(String).format(domain_1.JsonFormatTypes.URI);
}
exports.uri = uri;
function url() {
    return from(String).format(domain_1.JsonFormatTypes.URL);
}
exports.url = url;
function array() {
    return from(Array);
}
exports.array = array;
function map() {
    return from(Map).unknown(true);
}
exports.map = map;
function set() {
    return from(Array).uniqueItems(true);
}
exports.set = set;
function object(properties = {}) {
    return from(Object).properties(properties);
}
exports.object = object;
function any(...types) {
    return from().any(...types);
}
exports.any = any;
//# sourceMappingURL=from.js.map