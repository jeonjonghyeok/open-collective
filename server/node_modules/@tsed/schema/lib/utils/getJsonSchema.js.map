{"version":3,"file":"getJsonSchema.js","sourceRoot":"","sources":["../../src/utils/getJsonSchema.ts"],"names":[],"mappings":";;;AACA,+DAA0D;AAC1D,mDAA8C;AAE9C,+DAA0D;AAE1D;;GAEG;AACH,MAAM,SAAS,GAAG,gBAAgB,CAAC;AAEnC;;GAEG;AACH,SAAS,MAAM,CAAC,OAAY;IAC1B,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;AACjC,CAAC;AAED;;GAEG;AACH,SAAS,GAAG,CAAC,MAAuB,EAAE,OAAY;IAChD,MAAM,KAAK,GAAqB,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,IAAI,GAAG,EAAE,CAAC;IACzE,MAAM,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;IAE5B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QACnB,MAAM,MAAM,GAAG,yCAAmB,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAE3D,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE;YACvC,MAAM,CAAC,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC;SACtC;QAED,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;KACxB;IAED,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IAEnC,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACxB,CAAC;AAED,SAAgB,aAAa,CAAC,KAAkC,EAAE,UAA6B,EAAE;IAC/F,OAAO,GAAG;QACR,GAAG,OAAO;QACV,QAAQ,EAAE,OAAO,CAAC,QAAQ,IAAI,qBAAS,CAAC,IAAI;QAC5C,OAAO,EAAE,EAAE;KACZ,CAAC;IAEF,MAAM,MAAM,GAAG,KAAK,YAAY,iCAAe,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,iCAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAEtF,OAAO,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AAC9B,CAAC;AAVD,sCAUC","sourcesContent":["import {Type} from \"@tsed/core\";\nimport {JsonEntityStore} from \"../domain/JsonEntityStore\";\nimport {SpecTypes} from \"../domain/SpecTypes\";\nimport {JsonSchemaOptions} from \"../interfaces\";\nimport {serializeJsonSchema} from \"./serializeJsonSchema\";\n\n/**\n * @ignore\n */\nconst CACHE_KEY = \"$cache:schemes\";\n\n/**\n * @ignore\n */\nfunction getKey(options: any) {\n  return JSON.stringify(options);\n}\n\n/**\n * @ignore\n */\nfunction get(entity: JsonEntityStore, options: any) {\n  const cache: Map<string, any> = entity.store.get(CACHE_KEY) || new Map();\n  const key = getKey(options);\n\n  if (!cache.has(key)) {\n    const schema = serializeJsonSchema(entity.schema, options);\n\n    if (Object.keys(options.schemas).length) {\n      schema.definitions = options.schemas;\n    }\n\n    cache.set(key, schema);\n  }\n\n  entity.store.set(CACHE_KEY, cache);\n\n  return cache.get(key);\n}\n\nexport function getJsonSchema(model: Type<any> | JsonEntityStore, options: JsonSchemaOptions = {}) {\n  options = {\n    ...options,\n    specType: options.specType || SpecTypes.JSON,\n    schemas: {}\n  };\n\n  const entity = model instanceof JsonEntityStore ? model : JsonEntityStore.from(model);\n\n  return get(entity, options);\n}\n"]}