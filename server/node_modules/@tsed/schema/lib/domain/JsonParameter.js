"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonParameter = void 0;
const core_1 = require("@tsed/core");
const generics_1 = require("../utils/generics");
const serializeJsonSchema_1 = require("../utils/serializeJsonSchema");
const JsonMap_1 = require("./JsonMap");
const JsonParameterTypes_1 = require("./JsonParameterTypes");
const SpecTypes_1 = require("./SpecTypes");
const IGNORE_OS2_PROPS = ["example", "examples", "title"];
class JsonParameter extends JsonMap_1.JsonMap {
    constructor() {
        super(...arguments);
        this.nestedGenerics = [];
    }
    getName() {
        const name = this.get("name");
        if (this.get("in") === "files") {
            return name.split(".")[0];
        }
        return name;
    }
    name(name) {
        this.set("name", name);
        return this;
    }
    description(description) {
        this.set("description", description);
        return this;
    }
    in(inType, expression = "") {
        this.set("in", inType.toLowerCase());
        this.expression = expression;
        return this;
    }
    required(required) {
        this.set("required", required);
        return this;
    }
    schema(schema) {
        this.$schema = schema;
        return this;
    }
    toJSON(options = {}) {
        if (!JsonParameterTypes_1.isParameterType(this.get("in"))) {
            return null;
        }
        const schemas = { ...options.schemas };
        const { type, schema, ...parameter } = super.toJSON(options);
        const jsonSchema = serializeJsonSchema_1.serializeItem(this.$schema, {
            ...options,
            ...generics_1.popGenerics(this)
        });
        parameter.required = parameter.required || this.get("in") === JsonParameterTypes_1.JsonParameterTypes.PATH;
        if (this.get("in") === JsonParameterTypes_1.JsonParameterTypes.FILES) {
            const isOpenApi = options.specType === SpecTypes_1.SpecTypes.OPENAPI;
            const schema = {
                type: isOpenApi ? "string" : "file",
                format: isOpenApi ? "binary" : undefined
            };
            if (jsonSchema.type === "array") {
                jsonSchema.items = core_1.cleanObject({
                    ...jsonSchema.items,
                    ...schema
                });
                parameter.schema = jsonSchema;
            }
            else {
                parameter.schema = core_1.cleanObject({
                    ...jsonSchema,
                    ...schema
                });
            }
            return parameter;
        }
        if (options.specType === SpecTypes_1.SpecTypes.OPENAPI) {
            if (["query"].includes(this.get("in")) && jsonSchema.$ref) {
                return this.refToParameters(parameter, options, schemas);
            }
        }
        if (options.specType === SpecTypes_1.SpecTypes.SWAGGER) {
            if (!jsonSchema.$ref && Object.keys(jsonSchema).length === 1) {
                parameter.type = jsonSchema.type;
                return parameter;
            }
            if (["formData", "query"].includes(this.get("in"))) {
                if (jsonSchema.$ref) {
                    return this.refToParameters(parameter, options, schemas);
                }
                if (jsonSchema.type === "array") {
                    const { minLength, ...props } = jsonSchema;
                    return core_1.cleanObject({
                        ...parameter,
                        ...props,
                        type: "array",
                        collectionFormat: "multi",
                        items: {
                            type: "string"
                        }
                    }, IGNORE_OS2_PROPS);
                }
            }
            if (this.get("in") !== "body") {
                return core_1.cleanObject({
                    ...parameter,
                    ...jsonSchema
                }, IGNORE_OS2_PROPS);
            }
        }
        parameter.schema = jsonSchema;
        return parameter;
    }
    refToParameters(parameter, options, schemas) {
        const schema = options.schemas[this.$schema.getName()];
        if (options.schemas[this.$schema.getName()] && !schemas[this.$schema.getName()]) {
            delete options.schemas[this.$schema.getName()];
        }
        return Object.entries(schema.properties || {}).reduce((params, [key, prop]) => {
            if (options.specType === SpecTypes_1.SpecTypes.OPENAPI) {
                return [
                    ...params,
                    {
                        ...parameter,
                        name: key,
                        required: (schema.required || []).includes(key),
                        schema: prop
                    }
                ];
            }
            return [
                ...params,
                {
                    ...parameter,
                    name: key,
                    required: (schema.required || []).includes(key),
                    ...prop
                }
            ];
        }, []);
    }
}
exports.JsonParameter = JsonParameter;
//# sourceMappingURL=JsonParameter.js.map