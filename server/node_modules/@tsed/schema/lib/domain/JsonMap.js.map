{"version":3,"file":"JsonMap.js","sourceRoot":"","sources":["../../src/domain/JsonMap.ts"],"names":[],"mappings":";;;AAAA,qCAAsC;AAEtC,sEAA0D;AAE1D,MAAa,OAAW,SAAQ,GAAgB;IAG9C,YAAY,MAAkB,EAAE;QAC9B,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACnB,CAAC;IAED,MAAM,CAAC,MAAwB,EAAE;QAC/B,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;YAC3C,IAAI,iBAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;gBACzB,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;aAClB;iBAAM;gBACL,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;aACtB;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,CAAC,UAA6B,EAAE;QACpC,OAAO,kCAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACrC,CAAC;CACF;AAxBD,0BAwBC","sourcesContent":["import {isFunction} from \"@tsed/core\";\nimport {JsonSchemaOptions} from \"../interfaces\";\nimport {serializeMap} from \"../utils/serializeJsonSchema\";\n\nexport class JsonMap<T> extends Map<string, any> {\n  [key: string]: any;\n\n  constructor(obj: Partial<T> = {}) {\n    super();\n\n    this.assign(obj);\n  }\n\n  assign(obj: Partial<T> & any = {}) {\n    Object.entries(obj).forEach(([key, value]) => {\n      if (isFunction(this[key])) {\n        this[key](value);\n      } else {\n        this.set(key, value);\n      }\n    });\n\n    return this;\n  }\n\n  toJSON(options: JsonSchemaOptions = {}) {\n    return serializeMap(this, options);\n  }\n}\n"]}