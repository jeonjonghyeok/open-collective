{"version":3,"file":"JsonParameter.js","sourceRoot":"","sources":["../../src/domain/JsonParameter.ts"],"names":[],"mappings":"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","sourcesContent":["import {cleanObject, Type} from \"@tsed/core\";\nimport {OS3Parameter} from \"@tsed/openspec\";\nimport {JsonSchemaOptions} from \"../interfaces\";\nimport {NestedGenerics, popGenerics} from \"../utils/generics\";\nimport {serializeItem} from \"../utils/serializeJsonSchema\";\nimport {JsonMap} from \"./JsonMap\";\nimport {isParameterType, JsonParameterTypes} from \"./JsonParameterTypes\";\nimport {JsonSchema} from \"./JsonSchema\";\nimport {SpecTypes} from \"./SpecTypes\";\n\nconst IGNORE_OS2_PROPS = [\"example\", \"examples\", \"title\"];\n\nexport class JsonParameter extends JsonMap<OS3Parameter<JsonSchema>> implements NestedGenerics {\n  nestedGenerics: Type<any>[][] = [];\n  $schema: JsonSchema;\n\n  getName() {\n    const name = this.get(\"name\");\n\n    if (this.get(\"in\") === \"files\") {\n      return name.split(\".\")[0];\n    }\n\n    return name;\n  }\n\n  name(name: string): this {\n    this.set(\"name\", name);\n\n    return this;\n  }\n\n  description(description: string): this {\n    this.set(\"description\", description);\n\n    return this;\n  }\n\n  in(inType: string, expression: string | any = \"\"): this {\n    this.set(\"in\", inType.toLowerCase());\n    this.expression = expression;\n\n    return this;\n  }\n\n  required(required: boolean): this {\n    this.set(\"required\", required);\n\n    return this;\n  }\n\n  schema(schema: JsonSchema): this {\n    this.$schema = schema;\n\n    return this;\n  }\n\n  toJSON(options: JsonSchemaOptions = {}) {\n    if (!isParameterType(this.get(\"in\"))) {\n      return null;\n    }\n\n    const schemas = {...options.schemas};\n    const {type, schema, ...parameter} = super.toJSON(options);\n    const jsonSchema = serializeItem(this.$schema, {\n      ...options,\n      ...popGenerics(this)\n    });\n\n    parameter.required = parameter.required || this.get(\"in\") === JsonParameterTypes.PATH;\n\n    if (this.get(\"in\") === JsonParameterTypes.FILES) {\n      const isOpenApi = options.specType === SpecTypes.OPENAPI;\n\n      const schema = {\n        type: isOpenApi ? \"string\" : \"file\",\n        format: isOpenApi ? \"binary\" : undefined\n      };\n\n      if (jsonSchema.type === \"array\") {\n        jsonSchema.items = cleanObject({\n          ...jsonSchema.items,\n          ...schema\n        });\n\n        parameter.schema = jsonSchema;\n      } else {\n        parameter.schema = cleanObject({\n          ...jsonSchema,\n          ...schema\n        });\n      }\n\n      return parameter;\n    }\n\n    if (options.specType === SpecTypes.OPENAPI) {\n      if ([\"query\"].includes(this.get(\"in\")) && jsonSchema.$ref) {\n        return this.refToParameters(parameter, options, schemas);\n      }\n    }\n\n    if (options.specType === SpecTypes.SWAGGER) {\n      if (!jsonSchema.$ref && Object.keys(jsonSchema).length === 1) {\n        parameter.type = jsonSchema.type;\n        return parameter;\n      }\n\n      if ([\"formData\", \"query\"].includes(this.get(\"in\"))) {\n        if (jsonSchema.$ref) {\n          return this.refToParameters(parameter, options, schemas);\n        }\n\n        if (jsonSchema.type === \"array\") {\n          const {minLength, ...props} = jsonSchema;\n          return cleanObject(\n            {\n              ...parameter,\n              ...props,\n              type: \"array\",\n              collectionFormat: \"multi\",\n              items: {\n                type: \"string\"\n              }\n            },\n            IGNORE_OS2_PROPS\n          );\n        }\n      }\n\n      if (this.get(\"in\") !== \"body\") {\n        return cleanObject(\n          {\n            ...parameter,\n            ...jsonSchema\n          },\n          IGNORE_OS2_PROPS\n        );\n      }\n    }\n\n    parameter.schema = jsonSchema;\n\n    return parameter;\n  }\n\n  private refToParameters(parameter: any, options: JsonSchemaOptions, schemas: any) {\n    const schema = options.schemas![this.$schema.getName()];\n\n    if (options.schemas![this.$schema.getName()] && !schemas[this.$schema.getName()]) {\n      delete options.schemas![this.$schema.getName()];\n    }\n\n    return Object.entries(schema.properties || {}).reduce((params, [key, prop]: [string, any]) => {\n      if (options.specType === SpecTypes.OPENAPI) {\n        return [\n          ...params,\n          {\n            ...parameter,\n            name: key,\n            required: (schema.required || []).includes(key),\n            schema: prop\n          }\n        ];\n      }\n\n      return [\n        ...params,\n        {\n          ...parameter,\n          name: key,\n          required: (schema.required || []).includes(key),\n          ...prop\n        }\n      ];\n    }, []);\n  }\n}\n"]}