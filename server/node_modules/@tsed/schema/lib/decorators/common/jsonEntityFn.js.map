{"version":3,"file":"jsonEntityFn.js","sourceRoot":"","sources":["../../../src/decorators/common/jsonEntityFn.ts"],"names":[],"mappings":";;;AACA,yCAA6C;AAE7C;;;;;;;;;;;;;;;;;GAiBG;AACH,SAAgB,YAAY,CAA4B,EAAwD;IAC9G,OAAO,CAAC,GAAG,UAA+B,EAAE,EAAE;QAC5C,MAAM,MAAM,GAAQ,EAAE,CAAC,wBAAe,CAAC,IAAI,CAAI,GAAG,UAAU,CAAC,EAAE,UAAU,CAAC,CAAC;QAC3E,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;YAChC,MAAM,CAAC,GAAG,UAAU,CAAC,CAAC;SACvB;IACH,CAAC,CAAC;AACJ,CAAC;AAPD,oCAOC","sourcesContent":["import {DecoratorParameters} from \"@tsed/core\";\nimport {JsonEntityStore} from \"../../domain\";\n\n/**\n * Decorator util to compose another decorator. See @@Description@@ decorator implementation for more details.\n *\n * ## Usage\n *\n * ```typescript\n * export function Description(description: any) {\n *   return JsonEntityFn((entity: JsonEntityStore, args: DecoratorParameters) => {\n *       entity.itemSchema.description(description)\n *   });\n * }\n * ```\n *\n * @param fn\n * @decorator\n * @utils\n * @model\n */\nexport function JsonEntityFn<T extends JsonEntityStore>(fn: (entity: T, parameters: DecoratorParameters) => void): (...args: any[]) => any {\n  return (...parameters: DecoratorParameters) => {\n    const result: any = fn(JsonEntityStore.from<T>(...parameters), parameters);\n    if (typeof result === \"function\") {\n      result(...parameters);\n    }\n  };\n}\n"]}