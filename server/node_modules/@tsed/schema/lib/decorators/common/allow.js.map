{"version":3,"file":"allow.js","sourceRoot":"","sources":["../../../src/decorators/common/allow.ts"],"names":[],"mappings":";;;AAAA,qCAAqF;AAErF,iDAA4C;AAE5C,SAAS,eAAe,CAAC,KAAsB,EAAE,MAAa;IAC5D,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,EAAE;QACzB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;YACxB,wBAAwB;YACxB,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;SACtG;aAAM;YACL,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;SAClC;KACF;AACH,CAAC;AAED,SAAS,aAAa,CAAC,KAAsB,EAAE,MAAa;IAC1D,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;QACzB,IAAI,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE;YACxB,MAAM,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAEzD,IAAI,UAAU,IAAI,UAAU,CAAC,KAAK,CAAC,WAAkB,CAAC,EAAE;gBACtD,MAAM,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,WAAkB,CAAC,CAAC;gBAExD,UAAU,CAAC,KAAK,CAAC,WAAkB,CAAC,GAAG;oBACrC,KAAK,EAAE;wBACL;4BACE,IAAI,EAAE,MAAM;yBACb;wBACD,UAAU;qBACX;iBACF,CAAC;aACH;SACF;aAAM;YACL,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;SAC/B;KACF;AACH,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACH,SAAgB,KAAK,CAAC,GAAG,MAAa;IACpC,OAAO,sBAAe,CACpB,2BAAY,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;QAC3B,QAAQ,KAAK,CAAC,aAAa,EAAE;YAC3B,KAAK,qBAAc,CAAC,KAAK;gBACvB,KAAK,CAAC,SAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAEhC,eAAe,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;gBAC/B,aAAa,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;gBAE7B,MAAM;YACR,KAAK,qBAAc,CAAC,IAAI;gBACtB,KAAK,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;gBAEnD,eAAe,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;gBAC/B,aAAa,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;gBAC7B,MAAM;YACR;gBACE,MAAM,IAAI,+BAAwB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;SACnD;IACH,CAAC,CAAC,CACH,CAAC;AACJ,CAAC;AAtBD,sBAsBC","sourcesContent":["import {applyDecorators, DecoratorTypes, UnsupportedDecoratorType} from \"@tsed/core\";\nimport {JsonEntityStore} from \"../../domain/JsonEntityStore\";\nimport {JsonEntityFn} from \"./jsonEntityFn\";\n\nfunction applyStringRule(store: JsonEntityStore, values: any[]) {\n  if (store.type === String) {\n    if (!values.includes(\"\")) {\n      // Disallow empty string\n      (!store.schema.has(\"minLength\") || store.schema.get(\"minLength\") === 0) && store.schema.minLength(1);\n    } else {\n      store.schema.delete(\"minLength\");\n    }\n  }\n}\n\nfunction applyNullRule(store: JsonEntityStore, values: any[]) {\n  if (values.includes(null)) {\n    if (store.schema.isClass) {\n      const properties = store.parent.schema.get(\"properties\");\n\n      if (properties && properties[store.propertyKey as any]) {\n        const propSchema = properties[store.propertyKey as any];\n\n        properties[store.propertyKey as any] = {\n          oneOf: [\n            {\n              type: \"null\"\n            },\n            propSchema\n          ]\n        };\n      }\n    } else {\n      store.schema.addTypes(\"null\");\n    }\n  }\n}\n\n/**\n * Add allowed values when the property or parameters is required.\n *\n * #### Example on parameter:\n *\n * ```typescript\n * @Post(\"/\")\n * async method(@Allow(\"\") @BodyParams(\"field\") field: string) {}\n * ```\n * > Required will throw a BadRequest when the given value is `null` or `undefined` but not for an empty string.\n *\n * #### Example on model:\n *\n * ```typescript\n * class Model {\n *   @Allow(\"\")\n *   field: string;\n * }\n * ```\n *\n * @returns {Function}\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n */\nexport function Allow(...values: any[]) {\n  return applyDecorators(\n    JsonEntityFn((store, args) => {\n      switch (store.decoratorType) {\n        case DecoratorTypes.PARAM:\n          store.parameter!.required(true);\n\n          applyStringRule(store, values);\n          applyNullRule(store, values);\n\n          break;\n        case DecoratorTypes.PROP:\n          store.parentSchema.addRequired(store.propertyName);\n\n          applyStringRule(store, values);\n          applyNullRule(store, values);\n          break;\n        default:\n          throw new UnsupportedDecoratorType(Allow, args);\n      }\n    })\n  );\n}\n"]}