{"version":3,"file":"required.js","sourceRoot":"","sources":["../../../src/decorators/common/required.ts"],"names":[],"mappings":";;;AAAA,qCAAqF;AACrF,mCAA8B;AAC9B,iDAA4C;AAC5C,yCAAoC;AAEpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAwCG;AACH,SAAgB,QAAQ,CAAC,WAAoB,IAAI,EAAE,GAAG,qBAA4B;IAChF,OAAO,sBAAe,CACpB,mBAAQ,EAAE,EACV,QAAQ,IAAI,aAAK,CAAC,qBAAqB,CAAC,EACxC,2BAAY,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;QAC3B,QAAQ,KAAK,CAAC,aAAa,EAAE;YAC3B,KAAK,qBAAc,CAAC,KAAK;gBACvB,KAAK,CAAC,SAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBACpC,MAAM;YACR,KAAK,qBAAc,CAAC,IAAI;gBACtB,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,cAAc,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;gBACtH,MAAM;YACR;gBACE,MAAM,IAAI,+BAAwB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;SACtD;IACH,CAAC,CAAC,CACH,CAAC;AACJ,CAAC;AAjBD,4BAiBC","sourcesContent":["import {applyDecorators, DecoratorTypes, UnsupportedDecoratorType} from \"@tsed/core\";\nimport {Allow} from \"./allow\";\nimport {JsonEntityFn} from \"./jsonEntityFn\";\nimport {Property} from \"./property\";\n\n/**\n * Add required annotation for a function argument.\n *\n * The @Required decorator can be used on two cases.\n *\n * To decorate a parameters:\n *\n * ```typescript\n * @Post(\"/\")\n * async method(@Required() @BodyParams(\"field\") field: string) {}\n * ```\n *\n * To decorate a model:\n *\n * ```typescript\n * class Model {\n *   @Required()\n *   field: string;\n * }\n * ```\n *\n * > Required will throw a BadRequest when the given value is `null`, an empty string or `undefined`.\n *\n * ### Allow a values\n *\n * In some case, you didn't want trigger a BadRequest when the value is an empty string for example.\n * The decorator `@Allow()`, allow you to configure a value list for which there will be no exception.\n *\n * ```typescript\n * class Model {\n *   @Allow(\"\") // add automatically required flag\n *   field: string;\n * }\n * ```\n *\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n */\nexport function Required(required: boolean = true, ...allowedRequiredValues: any[]) {\n  return applyDecorators(\n    Property(),\n    required && Allow(allowedRequiredValues),\n    JsonEntityFn((store, args) => {\n      switch (store.decoratorType) {\n        case DecoratorTypes.PARAM:\n          store.parameter!.required(required);\n          break;\n        case DecoratorTypes.PROP:\n          required ? store.parentSchema.addRequired(store.propertyName) : store.parentSchema.removeRequired(store.propertyName);\n          break;\n        default:\n          throw new UnsupportedDecoratorType(Required, args);\n      }\n    })\n  );\n}\n"]}