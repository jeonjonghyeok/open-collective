{"version":3,"file":"genericOf.js","sourceRoot":"","sources":["../../../src/decorators/generics/genericOf.ts"],"names":[],"mappings":";;;AACA,kEAA6D;AAW7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiEG;AACH,SAAgB,SAAS,CAAC,GAAG,QAAqB;IAChD,MAAM,cAAc,GAAkB,CAAC,QAAQ,CAAC,CAAC;IAEjD,MAAM,SAAS,GAAG,CAAC,GAAG,IAAS,EAAE,EAAE;QACjC,MAAM,KAAK,GAAG,iCAAe,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;QAC5C,KAAK,CAAC,cAAc,GAAG,cAAc,CAAC;IACxC,CAAC,CAAC;IAEF,SAAS,CAAC,MAAM,GAAG,CAAC,GAAG,QAAa,EAAE,EAAE;QACtC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE9B,OAAO,SAAS,CAAC;IACnB,CAAC,CAAC;IAEF,OAAO,SAAS,CAAC;AACnB,CAAC;AAfD,8BAeC","sourcesContent":["import {Type} from \"@tsed/core\";\nimport {JsonEntityStore} from \"../../domain/JsonEntityStore\";\n\nexport interface GenericOfChainedDecorators {\n  (...args: any): any;\n  /**\n   * Declare a nested generic models\n   * @param generics\n   */\n  Nested(...generics: (Type<any> | any)[]): this;\n}\n\n/**\n * Set the types of a Generic class.\n *\n * ## Example\n *\n * ```typescript\n * class Product {\n *   @Property()\n *   label: string;\n * }\n *\n * @Generics(\"T\")\n * class Paginated<T> {\n *   @CollectionOf(\"T\")\n *   data: T[];\n *\n *   @Property()\n *   totalCount: number;\n * }\n *\n * class Payload {\n *    @GenericOf(Product)\n *    products: Paginated<Product>;\n * }\n * ```\n *\n * ## Example with nested generics\n *\n * ```typescript\n * class Product {\n *   @Property()\n *   label: string;\n * }\n *\n * @Generics(\"T\")\n * class Paginated<T> {\n *   @CollectionOf(\"T\")\n *   data: T[];\n *\n *   @Property()\n *   totalCount: number;\n * }\n *\n * @Generics(\"D\")\n * class Submission<D> {\n *   @Property()\n *   _id: string;\n *\n *   @Property(\"D\")\n *   data: D;\n * }\n *\n * class Payload {\n *    @GenericOf(Submissions).Nested(Product)\n *    submissions: Paginated<Submission<Product>>;\n * }\n * ```\n *\n * @param {Type<any>[]} generics\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n * @generics\n */\nexport function GenericOf(...generics: Type<any>[]): GenericOfChainedDecorators {\n  const nestedGenerics: Type<any>[][] = [generics];\n\n  const decorator = (...args: any) => {\n    const store = JsonEntityStore.from(...args);\n    store.nestedGenerics = nestedGenerics;\n  };\n\n  decorator.Nested = (...generics: any) => {\n    nestedGenerics.push(generics);\n\n    return decorator;\n  };\n\n  return decorator;\n}\n"]}