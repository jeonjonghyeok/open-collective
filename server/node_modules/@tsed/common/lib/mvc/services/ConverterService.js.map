{"version":3,"file":"ConverterService.js","sourceRoot":"","sources":["../../../src/mvc/services/ConverterService.ts"],"names":[],"mappings":";;;;AAAA,qCAAsE;AACtE,iCAAoE;AACpE,mDAA6H;AAa7H;;;GAGG;AACH,SAAS,qBAAqB,CAAC,IAAW;IACxC,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,EAAE;QACpB,MAAM,CAAC,UAAU,EAAE,QAAQ,EAAE,OAAO,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC;QAElD,OAAO;YACL,GAAG,OAAO;YACV,IAAI,EAAE,QAAQ,IAAI,UAAU;YAC5B,cAAc,EAAE,mBAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS;YACjE,oBAAoB,EAAE,OAAO,CAAC,oBAAoB,KAAK,QAAQ;SAChE,CAAC;KACH;IAED,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QACrB,IAAI,cAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,MAAM,EAAE;YAC/B,OAAO;gBACL,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;aACd,CAAC;SACH;QAED,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;KAChB;IAED,OAAO,EAAE,CAAC;AACZ,CAAC;AAGD,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;IAG3B,YAAoB,eAAgC,EAAmB,aAA4B;QAA/E,oBAAe,GAAf,eAAe,CAAiB;QAClD,IAAI,CAAC,iBAAiB,GAAG,aAAa,CAAC,GAAG,CAAoB,WAAW,CAAC,IAAI,EAAE,CAAC;IACnF,CAAC;IAaD,SAAS,CAAC,GAAQ,EAAE,UAAoD,EAAE;QACxE,OAAO,uBAAS,CAAC,GAAG,EAAE;YACpB,QAAQ,EAAE,IAAI;YACd,oBAAoB,EAAE,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,KAAK,QAAQ;YAC9E,GAAG,OAAO;SACX,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,cAAc,CAAC,GAAQ,EAAE,UAA4B,EAAE;QACrD,OAAO,gCAAkB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAC1C,CAAC;IAoBD,WAAW,CACT,GAAQ,EACR,GAAG,IAIiE;QAEpE,MAAM,OAAO,GAAG;YACd,QAAQ,EAAE,IAAI;YACd,oBAAoB,EAAE,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,KAAK,QAAQ;YAC9E,GAAG,qBAAqB,CAAC,IAAI,CAAC;SAC/B,CAAC;QAEF,OAAO,yBAAW,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IACnC,CAAC;CACF,CAAA;AAnEY,gBAAgB;IAD5B,eAAU,EAAE;IAI4C,mBAAA,kBAAa,EAAE,CAAA;6CAAjC,oBAAe;GAHzC,gBAAgB,CAmE5B;AAnEY,4CAAgB","sourcesContent":["import {classOf, isCollection, MetadataTypes, Type} from \"@tsed/core\";\nimport {Configuration, Injectable, InjectorService} from \"@tsed/di\";\nimport {classToPlainObject, deserialize, JsonDeserializerOptions, JsonSerializerOptions, serialize} from \"@tsed/json-mapper\";\nimport {ConverterSettings} from \"../../config/interfaces/ConverterSettings\";\n\n/**\n * @deprecated Since v6.\n */\nexport interface ConverterOptions extends MetadataTypes {\n  withIgnoredProps?: boolean;\n  additionalProperties?: \"error\" | \"ignore\" | \"accept\";\n\n  [key: string]: any;\n}\n\n/**\n * @ignore\n * @param args\n */\nfunction mapDeserializeOptions(args: any[]) {\n  if (args.length >= 2) {\n    const [targetType, baseType, options = {}] = args;\n\n    return {\n      ...options,\n      type: baseType || targetType,\n      collectionType: isCollection(targetType) ? targetType : undefined,\n      additionalProperties: options.additionalProperties === \"accept\"\n    };\n  }\n\n  if (args.length === 1) {\n    if (classOf(args[0]) !== Object) {\n      return {\n        type: args[0]\n      };\n    }\n\n    return args[0];\n  }\n\n  return {};\n}\n\n@Injectable()\nexport class ConverterService {\n  private converterSettings: ConverterSettings;\n\n  constructor(private injectorService: InjectorService, @Configuration() configuration: Configuration) {\n    this.converterSettings = configuration.get<ConverterSettings>(\"converter\") || {};\n  }\n\n  /**\n   * Convert instance to plainObject.\n   *\n   * @param obj\n   * @param options\n   */\n  serialize(obj: any, options?: JsonSerializerOptions): any;\n  /**\n   * @deprecated Since v6.\n   */\n  serialize(obj: any, options?: ConverterOptions): any;\n  serialize(obj: any, options: ConverterOptions | JsonSerializerOptions = {}): any {\n    return serialize(obj, {\n      useAlias: true,\n      additionalProperties: this.converterSettings.additionalProperties === \"accept\",\n      ...options\n    });\n  }\n\n  /**\n   * @deprecated Since v6. Use classToPlainObject from @tsed/json-mapper instead\n   */\n  serializeClass(obj: any, options: ConverterOptions = {}) {\n    return classToPlainObject(obj, options);\n  }\n\n  /**\n   * Convert a plainObject to targetType.\n   *\n   * ### Options\n   *\n   * - `ignoreCallback`: callback called for each object which will be deserialized. The callback can return a boolean to avoid the default converter behavior.\n   * - `checkRequiredValue`: Disable the required check condition.\n   *\n   * @param obj Object source that will be deserialized\n   * @param options Mapping options\n   * @returns {any}\n   */\n  deserialize(obj: any, options?: JsonDeserializerOptions): any;\n  deserialize(obj: any, type: any, options?: ConverterOptions): any;\n  /**\n   * @deprecated Since v6.\n   */\n  deserialize(obj: any, collectionType: any, baseType: any, options?: ConverterOptions): any;\n  deserialize(\n    obj: any,\n    ...args:\n      | any[]\n      | [any | JsonDeserializerOptions]\n      | [Type<any> | any, Type<any> | any]\n      | [Type<any> | any, Type<any> | any | undefined, ConverterOptions]\n  ): any {\n    const options = {\n      useAlias: true,\n      additionalProperties: this.converterSettings.additionalProperties === \"accept\",\n      ...mapDeserializeOptions(args)\n    };\n\n    return deserialize(obj, options);\n  }\n}\n"]}