{"version":3,"file":"allow.js","sourceRoot":"","sources":["../../../src/mvc/decorators/allow.ts"],"names":[],"mappings":";;;AAAA,yCAAwC;AAExC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BG;AACH,SAAgB,KAAK,CAAC,GAAG,qBAA4B;IACnD,OAAO,cAAC,CAAC,GAAG,qBAAqB,CAAC,CAAC;AACrC,CAAC;AAFD,sBAEC","sourcesContent":["import {Allow as A} from \"@tsed/schema\";\n\n/**\n * Add allowed values when the property or parameters is required.\n *\n * #### Example on parameter:\n *\n * ```typescript\n * @Post(\"/\")\n * async method(@Required() @Allow(\"\") @BodyParams(\"field\") field: string) {}\n * ```\n * > Required will throw a BadRequest when the given value is `null` or `undefined` but not for an empty string.\n *\n * #### Example on model:\n *\n * ```typescript\n * class Model {\n *   @Property()\n *   @Required()\n *   @Allow(\"\")\n *   field: string;\n * }\n * ```\n *\n * @returns {Function}\n * @decorator\n * @operation\n * @input\n * @schema\n * @validation\n * @ignore\n * @deprecated Since v6. Use @Allow decorator from @tsed/schema instead of.\n */\nexport function Allow(...allowedRequiredValues: any[]): any {\n  return A(...allowedRequiredValues);\n}\n"]}