{"version":3,"file":"pathParams.js","sourceRoot":"","sources":["../../../../src/mvc/decorators/params/pathParams.ts"],"names":[],"mappings":";;;AAEA,wDAAmD;AACnD,mEAA8D;AAC9D,yCAAoC;AAuCpC,SAAgB,UAAU,CAAC,GAAG,IAAW;IACvC,MAAM,EAAC,UAAU,EAAE,OAAO,EAAE,YAAY,GAAG,IAAI,EAAE,aAAa,GAAG,IAAI,EAAC,GAAG,mCAAgB,CAAC,IAAI,CAAC,CAAC;IAEhG,OAAO,mBAAQ,CAAC,uBAAU,CAAC,IAAI,EAAE;QAC/B,UAAU;QACV,OAAO;QACP,YAAY;QACZ,aAAa;KACd,CAAC,CAAC;AACL,CAAC;AATD,gCASC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACH,SAAgB,aAAa,CAAC,UAAkB;IAC9C,OAAO,mBAAQ,CAAC,uBAAU,CAAC,IAAI,EAAE,EAAC,UAAU,EAAC,CAAC,CAAC;AACjD,CAAC;AAFD,sCAEC","sourcesContent":["import {Type} from \"@tsed/core\";\nimport {IParamOptions} from \"../../interfaces/IParamOptions\";\nimport {ParamTypes} from \"../../models/ParamTypes\";\nimport {mapParamsOptions} from \"../../utils/mapParamsOptions\";\nimport {UseParam} from \"./useParam\";\n\n/**\n * PathParams return the value from [request.params](http://expressjs.com/en/4x/api.html#req.params) object.\n *\n * #### Example\n *\n * ```typescript\n * @Controller('/')\n * class MyCtrl {\n *    @Get('/')\n *    get(@PathParams() params: any) {\n *       console.log('Entire params', params);\n *    }\n *\n *    @Get('/')\n *    get(@PathParams('id') id: string) {\n *       console.log('ID', id);\n *    }\n *\n *    @Get('/')\n *    get(@PathParams({expression: 'id', useType: () => new MyCustomModel() }) id: string) {\n *       console.log('ID', id);\n *    }\n * }\n * ```\n * > For more information on deserialization see [converters](/docs/converters.md) page.\n *\n * @param expression The path of the property to get.\n * @param useType The type of the class that to be used to deserialize the data.\n * @decorator\n * @operation\n * @input\n */\nexport function PathParams(expression: string, useType: Type<any>): ParameterDecorator;\nexport function PathParams(expression: string): ParameterDecorator;\nexport function PathParams(useType: Type<any>): ParameterDecorator;\nexport function PathParams(options: IParamOptions<any>): ParameterDecorator;\nexport function PathParams(): ParameterDecorator;\nexport function PathParams(...args: any[]): ParameterDecorator {\n  const {expression, useType, useConverter = true, useValidation = true} = mapParamsOptions(args);\n\n  return UseParam(ParamTypes.PATH, {\n    expression,\n    useType,\n    useConverter,\n    useValidation\n  });\n}\n\n/**\n * RawPathParams return the raw value from [request.params](http://expressjs.com/en/4x/api.html#req.params) object.\n *\n * Any validation and transformation are performed on the value. Use [pipes](/docs/pipes.html) to validate and/or transform the value.\n *\n * #### Example\n *\n * ```typescript\n * @Controller('/')\n * class MyCtrl {\n *    @Get('/')\n *    get(@RawPathParams() params: string) {\n *       console.log('Entire params', params);\n *    }\n *\n *    @Get('/')\n *    get(@RawPathParams('id') id: string) {\n *       console.log('ID', id);\n *    }\n * }\n * ```\n * > For more information on deserialization see [converters](/docs/converters.md) page.\n *\n * @param expression The path of the property to get.\n * @decorator\n * @operation\n * @input\n */\nexport function RawPathParams(expression: string) {\n  return UseParam(ParamTypes.PATH, {expression});\n}\n"]}