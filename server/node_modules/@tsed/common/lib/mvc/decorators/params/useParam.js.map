{"version":3,"file":"useParam.js","sourceRoot":"","sources":["../../../../src/mvc/decorators/params/useParam.ts"],"names":[],"mappings":";;;AAAA,uCAAkC;AAClC,qCAA+C;AAC/C,yCAAuC;AAGvC,uCAAkC;AAClC,6DAAwD;AACxD,6DAAwD;AACxD,iDAA4C;AAC5C,mDAA8C;AAE9C;;;GAGG;AACH,SAAS,QAAQ,CAAC,UAA8B,EAAE;IAChD,MAAM,EAAC,SAAS,EAAE,OAAO,EAAE,UAAU,EAAE,aAAa,EAAE,YAAY,EAAE,GAAG,KAAK,EAAC,GAAG,OAAO,CAAC;IAExF,OAAO;QACL,OAAO;YACL,CAAC,CAAC,iBAAO,CAAC,OAAO,CAAC;YAClB,CAAC,CAAC,iBAAO,CAAC,CAAC,MAAM,EAAE,UAAU,EAAE,EAAE;gBAC7B,IAAI,MAAM,CAAC,YAAY,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,EAAE;oBACjD,YAAG,EAAE,CAAC,GAAG,UAAU,CAAC,CAAC;iBACtB;YACH,CAAC,CAAC;QACN,UAAU,IAAI,uCAAkB,CAAC,UAAU,CAAC;QAC5C,UAAU,IAAI,aAAI,CAAC,UAAU,CAAC;QAC9B,aAAa,IAAI,6BAAa,EAAE;QAChC,YAAY,IAAI,uCAAkB,CAAC,KAAK,CAAC;KAC1C,CAAC;AACJ,CAAC;AAED;;;;;;;;;;;;;;;;GAgBG;AACH,SAAgB,QAAQ,CAAC,SAA8B,EAAE,UAA8B,EAAE;IACvF,OAAO,oBAAa,CAAC,2BAAY,CAAC,SAAS,CAAC,EAAE,GAAG,QAAQ,CAAC,EAAC,SAAS,EAAE,GAAG,OAAO,EAAC,CAAC,CAAuB,CAAC;AAC5G,CAAC;AAFD,4BAEC","sourcesContent":["import {UseType} from \"./useType\";\nimport {Type, useDecorators} from \"@tsed/core\";\nimport {Any, Name} from \"@tsed/schema\";\nimport {IParamOptions} from \"../../interfaces/IParamOptions\";\nimport {ParamTypes} from \"../../models/ParamTypes\";\nimport {ParamFn} from \"./paramFn\";\nimport {UseDeserialization} from \"./useDeserialization\";\nimport {UseParamExpression} from \"./useParamExpression\";\nimport {UseParamType} from \"./useParamType\";\nimport {UseValidation} from \"./useValidation\";\n\n/**\n * @ignore\n * @param options\n */\nfunction mapPipes(options: IParamOptions<any> = {}) {\n  const {paramType, useType, expression, useValidation, useConverter, ...props} = options;\n\n  return [\n    useType\n      ? UseType(useType)\n      : ParamFn((entity, parameters) => {\n          if (entity.isCollection && entity.type === Object) {\n            Any()(...parameters);\n          }\n        }),\n    expression && UseParamExpression(expression),\n    expression && Name(expression),\n    useValidation && UseValidation(),\n    useConverter && UseDeserialization(props)\n  ];\n}\n\n/**\n * Register a new param. It use the paramType to extract value and give it to the next pipe.\n *\n * Given options allow to enable or disable following pipes:\n *\n * - useType: Add extra type for the json mapper,\n * - expression: Get property from the returned value by the previous pipe.\n * - useValidation: Apply validation from the returned value by the previous pipe.\n * - useConverter: Apply json mapper from the returned value by the previous pipe.\n *\n * @param paramType\n * @param options\n * @decorator\n * @operation\n * @input\n * @pipe\n */\nexport function UseParam(paramType: ParamTypes | string, options: IParamOptions<any> = {}): ParameterDecorator {\n  return useDecorators(UseParamType(paramType), ...mapPipes({paramType, ...options})) as ParameterDecorator;\n}\n"]}