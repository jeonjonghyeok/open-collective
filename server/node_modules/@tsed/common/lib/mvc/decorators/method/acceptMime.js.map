{"version":3,"file":"acceptMime.js","sourceRoot":"","sources":["../../../../src/mvc/decorators/method/acceptMime.ts"],"names":[],"mappings":";;;AAAA,qCAAmD;AACnD,yCAAsC;AACtC,mFAA8E;AAC9E,2CAAsC;AAEtC;;;;;;;;;;;;;;;;;GAiBG;AACH,SAAgB,UAAU,CAAC,GAAG,KAAe;IAC3C,OAAO,oBAAa,CAAC,iBAAQ,CAAC,GAAG,KAAK,CAAC,EAAE,eAAQ,CAAC,6CAAqB,EAAE,KAAK,CAAC,EAAE,qBAAS,CAAC,6CAAqB,CAAC,CAAC,CAAC;AACrH,CAAC;AAFD,gCAEC","sourcesContent":["import {StoreSet, useDecorators} from \"@tsed/core\";\nimport {Produces} from \"@tsed/schema\";\nimport {AcceptMimesMiddleware} from \"../../middlewares/AcceptMimesMiddleware\";\nimport {UseBefore} from \"./useBefore\";\n\n/**\n * Set a mime list which are acceptable and checks if the specified content types are acceptable, based on the requestâ€™s Accept HTTP header field.\n *\n * ```typescript\n *  @Controller('/mypath')\n *  export class MyCtrl {\n *\n *    @Get('/')\n *    @AcceptMime('application/json')\n *    public getResource(){}\n *  }\n * ```\n *\n * @param mimes\n * @decorator\n * @operation\n * @response\n */\nexport function AcceptMime(...mimes: string[]): Function {\n  return useDecorators(Produces(...mimes), StoreSet(AcceptMimesMiddleware, mimes), UseBefore(AcceptMimesMiddleware));\n}\n"]}