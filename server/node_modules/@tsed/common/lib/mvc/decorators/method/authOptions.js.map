{"version":3,"file":"authOptions.js","sourceRoot":"","sources":["../../../../src/mvc/decorators/method/authOptions.ts"],"names":[],"mappings":";;;AAAA,qCAQoB;AACpB,6CAAwC;AAyBxC;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,SAAgB,WAAW,CAAC,SAAoB,EAAE,UAAwB,EAAE;IAC1E,OAAO,CAAI,GAAG,IAAyB,EAAqC,EAAE;QAC5E,QAAQ,sBAAe,CAAC,IAAI,CAAC,EAAE;YAC7B,KAAK,qBAAc,CAAC,MAAM;gBACxB,OAAO,uBAAU,CAAC,CAAC,QAAQ,EAAE,EAAE;oBAC7B,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;oBAE7B,IAAI,OAAO,CAAC,SAAS,EAAE;wBACrB,MAAM,EAAC,SAAS,EAAC,GAAG,OAAO,CAAC;wBAC5B,KAAK,CAAC,KAAK,CAAC,WAAW,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;wBAC1C,OAAO,OAAO,CAAC,SAAS,CAAC;qBAC1B;oBAED,IAAI,OAAO,CAAC,QAAQ,EAAE;wBACpB,MAAM,EAAC,QAAQ,EAAC,GAAG,OAAO,CAAC;wBAC3B,EAAE,CAAC,MAAM,CAAC,QAAe,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;4BAC9C,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,MAAM,CAAqB,EAAE,EAAE;gCACtE,QAAQ,CAAC,SAAS,CAAC,iBAAiB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;4BACrD,CAAC,CAAC,CAAC;wBACL,CAAC,CAAC,CAAC;wBAEH,OAAO,OAAO,CAAC,QAAQ,CAAC;qBACzB;oBAED,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;gBACxC,CAAC,CAAC,CAAC,GAAI,IAAkC,CAAC,CAAC;YAE7C,KAAK,qBAAc,CAAC,KAAK;gBACvB,wBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;gBAC5D,MAAM;YAER;gBACE,MAAM,IAAI,+BAAwB,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;SACzD;IACH,CAAC,CAAC;AACJ,CAAC;AAnCD,kCAmCC","sourcesContent":["import {\n  decorateMethodsOf,\n  DecoratorMethodParameters,\n  DecoratorParameters,\n  decoratorTypeOf,\n  DecoratorTypes,\n  Type,\n  UnsupportedDecoratorType\n} from \"@tsed/core\";\nimport {EndpointFn} from \"./endpointFn\";\n\nexport interface IAuthOptions {\n  /**\n   * @deprecated Since v6. Use @Returns from @tsed/schema\n   */\n  responses?: {\n    [statusCode: string]: {\n      description: string;\n    };\n  };\n  /**\n   * @deprecated Since v6. Use @Security from @tsed/schema\n   */\n  security?:\n    | {\n        [securityName: string]: string[];\n      }[]\n    | {\n        [securityName: string]: string[];\n      };\n\n  [key: string]: any;\n}\n\n/**\n * Change authentication options.\n *\n * ```typescript\n * @Controller('/mypath')\n * @UseAuth(MyAuthStrategy, {role: ''})\n * class MyCtrl {\n *\n *   @Get('/')\n *   @AuthOptions(MyAuthStrategy, {role: 'admin'})\n *   public getResource(){}\n * }\n * ```\n *\n * @param guardAuth\n * @param options {Object} Object passed to the customer auth strategy\n * @returns {Function}\n * @decorator\n * @decorator\n * @operation\n */\nexport function AuthOptions(guardAuth: Type<any>, options: IAuthOptions = {}): Function {\n  return <T>(...args: DecoratorParameters): TypedPropertyDescriptor<T> | void => {\n    switch (decoratorTypeOf(args)) {\n      case DecoratorTypes.METHOD:\n        return EndpointFn((endpoint) => {\n          const store = endpoint.store;\n\n          if (options.responses) {\n            const {responses} = options;\n            store.merge(\"responses\", responses, true);\n            delete options.responses;\n          }\n\n          if (options.security) {\n            const {security} = options;\n            [].concat(security as any).forEach((security) => {\n              Object.entries(security).forEach(([name, scopes]: [string, string[]]) => {\n                endpoint.operation.addSecurityScopes(name, scopes);\n              });\n            });\n\n            delete options.security;\n          }\n\n          store.merge(guardAuth, options, true);\n        })(...(args as DecoratorMethodParameters));\n\n      case DecoratorTypes.CLASS:\n        decorateMethodsOf(args[0], AuthOptions(guardAuth, options));\n        break;\n\n      default:\n        throw new UnsupportedDecoratorType(AuthOptions, args);\n    }\n  };\n}\n"]}