{"version":3,"file":"use.js","sourceRoot":"","sources":["../../../../src/mvc/decorators/method/use.ts"],"names":[],"mappings":";;;AAAA,qCAAoE;AACpE,yCAA2E;AAC3E,iDAAmD;AAGnD,SAAS,UAAU,CAAC,IAAW;IAC7B,IAAI,MAAM,GAAuB,SAAS,CAAC;IAC3C,IAAI,IAAI,GAAgC,SAAS,CAAC;IAElD,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAQ,EAAE,EAAE;QAC3C,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,oBAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YACzD,MAAM,GAAG,GAAG,CAAC;YAEb,OAAO,KAAK,CAAC;SACd;QAED,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,YAAY,MAAM,EAAE;YACpD,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;YAEvB,OAAO,KAAK,CAAC;SACd;QAED,OAAO,CAAC,CAAC,GAAG,CAAC;IACf,CAAC,CAAC,CAAC;IAEH,OAAO;QACL,IAAI;QACJ,MAAM;QACN,WAAW;KACZ,CAAC;AACJ,CAAC;AAED;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,SAAgB,GAAG,CAAC,GAAG,IAAW;IAChC,OAAO,qBAAY,CAAC,CAAC,MAAM,EAAE,UAAU,EAAE,EAAE;QACzC,QAAQ,MAAM,CAAC,aAAa,EAAE;YAC5B,KAAK,qBAAc,CAAC,MAAM;gBACxB,MAAM,QAAQ,GAAG,MAA0B,CAAC;gBAC5C,MAAM,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;gBAEjC,OAAO,CAAC,IAAI,IAAI,sBAAa,CAAC,OAAO,CAAC,MAAM,IAAI,yBAAgB,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC;gBAEtG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBACnB,MAAM;YAER,KAAK,qBAAc,CAAC,KAAK;gBACvB,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,aAAa,EAAE;oBAChC,GAAG,EAAE,IAAI;iBACV,CAAC,CAAC;gBACH,MAAM;YAER;gBACE,MAAM,IAAI,+BAAwB,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;SACvD;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAtBD,kBAsBC","sourcesContent":["import {DecoratorTypes, UnsupportedDecoratorType} from \"@tsed/core\";\nimport {JsonEntityFn, OperationMethods, OperationPath} from \"@tsed/schema\";\nimport {HTTP_METHODS} from \"../../constants/index\";\nimport {EndpointMetadata} from \"../../models/EndpointMetadata\";\n\nfunction mapOptions(args: any[]) {\n  let method: string | undefined = undefined;\n  let path: string | RegExp | undefined = undefined;\n\n  const middlewares = args.filter((arg: any) => {\n    if (typeof arg === \"string\" && HTTP_METHODS.includes(arg)) {\n      method = arg;\n\n      return false;\n    }\n\n    if (typeof arg === \"string\" || arg instanceof RegExp) {\n      path = arg ? arg : \"/\";\n\n      return false;\n    }\n\n    return !!arg;\n  });\n\n  return {\n    path,\n    method,\n    middlewares\n  };\n}\n\n/**\n * Mounts the specified middleware function or functions at the specified path: the middleware function is executed when\n * the base of the requested path matches `path.\n *\n * ```typescript\n * @Controller('/')\n * @Use(Middleware1)\n * export class Ctrl {\n *\n *    @Get('/')\n *    @Use(Middleware2)\n *    get() { }\n * }\n *\n * ```\n *\n * @returns {Function}\n * @param args\n * @decorator\n * @operation\n */\nexport function Use(...args: any[]): Function {\n  return JsonEntityFn((entity, parameters) => {\n    switch (entity.decoratorType) {\n      case DecoratorTypes.METHOD:\n        const endpoint = entity as EndpointMetadata;\n        const options = mapOptions(args);\n\n        options.path && OperationPath(options.method || OperationMethods.CUSTOM, options.path)(...parameters);\n\n        endpoint.use(args);\n        break;\n\n      case DecoratorTypes.CLASS:\n        entity.store.merge(\"middlewares\", {\n          use: args\n        });\n        break;\n\n      default:\n        throw new UnsupportedDecoratorType(Use, parameters);\n    }\n  });\n}\n"]}