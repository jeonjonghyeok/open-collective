{"version":3,"file":"required.js","sourceRoot":"","sources":["../../../src/mvc/decorators/required.ts"],"names":[],"mappings":";;;AAAA,yCAAmC;AAEnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8CG;AACH,SAAgB,QAAQ,CAAC,GAAG,qBAA4B;IACtD,OAAO,cAAK,CAAC,GAAG,qBAAqB,CAAC,CAAC;AACzC,CAAC;AAFD,4BAEC","sourcesContent":["import {Allow} from \"@tsed/schema\";\n\n/**\n * Add required annotation for a function argument.\n *\n * The @Required decorator can be used on two cases.\n *\n * To decorate a parameters:\n *\n * ```typescript\n * @Post(\"/\")\n * async method(@Required() @BodyParams(\"field\") field: string) {}\n * ```\n *\n * To decorate a model:\n *\n * ```typescript\n * class Model {\n *   @Property()\n *   @Required()\n *   field: string;\n * }\n * ```\n *\n * > Required will throw a BadRequest when the given value is `null`, an empty string or `undefined`.\n *\n * ### Allow a values\n *\n * In some case, you didn't want trigger a BadRequest when the value is an empty string for example.\n * The decorator `@Allow()`, allow you to configure a value list for which there will be no exception.\n *\n * ```typescript\n * class Model {\n *   @Property()\n *   @Required()\n *   @Allow(\"\")\n *   field: string;\n * }\n * ```\n *\n * @returns {Function}\n * @decorator\n * @operation\n * @input\n * @schema\n * @validation\n * @deprecated Since v6. Use @Allow decorator from @tsed/schema instead of.\n * @ignore\n */\nexport function Required(...allowedRequiredValues: any[]): any {\n  return Allow(...allowedRequiredValues);\n}\n"]}