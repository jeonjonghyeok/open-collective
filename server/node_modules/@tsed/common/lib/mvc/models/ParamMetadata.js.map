{"version":3,"file":"ParamMetadata.js","sourceRoot":"","sources":["../../../src/mvc/models/ParamMetadata.ts"],"names":[],"mappings":";;;;AAAA,qCAAsF;AACtF,yCAAyG;AAezG,IAAa,aAAa,GAA1B,MAAa,aAAc,SAAQ,wBAAe;IAehD,YAAY,OAAgC;QAC1C,KAAK,CAAC,OAAO,CAAC,CAAC;QAHjB,UAAK,GAAkB,EAAE,CAAC;QAKxB,MAAM,EAAC,UAAU,EAAE,SAAS,EAAE,KAAK,EAAC,GAAG,OAAO,CAAC;QAE/C,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC;QAChD,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC;QAC7C,IAAI,CAAC,KAAK,GAAG,KAAK,IAAI,EAAE,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,IAAI,OAAO,CAAC,OAA4B;QACtC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC;IAC3B,CAAC;IAED,MAAM,CAAC,GAAG,CAAC,MAAiB,EAAE,WAA4B,EAAE,KAAa;QACvE,OAAO,wBAAe,CAAC,IAAI,CAAgB,kBAAW,CAAC,MAAM,CAAC,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;IACtF,CAAC;IAED,MAAM,CAAC,SAAS,CAAC,MAAiB,EAAE,WAA4B;QAC9D,MAAM,MAAM,GAAoB,EAAE,CAAC;QAEnC,MAAM,KAAK,GAAG,kBAAW,CAAC,MAAM,CAAC;aAC9B,OAAO,EAAE;aACT,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,wBAAe,CAAC,UAAU,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAEnF,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,EAAE,CAAC;SACX;QAED,wBAAe,CAAC,UAAU,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAoB,EAAE,KAAK,EAAE,EAAE;YAC9F,MAAM,CAAC,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IAChB,CAAC;CACF,CAAA;AAxDC;IADC,iBAAU,EAAE;;iDACa;AAK1B;IADC,iBAAU,EAAE;;gDACyB;AAGtC;IADC,iBAAU,EAAE;;4CACa;AAbf,aAAa;IADzB,4BAAmB,CAAC,qBAAc,CAAC,KAAK,CAAC;;GAC7B,aAAa,CA6DzB;AA7DY,sCAAa","sourcesContent":["import {ancestorsOf, DecoratorTypes, Enumerable, prototypeOf, Type} from \"@tsed/core\";\nimport {JsonEntityComponent, JsonEntityStore, JsonEntityStoreOptions, JsonParameter} from \"@tsed/schema\";\nimport {ParamTypes} from \"./ParamTypes\";\n\nexport interface ParamConstructorOptions extends JsonEntityStoreOptions {\n  expression?: string;\n  useType?: Type<any>;\n  paramType?: string | ParamTypes;\n  pipes?: Type<IPipe>[];\n}\n\nexport interface IPipe<T = any, R = any> {\n  transform(value: T, metadata: ParamMetadata): R;\n}\n\n@JsonEntityComponent(DecoratorTypes.PARAM)\nexport class ParamMetadata extends JsonEntityStore implements ParamConstructorOptions {\n  /**\n   *\n   */\n  @Enumerable()\n  public expression: string;\n  /**\n   *\n   */\n  @Enumerable()\n  public paramType: string | ParamTypes;\n\n  @Enumerable()\n  pipes: Type<IPipe>[] = [];\n\n  constructor(options: ParamConstructorOptions) {\n    super(options);\n\n    const {expression, paramType, pipes} = options;\n\n    this.expression = expression || this.expression;\n    this.paramType = paramType || this.paramType;\n    this.pipes = pipes || [];\n  }\n\n  /**\n   * Return the JsonOperation\n   */\n  get parameter(): JsonParameter {\n    return this._parameter;\n  }\n\n  get service(): string | ParamTypes {\n    return this.paramType;\n  }\n\n  set service(service: string | ParamTypes) {\n    this.paramType = service;\n  }\n\n  static get(target: Type<any>, propertyKey: string | symbol, index: number): ParamMetadata {\n    return JsonEntityStore.from<ParamMetadata>(prototypeOf(target), propertyKey, index);\n  }\n\n  static getParams(target: Type<any>, propertyKey: string | symbol): ParamMetadata[] {\n    const params: ParamMetadata[] = [];\n\n    const klass = ancestorsOf(target)\n      .reverse()\n      .find((target) => JsonEntityStore.fromMethod(target, propertyKey).children.size);\n\n    if (!klass) {\n      return [];\n    }\n\n    JsonEntityStore.fromMethod(klass, propertyKey).children.forEach((param: ParamMetadata, index) => {\n      params[+index] = param;\n    });\n\n    return params;\n  }\n}\n"]}