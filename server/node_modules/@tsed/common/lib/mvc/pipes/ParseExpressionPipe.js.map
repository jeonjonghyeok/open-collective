{"version":3,"file":"ParseExpressionPipe.js","sourceRoot":"","sources":["../../../src/mvc/pipes/ParseExpressionPipe.ts"],"names":[],"mappings":";;;;AAAA,qCAAoC;AACpC,iCAAoC;AAEpC,qDAAgD;AAKhD,IAAa,mBAAmB,GAAhC,MAAa,mBAAmB;IAC9B,SAAS,CAAC,KAAU,EAAE,KAAoB;QACxC,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,KAAK,CAAC;SACd;QAED,MAAM,EAAC,SAAS,EAAE,IAAI,EAAC,GAAG,KAAK,CAAC;QAChC,IAAI,EAAC,UAAU,EAAC,GAAG,KAAK,CAAC;QAEzB,IAAI,SAAS,KAAK,uBAAU,CAAC,MAAM,EAAE;YACnC,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,WAAW,EAAE,CAAC;SACrD;QAED,KAAK,GAAG,eAAQ,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;QAEpC,IAAI,CAAC,uBAAU,CAAC,KAAK,EAAE,uBAAU,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,SAAuB,CAAC,IAAI,KAAK,KAAK,EAAE,IAAI,IAAI,KAAK,MAAM,EAAE;YAC5G,OAAO,SAAS,CAAC;SAClB;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CACF,CAAA;AArBY,mBAAmB;IAH/B,eAAU,CAAC;QACV,QAAQ,EAAE,CAAC,CAAC;KACb,CAAC;GACW,mBAAmB,CAqB/B;AArBY,kDAAmB","sourcesContent":["import {getValue} from \"@tsed/core\";\nimport {Injectable} from \"@tsed/di\";\nimport {IPipe, ParamMetadata} from \"../models/ParamMetadata\";\nimport {ParamTypes} from \"../models/ParamTypes\";\n\n@Injectable({\n  priority: -1\n})\nexport class ParseExpressionPipe implements IPipe {\n  transform(value: any, param: ParamMetadata) {\n    if (!value) {\n      return value;\n    }\n\n    const {paramType, type} = param;\n    let {expression} = param;\n\n    if (paramType === ParamTypes.HEADER) {\n      expression = String(param.expression).toLowerCase();\n    }\n\n    value = getValue(value, expression);\n\n    if ([ParamTypes.QUERY, ParamTypes.PATH].includes(paramType as ParamTypes) && value === \"\" && type !== String) {\n      return undefined;\n    }\n\n    return value;\n  }\n}\n"]}