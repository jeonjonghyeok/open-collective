{"version":3,"file":"ExceptionSchema.js","sourceRoot":"","sources":["../../../src/platform-exceptions/domain/ExceptionSchema.ts"],"names":[],"mappings":";;AAAA,+CAA+C;AAC/C,iDAA2C;AAC3C,yCAAoF;AAEpF;;GAEG;AACH,MAAM,WAAW,GAAG,eAAM,CAAC;IACzB,IAAI,EAAE,eAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,gBAAgB,CAAC;IACvD,OAAO,EAAE,eAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,kBAAkB,CAAC;CAC7D,CAAC;KACC,KAAK,CAAC,cAAc,CAAC;KACrB,OAAO,EAAE,CAAC;AAEb,aAAI,CAAC,sBAAS,CAAC,CAAC,UAAU,CAAC;IACzB,IAAI,EAAE,eAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,gBAAgB,CAAC;IACvD,OAAO,EAAE,eAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,kBAAkB,CAAC;IAC5D,MAAM,EAAE,eAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,kCAAkC,CAAC;IAC3E,MAAM,EAAE,cAAK,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,WAAW,CAAC,0BAA0B,CAAC;IAC1E,KAAK,EAAE,cAAK,EAAE,CAAC,KAAK,CAAC,eAAM,EAAE,CAAC,CAAC,WAAW,CAAC,4CAA4C,CAAC;CACzF,CAAC,CAAC;AAEH,sCAAsC;AACtC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;IAC3C,IAAI,MAAM,KAAK,sBAAS,IAAI,MAAM,CAAC,MAAM,EAAE;QACzC,MAAM,QAAQ,GAAG,IAAI,MAAM,CAAC,SAAS,CAAC,CAAC;QACvC,aAAI,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC;YACtB,IAAI,EAAE,eAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,gBAAgB,CAAC;YACrG,MAAM,EAAE,eAAM,EAAE,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,kCAAkC,CAAC;SAC9H,CAAC,CAAC;QAEH,0BAAiB,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;KAC1C;AACH,CAAC,CAAC,CAAC","sourcesContent":["import * as Exceptions from \"@tsed/exceptions\";\nimport {Exception} from \"@tsed/exceptions\";\nimport {array, defineStatusModel, from, number, object, string} from \"@tsed/schema\";\n\n/**\n * @ignore\n */\nconst ErrorSchema = object({\n  name: string().required().description(\"The error name\"),\n  message: string().required().description(\"An error message\")\n})\n  .label(\"GenericError\")\n  .unknown();\n\nfrom(Exception).properties({\n  name: string().required().description(\"The error name\"),\n  message: string().required().description(\"An error message\"),\n  status: number().required().description(\"The status code of the exception\"),\n  errors: array().items(ErrorSchema).description(\"A list of related errors\"),\n  stack: array().items(string()).description(\"The stack trace (only in development mode)\")\n});\n\n// Auto load models for all Exceptions\nObject.values(Exceptions).forEach((target) => {\n  if (target !== Exception && target.STATUS) {\n    const instance = new target(\"message\");\n    from(target).properties({\n      name: string().required().example(instance.name).default(instance.name).description(\"The error name\"),\n      status: number().required().example(instance.status).default(instance.status).description(\"The status code of the exception\")\n    });\n\n    defineStatusModel(target.STATUS, target);\n  }\n});\n"]}