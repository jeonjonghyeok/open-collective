{"version":3,"file":"propertyName.js","sourceRoot":"","sources":["../../../src/jsonschema/decorators/propertyName.ts"],"names":[],"mappings":";;;AAAA,yCAAuC;AAEvC;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,SAAgB,IAAI,CAAC,IAAY;IAC/B,OAAO,aAAC,CAAC,IAAI,CAAQ,CAAC;AACxB,CAAC;AAFD,oBAEC","sourcesContent":["import {Name as N} from \"@tsed/schema\";\n\n/**\n * Create an alias of the propertyKey that must be used by the converter.\n *\n * ::: tip\n * This decorator is used by the Converters to deserialize correctly you model.\n * :::\n *\n * ## Example\n *\n * ```typescript\n * class Model {\n *    @Name(String)\n *    property: string[];\n * }\n * ```\n *\n * @param {string} name\n * @returns {Function}\n * @decorator\n * @jsonMapper\n * @schema\n * @property\n * @ignore\n * @deprecated Since v6. Use @Name decorator from @tsed/schema instead of.\n */\nexport function Name(name: string): PropertyDecorator {\n  return N(name) as any;\n}\n"]}