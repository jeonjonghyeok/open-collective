{"version":3,"file":"enum.js","sourceRoot":"","sources":["../../../src/jsonschema/decorators/enum.ts"],"names":[],"mappings":";;;AAAA,yCAAuC;AAGvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiGG;AACH,SAAgB,IAAI,CAAC,SAAgC,EAAE,GAAG,UAA6B;IACrF,OAAO,aAAC,CAAC,SAAS,EAAE,GAAG,UAAU,CAAC,CAAC;AACrC,CAAC;AAFD,oBAEC","sourcesContent":["import {Enum as E} from \"@tsed/schema\";\nimport {JSONSchema6Type} from \"json-schema\";\n\n/**\n * The enum keyword is used to restrict a value to a fixed set of values.\n * It must be an array with at least one element, where each element is unique.\n *\n * Elements in the array might be of any value, including null.\n *\n * ::: warning\n * This decorator will be removed in v7.\n * For v6 user, use @@Enum@@ from @tsed/schema instead of @tsed/common.\n * :::\n *\n * ## Example\n * ### With primitive type\n *\n * ```typescript\n * class Model {\n *    @Enum(\"value1\", \"value2\")\n *    property: \"value1\" | \"value2\";\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"string\",\n *       \"enum\": [\"value1\", \"value2\"]\n *     }\n *   }\n * }\n * ```\n *\n * ### With array type\n *\n * ```typescript\n * class Model {\n *    @Enum(\"value1\", \"value2\")\n *    property: (\"value1\" | \"value2\")[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *          \"type\": \"string\",\n *          \"enum\": [\"value1\", \"value2\"]\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * ### With Typescript Enum\n *\n * ```typescript\n * enum SomeEnum {\n *    ENUM_1 = \"enum1\",\n *    ENUM_2 = \"enum2\"\n * }\n *\n * class Model {\n *    @Enum(SomeEnum)\n *    property: SomeEnum;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *        \"type\": \"string\",\n *        \"enum\": [\"enum1\", \"enum2\"]\n *     }\n *   }\n * }\n * ```\n *\n * @param {string | number | boolean | {}} enumValue\n * @param enumValues\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @ignore\n * @deprecated Since v6. Use @Enum decorator from @tsed/schema instead of.\n */\nexport function Enum(enumValue: JSONSchema6Type | any, ...enumValues: JSONSchema6Type[]) {\n  return E(enumValue, ...enumValues);\n}\n"]}