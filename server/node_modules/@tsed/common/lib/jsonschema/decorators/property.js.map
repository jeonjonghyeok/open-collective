{"version":3,"file":"property.js","sourceRoot":"","sources":["../../../src/jsonschema/decorators/property.ts"],"names":[],"mappings":";;;;AACA,yCAA2C;AAiG3C;;;GAGG;AACH,SAAgB,QAAQ,CAAC,IAAyB;IAChD,OAAO,iBAAC,CAAC,IAAI,CAAC,CAAC;AACjB,CAAC;AAFD,4BAEC;AAED,uDAA6B","sourcesContent":["import {Type} from \"@tsed/core\";\nimport {Property as P} from \"@tsed/schema\";\n\n/**\n * `@Property()` let you decorate an attribute that can be serialized or deserialized. By default, no parameters are required to use it.\n * But in some cases, we need to configure explicitly the JSON attribute name mapped to the provide attribute.\n *\n * Here an example of different use cases with `@Property()`:\n *\n * ```typescript\n * class EventModel {\n *\n *    @Property()\n *    name: string;\n *\n *    @Property()\n *    @Format('date-time')\n *    startDate: Date;\n *\n *    @Name('end-date')\n *    @Format('date-time')\n *    endDate: Date;\n *\n *    @CollectionOf(Task)\n *    tasks: TaskModel[];\n * }\n *\n * class TaskModel {\n *     @Property()\n *     subject: string;\n *\n *     @Minimum(0)  // Property or Property is not required when a JsonSchema decorator is used\n *     @Maximum(100)\n *     rate: number;\n * }\n *\n * > Theses ES6 collections can be used: Map and Set. Map will be serialized as an object and Set as an array.\n * By default Date, Array, Map and Set have a default custom Converter already embed. But you can override theses (see next part).\n *\n * For the Array, you must use the @@CollectionOf@@ decorator.\n * `TypeClass` will be used to deserialize each item in the collection stored on the attribute source.\n *\n * According to the previous example, the JsonSchema generated will be as follow:\n *\n * ```typescript\n * {\n *    \"type\": \"object\",\n *    \"properties\": {\n *       \"name\": {\n *          \"type\": \"string\"\n *       },\n *       \"startDate\": {\n *          \"type\": \"string\",\n *          \"format\": \"date-time\"\n *       },\n *       \"endDate\": {\n *          \"type\": \"string\",\n *          \"format\": \"date-time\"\n *       },\n *       \"tasks\": {\n *          \"type\": \"array\",\n *          \"items\": {\n *             \"$ref\": \"#/definitions/Task\"\n *          }\n *       }\n *    },\n *    \"definitions\": {\n *      \"Task\": {\n *        \"type\": \"object\",\n *        \"properties\": {\n *          \"subject\": {\n *             \"type\": \"string\",\n *          },\n *          \"rate\": {\n *             \"type\": \"number\"\n *             \"minimum\": 0,\n *             \"maximum: 100\n *          }\n *        }\n *      }\n *    }\n * }\n * ```\n *\n * @returns {Function}\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @ignore\n * @deprecated Since v6. Use @Property() from @tsed/schema\n */\nexport function Property(type?: Type<any>): PropertyDecorator;\n/**\n * @ignore\n * @deprecated Since v6. Use @Property() from @tsed/schema\n */\nexport function Property(generic: string): PropertyDecorator;\n/**\n * @ignore\n * @deprecated Since v6. Use @Property() from @tsed/schema\n */\nexport function Property(type?: string | Type<any>): Function {\n  return P(type);\n}\n\nexport * from \"./propertyFn\";\n"]}