{"version":3,"file":"email.js","sourceRoot":"","sources":["../../../src/jsonschema/decorators/email.ts"],"names":[],"mappings":";;;AAAA,yCAAwC;AAExC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkEG;AACH,SAAgB,KAAK;IACnB,OAAO,cAAC,EAAE,CAAC;AACb,CAAC;AAFD,sBAEC","sourcesContent":["import {Email as E} from \"@tsed/schema\";\n\n/**\n * Apply an email validation on property.\n *\n * ::: warning\n * This decorator will be removed in v7.\n * For v6 user, use @@Format@@ from @tsed/schema instead of @tsed/common.\n * :::\n *\n * ## Example\n * ### With primitive type\n *\n * ```typescript\n * class Model {\n *    @Email()\n *    property: string;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"string\",\n *       \"format\": \"email\"\n *     }\n *   }\n * }\n * ```\n *\n * ### With array type\n *\n * ```typescript\n * class Model {\n *    @Email()\n *    @CollectionOf(String)\n *    property: string[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *          \"type\": \"string\",\n *          \"format\": \"email\"\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * > See [Format](api/common/jsonschema/schema) decorator.\n * @returns {Function}\n * @decorator\n * @validation\n * @property\n * @ignore\n * @deprecated Since v6. Use @Email decorator from @tsed/schema instead of.\n */\nexport function Email() {\n  return E();\n}\n"]}