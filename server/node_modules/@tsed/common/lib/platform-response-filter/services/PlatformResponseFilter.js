"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlatformResponseFilter = exports.getContentType = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@tsed/core");
const di_1 = require("@tsed/di");
const ResponseFiltersContainer_1 = require("../domain/ResponseFiltersContainer");
const ANY_CONTENT_TYPE = "*/*";
/**
 * @ignore
 */
function getContentType(data, ctx) {
    const { endpoint, response } = ctx;
    const { operation } = endpoint;
    const contentType = operation.getContentTypeOf(response.statusCode) || "";
    if (contentType && contentType !== ANY_CONTENT_TYPE) {
        if (contentType === "application/json") {
            if (core_1.isObject(data)) {
                return contentType;
            }
        }
        else {
            return contentType;
        }
    }
    if (typeof data === "string" && endpoint.view) {
        return "text/html";
    }
}
exports.getContentType = getContentType;
/**
 * @platform
 */
let PlatformResponseFilter = class PlatformResponseFilter {
    constructor() {
        this.types = new Map();
    }
    get contentTypes() {
        return [...this.types.keys()];
    }
    $onInit() {
        ResponseFiltersContainer_1.ResponseFiltersContainer.forEach((token, type) => {
            if (this.responseFilters.includes(token)) {
                this.types.set(type, this.injector.get(token));
            }
        });
    }
    getBestContentType(data, ctx) {
        const contentType = getContentType(data, ctx);
        if (ctx.request.get("Accept")) {
            const bestContentType = ctx.request.accepts([contentType].concat(this.contentTypes).filter(Boolean));
            if (bestContentType) {
                return [].concat(bestContentType)[0];
            }
        }
        return contentType;
    }
    transform(data, ctx) {
        const { response } = ctx;
        const bestContentType = this.getBestContentType(data, ctx);
        bestContentType && response.contentType(bestContentType);
        if (this.types.has(bestContentType)) {
            return this.types.get(bestContentType).transform(data, ctx);
        }
        if (this.types.has(ANY_CONTENT_TYPE)) {
            return this.types.get(ANY_CONTENT_TYPE).transform(data, ctx);
        }
        return data;
    }
};
tslib_1.__decorate([
    di_1.Inject(),
    tslib_1.__metadata("design:type", di_1.InjectorService)
], PlatformResponseFilter.prototype, "injector", void 0);
tslib_1.__decorate([
    di_1.Constant("responseFilters", []),
    tslib_1.__metadata("design:type", Array)
], PlatformResponseFilter.prototype, "responseFilters", void 0);
PlatformResponseFilter = tslib_1.__decorate([
    di_1.Injectable()
], PlatformResponseFilter);
exports.PlatformResponseFilter = PlatformResponseFilter;
//# sourceMappingURL=PlatformResponseFilter.js.map