{"version":3,"file":"PlatformResponseFilter.js","sourceRoot":"","sources":["../../../src/platform-response-filter/services/PlatformResponseFilter.ts"],"names":[],"mappings":"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","sourcesContent":["import {isObject, Type} from \"@tsed/core\";\nimport {Constant, Inject, Injectable, InjectorService} from \"@tsed/di\";\nimport {PlatformContext} from \"../../platform/domain/PlatformContext\";\nimport {ResponseFilterKey, ResponseFiltersContainer} from \"../domain/ResponseFiltersContainer\";\nimport {ResponseFilterMethods} from \"../interfaces/ResponseFilterMethods\";\n\nconst ANY_CONTENT_TYPE = \"*/*\";\n\n/**\n * @ignore\n */\nexport function getContentType(data: any, ctx: PlatformContext) {\n  const {endpoint, response} = ctx;\n  const {operation} = endpoint;\n\n  const contentType = operation.getContentTypeOf(response.statusCode) || \"\";\n\n  if (contentType && contentType !== ANY_CONTENT_TYPE) {\n    if (contentType === \"application/json\") {\n      if (isObject(data)) {\n        return contentType;\n      }\n    } else {\n      return contentType;\n    }\n  }\n\n  if (typeof data === \"string\" && endpoint.view) {\n    return \"text/html\";\n  }\n}\n\n/**\n * @platform\n */\n@Injectable()\nexport class PlatformResponseFilter {\n  types: Map<ResponseFilterKey, ResponseFilterMethods> = new Map();\n\n  @Inject()\n  injector: InjectorService;\n\n  @Constant(\"responseFilters\", [])\n  protected responseFilters: Type<ResponseFilterMethods>[];\n\n  get contentTypes(): ResponseFilterKey[] {\n    return [...this.types.keys()];\n  }\n\n  $onInit() {\n    ResponseFiltersContainer.forEach((token, type) => {\n      if (this.responseFilters.includes(token)) {\n        this.types.set(type, this.injector.get(token)!);\n      }\n    });\n  }\n\n  getBestContentType(data: any, ctx: PlatformContext) {\n    const contentType = getContentType(data, ctx);\n\n    if (ctx.request.get(\"Accept\")) {\n      const bestContentType = ctx.request.accepts([contentType].concat(this.contentTypes).filter(Boolean));\n\n      if (bestContentType) {\n        return [].concat(bestContentType as any)[0];\n      }\n    }\n\n    return contentType;\n  }\n\n  transform(data: unknown, ctx: PlatformContext) {\n    const {response} = ctx;\n    const bestContentType = this.getBestContentType(data, ctx);\n\n    bestContentType && response.contentType(bestContentType);\n\n    if (this.types.has(bestContentType)) {\n      return this.types.get(bestContentType)!.transform(data, ctx);\n    }\n\n    if (this.types.has(ANY_CONTENT_TYPE)) {\n      return this.types.get(ANY_CONTENT_TYPE)!.transform(data, ctx);\n    }\n\n    return data;\n  }\n}\n"]}