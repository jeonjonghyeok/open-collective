{"version":3,"file":"PlatformApplication.js","sourceRoot":"","sources":["../../../src/platform/services/PlatformApplication.ts"],"names":[],"mappings":";;;;;AAAA,iCAAmD;AACnD,0DAAqD;AACrD,mDAAoD;AACpD,uDAAkD;AAClD,qDAAgD;AAShD;;;;GAIG;AAIH,IAAa,mBAAmB,2BAAhC,MAAa,mBAAkE,SAAQ,+BAAsB;IAK3G,YAAY,eAAgC;QAC1C,KAAK,CAAC,eAAe,CAAC,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,GAAG,qBAAmB,CAAC,YAAY,EAAS,CAAC;IACrE,CAAC;IAES,MAAM,CAAC,YAAY;QAC3B,OAAO,mCAAmB,EAAE,CAAC;IAC/B,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC;IAED,UAAU;QACR,aAAa;QACb,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,KAAK,EAAE,GAAQ,EAAE,GAAQ,EAAE,IAAS,EAAE,EAAE;YACxD,MAAM,6BAAa,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAC7C,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACd,CAAC;CACF,CAAA;AA3BY,mBAAmB;IAH/B,eAAU,CAAC;QACV,KAAK,EAAE,kBAAa,CAAC,SAAS;KAC/B,CAAC;6CAM6B,iCAAe;GALjC,mBAAmB,CA2B/B;AA3BY,kDAAmB","sourcesContent":["import {Injectable, ProviderScope} from \"@tsed/di\";\nimport {createContext} from \"../utils/createContext\";\nimport {createFakeRawDriver} from \"./FakeRawDriver\";\nimport {PlatformHandler} from \"./PlatformHandler\";\nimport {PlatformRouter} from \"./PlatformRouter\";\n\ndeclare global {\n  namespace TsED {\n    // @ts-ignore\n    export interface Application {}\n  }\n}\n\n/**\n * `PlatformApplication` is used to provide all routes collected by annotation `@Controller`.\n *\n * @platform\n */\n@Injectable({\n  scope: ProviderScope.SINGLETON\n})\nexport class PlatformApplication<App = TsED.Application, Router = TsED.Router> extends PlatformRouter<Router> {\n  raw: App;\n  rawApp: App;\n  rawRouter: Router;\n\n  constructor(platformHandler: PlatformHandler) {\n    super(platformHandler);\n    this.rawApp = this.raw = PlatformApplication.createRawApp() as any;\n  }\n\n  protected static createRawApp(): any {\n    return createFakeRawDriver();\n  }\n\n  getApp(): App {\n    return this.raw;\n  }\n\n  useContext(): this {\n    // @ts-ignore\n    this.getApp().use(async (req: any, res: any, next: any) => {\n      await createContext(this.injector, req, res);\n      next();\n    });\n\n    return this;\n  }\n}\n"]}