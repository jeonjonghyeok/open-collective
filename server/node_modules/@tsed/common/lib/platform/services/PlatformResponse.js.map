{"version":3,"file":"PlatformResponse.js","sourceRoot":"","sources":["../../../src/platform/services/PlatformResponse.ts"],"names":[],"mappings":";;;;;AAAA,qCAAmE;AACnE,iCAA2G;AAE3G,mDAA8C;AAE9C,MAAM,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AAW1C;;;GAGG;AAGH,IAAa,gBAAgB,wBAA7B,MAAa,gBAAgB;IAI3B,YAAyB,GAAM;QAAN,QAAG,GAAH,GAAG,CAAG;IAAG,CAAC;IAEnC;;OAEG;IACH,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACH,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,MAAM,CAAC,QAAyB,EAAE,GAAQ;QAC/C,MAAM,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;QACzB,MAAM,CAAC,GAAG,CAAC,qBAAgB,EAAE,GAAG,CAAC,CAAC;QAElC,OAAO,QAAQ,CAAC,MAAM,CAAmB,kBAAgB,EAAE,MAAM,CAAC,CAAC;IACrE,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,GAAQ,EAAE,EAAY;QACtC,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,WAAW;QACT,OAAO,IAAI,CAAC,GAAU,CAAC;IACzB,CAAC;IAED;;OAEG;IACH,MAAM;QACJ,OAAO,IAAI,CAAC,GAAU,CAAC;IACzB,CAAC;IAED,SAAS;QACP,OAAO,IAAI,CAAC,UAAU,KAAK,GAAG,CAAC;IACjC,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,MAAc;QACnB,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAExB,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;;;;;OAUG;IACH,UAAU,CAAC,OAA6B;QACtC,gBAAgB;QAChB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;YAC9C,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACd,CAAC;IAED,SAAS,CAAC,GAAW,EAAE,IAAS;QAC9B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QAEhC,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;;;;;;OAWG;IACH,WAAW,CAAC,WAAmB;QAC7B,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QAElC,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;OAMG;IACH,QAAQ,CAAC,MAAc,EAAE,GAAW;QAClC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QAE/B,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACH,QAAQ,CAAC,QAAgB;QACvB,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAE5B,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,IAA0B;QAC/B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEpB,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,MAAM,CAAC,IAAY,EAAE,UAAe,EAAE;QAC1C,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,EAAE;YACrC,GAAG,IAAI,CAAC,MAAM;YACd,GAAG,OAAO;SACX,CAAC,CAAC;IACL,CAAC;IAED;;;;;;;OAOG;IACH,IAAI,CAAC,IAAS;QACZ,IAAI,IAAI,KAAK,SAAS,EAAE;YACtB,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;YAEhB,OAAO,IAAI,CAAC;SACb;QAED,IAAI,eAAQ,CAAC,IAAI,CAAC,EAAE;YAClB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAElB,OAAO,IAAI,CAAC;SACb;QAED,IAAI,gBAAS,CAAC,IAAI,CAAC,IAAI,eAAQ,CAAC,IAAI,CAAC,IAAI,eAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,KAAK,IAAI,EAAE;YACxE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEpB,OAAO,IAAI,CAAC;SACb;QAED,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEpB,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,EAAY;QAChB,kBAAgB,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC;QAE/C,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;YACb,OAAO,IAAI,CAAC;SACb;QAED,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QAE1B,OAAO,OAAO,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,GAAG,CAAC,aAAa,IAAI,GAAG,CAAC,gBAAgB,CAAC,CAAC;IACpF,CAAC;IAED,OAAO;QACL,aAAa;QACb,OAAO,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC;IAED,aAAa;QACX,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,WAAW,CAAC;IACnC,CAAC;CACF,CAAA;AAzNC;IADC,WAAM,EAAE;sCACM,6BAAa;uDAAC;AAFlB,gBAAgB;IAF5B,eAAU,EAAE;IACZ,UAAK,CAAC,kBAAa,CAAC,QAAQ,CAAC;IAKf,mBAAA,SAAI,CAAA;;GAJN,gBAAgB,CA2N5B;AA3NY,4CAAgB","sourcesContent":["import {isBoolean, isNumber, isStream, isString} from \"@tsed/core\";\nimport {DI_PARAM_OPTIONS, Inject, Injectable, InjectorService, Opts, ProviderScope, Scope} from \"@tsed/di\";\nimport {ServerResponse} from \"http\";\nimport {PlatformViews} from \"./PlatformViews\";\n\nconst onFinished = require(\"on-finished\");\n\ndeclare global {\n  namespace TsED {\n    // @ts-ignore\n    export interface Response {\n      // req: any;\n    }\n  }\n}\n\n/**\n * Platform Response abstraction layer.\n * @platform\n */\n@Injectable()\n@Scope(ProviderScope.INSTANCE)\nexport class PlatformResponse<T extends {[key: string]: any} = any> {\n  @Inject()\n  platformViews: PlatformViews;\n\n  constructor(@Opts public raw: T) {}\n\n  /**\n   * Get the current statusCode\n   */\n  get statusCode() {\n    return this.raw.statusCode;\n  }\n\n  /**\n   * An object that contains response local variables scoped to the request, and therefore available only to the view(s) rendered during that request / response cycle (if any). Otherwise, this property is identical to app.locals.\n   *\n   * This property is useful for exposing request-level information such as the request path name, authenticated user, user settings, and so on.\n   */\n  get locals() {\n    return this.raw.locals;\n  }\n\n  /**\n   * Create a new instance of PlatformResponse\n   * @param injector\n   * @param res\n   */\n  static create(injector: InjectorService, res: any) {\n    const locals = new Map();\n    locals.set(DI_PARAM_OPTIONS, res);\n\n    return injector.invoke<PlatformResponse>(PlatformResponse, locals);\n  }\n\n  static onFinished(res: any, cb: Function) {\n    onFinished(res, cb);\n  }\n\n  /**\n   * Return the Framework response object (express, koa, etc...)\n   */\n  getResponse<Res = T>(): Res {\n    return this.raw as any;\n  }\n\n  /**\n   * Return the Node.js response object\n   */\n  getRes(): ServerResponse {\n    return this.raw as any;\n  }\n\n  hasStatus() {\n    return this.statusCode !== 200;\n  }\n\n  /**\n   * Sets the HTTP status for the response.\n   *\n   * @param status\n   */\n  status(status: number) {\n    this.raw.status(status);\n\n    return this;\n  }\n\n  /**\n   * Set header `field` to `val`, or pass\n   * an object of header fields.\n   *\n   * Examples:\n   * ```typescript\n   * response.setHeaders({ Accept: 'text/plain', 'X-API-Key': 'tobi' });\n   * ```\n   *\n   * Aliased as `res.header()`.\n   */\n  setHeaders(headers: {[key: string]: any}) {\n    // apply headers\n    Object.entries(headers).forEach(([key, item]) => {\n      this.setHeader(key, item);\n    });\n\n    return this;\n  }\n\n  setHeader(key: string, item: any) {\n    this.raw.set(key, String(item));\n\n    return this;\n  }\n\n  /**\n   * Set `Content-Type` response header with `type` through `mime.lookup()`\n   * when it does not contain \"/\", or set the Content-Type to `type` otherwise.\n   *\n   * Examples:\n   *\n   *     res.type('.html');\n   *     res.type('html');\n   *     res.type('json');\n   *     res.type('application/json');\n   *     res.type('png');\n   */\n  contentType(contentType: string) {\n    this.raw.contentType(contentType);\n\n    return this;\n  }\n\n  /**\n   * Redirects to the URL derived from the specified path, with specified status, a positive integer that corresponds to an [HTTP status code](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).\n   * If not specified, status defaults to `302 Found`.\n   *\n   * @param status\n   * @param url\n   */\n  redirect(status: number, url: string) {\n    this.raw.redirect(status, url);\n\n    return this;\n  }\n\n  /**\n   * Sets the response Location HTTP header to the specified path parameter.\n   *\n   * @param location\n   */\n  location(location: string) {\n    this.raw.location(location);\n\n    return this;\n  }\n\n  /**\n   * Stream the given data.\n   *\n   * @param data\n   */\n  stream(data: ReadableStream | any) {\n    data.pipe(this.raw);\n\n    return this;\n  }\n\n  /**\n   * Renders a view and sends the rendered HTML string to the client.\n   *\n   * @param path\n   * @param options\n   */\n  async render(path: string, options: any = {}) {\n    return this.platformViews.render(path, {\n      ...this.locals,\n      ...options\n    });\n  }\n\n  /**\n   * Send any data to your consumer.\n   *\n   * This method accept a ReadableStream, a plain object, boolean, string, number, null and undefined data.\n   * It choose the better way to send the data.\n   *\n   * @param data\n   */\n  body(data: any) {\n    if (data === undefined) {\n      this.raw.send();\n\n      return this;\n    }\n\n    if (isStream(data)) {\n      this.stream(data);\n\n      return this;\n    }\n\n    if (isBoolean(data) || isNumber(data) || isString(data) || data === null) {\n      this.raw.send(data);\n\n      return this;\n    }\n\n    this.raw.json(data);\n\n    return this;\n  }\n\n  /**\n   * Add a listener to handler the end of the request/response.\n   * @param cb\n   */\n  onEnd(cb: Function): this {\n    PlatformResponse.onFinished(this.getRes(), cb);\n\n    return this;\n  }\n\n  isDone(): boolean {\n    if (!this.raw) {\n      return true;\n    }\n\n    const res = this.getRes();\n\n    return Boolean(this.isHeadersSent() || res.writableEnded || res.writableFinished);\n  }\n\n  destroy() {\n    // @ts-ignore\n    delete this.raw;\n  }\n\n  isHeadersSent() {\n    return this.getRes().headersSent;\n  }\n}\n"]}