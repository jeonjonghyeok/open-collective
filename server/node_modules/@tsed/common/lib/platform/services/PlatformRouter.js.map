{"version":3,"file":"PlatformRouter.js","sourceRoot":"","sources":["../../../src/platform/services/PlatformRouter.ts"],"names":[],"mappings":"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","sourcesContent":["import {Inject, Injectable, InjectorService, ProviderScope} from \"@tsed/di\";\nimport {promisify} from \"util\";\nimport {PlatformMulter, PlatformMulterSettings, PlatformStaticsOptions} from \"../../config\";\nimport {PathParamsType} from \"../../mvc/interfaces/PathParamsType\";\nimport {PlatformRouteOptions, PlatformRouteWithoutHandlers} from \"../interfaces/PlatformRouterMethods\";\nimport {createFakeRawDriver} from \"./FakeRawDriver\";\nimport {PlatformHandler} from \"./PlatformHandler\";\n\n/**\n * @ignore\n */\nexport const PLATFORM_ROUTER_OPTIONS = Symbol.for(\"PlatformRouterOptions\");\n\ndeclare global {\n  namespace TsED {\n    // @ts-ignore\n    export interface Router {}\n  }\n}\n\n/**\n * Platform Router abstraction layer.\n * @platform\n */\n@Injectable({\n  scope: ProviderScope.INSTANCE\n})\nexport class PlatformRouter<Router = TsED.Router> {\n  rawRouter: Router;\n  raw: any;\n\n  @Inject()\n  injector: InjectorService;\n\n  constructor(protected platformHandler: PlatformHandler) {\n    this.rawRouter = this.raw = PlatformRouter.createRawRouter();\n  }\n\n  /**\n   * Create a new instance of PlatformRouter\n   * @param injector\n   * @param routerOptions\n   */\n  static create(injector: InjectorService, routerOptions: any = {}) {\n    const locals = new Map();\n    locals.set(PLATFORM_ROUTER_OPTIONS, routerOptions);\n\n    return injector.invoke<PlatformRouter>(PlatformRouter, locals);\n  }\n\n  protected static createRawRouter(): any {\n    return createFakeRawDriver();\n  }\n\n  callback(): any {\n    return this.raw;\n  }\n\n  getRouter(): Router {\n    return this.rawRouter;\n  }\n\n  use(...handlers: any[]) {\n    // @ts-ignore\n    this.getRouter().use(...this.mapHandlers(handlers));\n\n    return this;\n  }\n\n  addRoute(options: PlatformRouteOptions) {\n    const {method, path, handlers, isFinal} = options;\n    // @ts-ignore\n    this.getRouter()[method](path, ...this.mapHandlers(handlers, {method, path, isFinal}));\n\n    return this;\n  }\n\n  all(path: PathParamsType, ...handlers: any[]) {\n    return this.addRoute({method: \"all\", path, handlers, isFinal: true});\n  }\n\n  get(path: PathParamsType, ...handlers: any[]) {\n    return this.addRoute({method: \"get\", path, handlers, isFinal: true});\n  }\n\n  post(path: PathParamsType, ...handlers: any[]) {\n    return this.addRoute({method: \"post\", path, handlers, isFinal: true});\n  }\n\n  put(path: PathParamsType, ...handlers: any[]) {\n    return this.addRoute({method: \"put\", path, handlers, isFinal: true});\n  }\n\n  delete(path: PathParamsType, ...handlers: any[]) {\n    return this.addRoute({method: \"delete\", path, handlers, isFinal: true});\n  }\n\n  patch(path: PathParamsType, ...handlers: any[]) {\n    return this.addRoute({method: \"patch\", path, handlers, isFinal: true});\n  }\n\n  head(path: PathParamsType, ...handlers: any[]) {\n    return this.addRoute({method: \"head\", path, handlers, isFinal: true});\n  }\n\n  options(path: PathParamsType, ...handlers: any[]) {\n    return this.addRoute({method: \"options\", path, handlers, isFinal: true});\n  }\n\n  statics(path: string, options: PlatformStaticsOptions): this {\n    return this;\n  }\n\n  multer(options: PlatformMulterSettings): PlatformMulter {\n    const m = require(\"multer\")(options);\n\n    const makePromise = (multer: any, name: string) => {\n      // istanbul ignore next\n      if (!multer[name]) return;\n\n      const fn = multer[name];\n\n      multer[name] = function apply(...args: any[]) {\n        const middleware = Reflect.apply(fn, this, args);\n\n        return (req: any, res: any) => promisify(middleware)(req, res);\n      };\n    };\n\n    makePromise(m, \"any\");\n    makePromise(m, \"array\");\n    makePromise(m, \"fields\");\n    makePromise(m, \"none\");\n    makePromise(m, \"single\");\n\n    return m;\n  }\n\n  protected mapHandlers(handlers: any[], options: PlatformRouteWithoutHandlers = {}): any[] {\n    return handlers.reduce((list, handler, index) => {\n      if (typeof handler === \"string\") {\n        return list.concat(handler);\n      }\n\n      if (handler instanceof PlatformRouter) {\n        return list.concat(handler.callback());\n      }\n\n      return list.concat(\n        this.platformHandler.createHandler(handler, {\n          ...options,\n          isFinal: options.isFinal ? index === handlers.length - 1 : false\n        })\n      );\n    }, []);\n  }\n}\n"]}