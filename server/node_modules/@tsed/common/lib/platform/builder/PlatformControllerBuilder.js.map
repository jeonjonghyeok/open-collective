{"version":3,"file":"PlatformControllerBuilder.js","sourceRoot":"","sources":["../../../src/platform/builder/PlatformControllerBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import {Type} from \"@tsed/core\";\nimport {InjectorService} from \"@tsed/di\";\nimport {JsonMethodPath, OperationMethods} from \"@tsed/schema\";\nimport {EndpointMetadata} from \"../../mvc/models/EndpointMetadata\";\nimport {ControllerProvider} from \"../domain/ControllerProvider\";\nimport {PlatformRouterMethods} from \"../interfaces/PlatformRouterMethods\";\nimport {bindEndpointMiddleware} from \"../middlewares/bindEndpointMiddleware\";\nimport {PlatformRouter} from \"../services/PlatformRouter\";\nimport {useCtxHandler} from \"../utils/useCtxHandler\";\n\n/**\n * @ignore\n */\nfunction formatMethod(method: string | undefined) {\n  return (method === OperationMethods.CUSTOM ? \"use\" : method || \"use\").toLowerCase();\n}\n\n/**\n * @ignore\n */\nexport class PlatformControllerBuilder {\n  constructor(private provider: ControllerProvider) {}\n\n  /**\n   *\n   * @returns {any}\n   */\n  public build(injector: InjectorService): PlatformRouterMethods {\n    const {\n      routerOptions,\n      middlewares: {useBefore, useAfter}\n    } = this.provider;\n\n    this.provider.setRouter(PlatformRouter.create(injector, routerOptions));\n\n    // Controller lifecycle\n    this.buildMiddlewares(useBefore) // Controller before-middleware\n      .buildEndpoints() // All endpoints and his middlewares\n      .buildMiddlewares(useAfter) // Controller after-middleware\n      .buildChildrenCtrls(injector); // Children controllers\n\n    return this.provider.getRouter();\n  }\n\n  private buildEndpoints() {\n    const {endpoints} = this.provider;\n    const operationPaths: Map<string, JsonMethodPath> = new Map();\n    const getKey = (method: string, path: any) => `${method}-${path}`;\n\n    const updateFinalRouteState = (key: string) => {\n      if (operationPaths.has(key)) {\n        operationPaths.get(key)!.isFinal = false;\n      }\n    };\n\n    const setFinalRoute = (key: string, operationPath: JsonMethodPath) => {\n      operationPaths.set(key, operationPath);\n      operationPath.isFinal = true;\n    };\n\n    endpoints.forEach(({operation}) => {\n      operation?.operationPaths.forEach((operationPath) => {\n        if (operationPath.method !== OperationMethods.CUSTOM) {\n          const key = getKey(operationPath.method, operationPath.path);\n          updateFinalRouteState(key);\n          updateFinalRouteState(getKey(OperationMethods.ALL, operationPath.path));\n\n          setFinalRoute(key, operationPath);\n        }\n      });\n    });\n\n    endpoints.forEach((endpoint) => {\n      this.buildEndpoint(endpoint);\n    });\n\n    return this;\n  }\n\n  private buildEndpoint(endpoint: EndpointMetadata) {\n    const {beforeMiddlewares, middlewares: mldwrs, afterMiddlewares, operation} = endpoint;\n    const {\n      middlewares: {use}\n    } = this.provider;\n\n    const router = this.provider.getRouter<PlatformRouter>();\n    // Endpoint lifecycle\n    let handlers: any[] = [];\n\n    handlers = handlers\n      .concat(useCtxHandler(bindEndpointMiddleware(endpoint)))\n      .concat(use) // Controller use-middlewares\n      .concat(beforeMiddlewares) // Endpoint before-middlewares\n      .concat(mldwrs) // Endpoint middlewares\n      .concat(endpoint) // Endpoint metadata\n      .concat(afterMiddlewares) // Endpoint after-middlewares\n      .filter((item: any) => !!item);\n\n    // Add handlers to the router\n    operation?.operationPaths.forEach(({path, method, isFinal}) => {\n      router.addRoute({\n        method: formatMethod(method),\n        path,\n        handlers,\n        isFinal\n      });\n    });\n\n    if (!operation?.operationPaths.size) {\n      router.use(...handlers);\n    }\n  }\n\n  private buildChildrenCtrls(injector: InjectorService) {\n    const {children} = this.provider;\n    const router = this.provider.getRouter<PlatformRouter>();\n\n    children.forEach((child: Type<any>) => {\n      const provider = injector.getProvider(child) as ControllerProvider;\n\n      /* istanbul ignore next */\n      if (!provider) {\n        throw new Error(\"Controller component not found in the ControllerRegistry\");\n      }\n\n      new PlatformControllerBuilder(provider).build(injector);\n\n      router.use(provider.path, provider.getRouter<PlatformRouter>());\n    });\n  }\n\n  private buildMiddlewares(middlewares: any[]) {\n    const router = this.provider.getRouter<PlatformRouter>();\n\n    middlewares\n      .filter((o) => typeof o === \"function\")\n      .forEach((middleware: any) => {\n        router.use(middleware);\n      });\n\n    return this;\n  }\n}\n"]}