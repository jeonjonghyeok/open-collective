{"version":3,"file":"PlatformContext.js","sourceRoot":"","sources":["../../../src/platform/domain/PlatformContext.ts"],"names":[],"mappings":"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","sourcesContent":["import {InjectorService, LocalsContainer} from \"@tsed/di\";\nimport {IncomingMessage, ServerResponse} from \"http\";\nimport {EndpointMetadata} from \"../../mvc/models/EndpointMetadata\";\nimport {PlatformApplication} from \"../services/PlatformApplication\";\nimport {PlatformRequest} from \"../services/PlatformRequest\";\nimport {PlatformResponse} from \"../services/PlatformResponse\";\nimport {RequestLogger, RequestLoggerOptions} from \"./RequestLogger\";\n\nexport interface RequestContextOptions extends Omit<RequestLoggerOptions, \"dateStart\"> {\n  id: string;\n  logger: any;\n  injector?: InjectorService;\n  response?: PlatformResponse;\n  request?: PlatformRequest;\n  endpoint?: EndpointMetadata;\n}\n\nexport class PlatformContext extends Map<any, any> {\n  /**\n   * Request id generated by @@contextMiddleware@@.\n   *\n   * ::: tip\n   * By default Ts.ED generate uuid like that `uuidv4().replace(/-/gi, \"\"))`.\n   * Dash are removed to simplify tracking logs in Kibana\n   * :::\n   *\n   * ::: tip\n   * Request id can by customized by changing the server configuration.\n   *\n   * ```typescript\n   * @Configuration({\n   *   logger: {\n   *     reqIdBuilder: createUniqId // give your own id generator function\n   *   }\n   * })\n   * class Server {\n   *\n   * }\n   * ```\n   * :::\n   *\n   */\n  readonly id: string;\n  /**\n   * Date when request have been handled by the server. @@RequestLogger@@ use this date to log request duration.\n   */\n  readonly dateStart: Date = new Date();\n  /**\n   * The request container used by the Ts.ED DI. It contain all services annotated with `@Scope(ProviderScope.REQUEST)`\n   */\n  public container = new LocalsContainer<any>();\n  /**\n   * The current @@EndpointMetadata@@ resolved by Ts.ED during the request.\n   */\n  public endpoint: EndpointMetadata;\n  /**\n   * The data return by the previous endpoint if you use multiple handler on the same route. By default data is empty.\n   */\n  public data: any;\n  /**\n   * Logger attached to the context request.\n   */\n  public logger: RequestLogger;\n  /**\n   * The current @@PlatformResponse@@.\n   */\n  public response: PlatformResponse;\n  /**\n   * The current @@PlatformRequest@@.\n   */\n  public request: PlatformRequest;\n  /**\n   *\n   */\n  public injector: InjectorService;\n\n  constructor({id, injector, logger, response, request, endpoint, ...options}: RequestContextOptions) {\n    super();\n    this.id = id;\n\n    injector && (this.injector = injector);\n    response && (this.response = response);\n    request && (this.request = request);\n    endpoint && (this.endpoint = endpoint);\n\n    this.logger = new RequestLogger(logger, {\n      ...options,\n      id,\n      dateStart: this.dateStart\n    });\n\n    if (this.response) {\n      this.container.set(PlatformResponse, this.response);\n    }\n\n    if (this.response) {\n      this.container.set(PlatformRequest, this.request);\n    }\n  }\n\n  get env() {\n    return this.injector.settings.env;\n  }\n\n  get app() {\n    return this.injector.get<PlatformApplication>(PlatformApplication)!;\n  }\n\n  async destroy() {\n    await this.container.destroy();\n    this.logger.destroy();\n    this.response.destroy();\n    this.request.destroy();\n    // @ts-ignore\n    delete this.container;\n    // @ts-ignore\n    delete this.logger;\n    // @ts-ignore\n    delete this.injector;\n    // @ts-ignore\n    delete this.endpoint;\n    // @ts-ignore\n    delete this.response;\n    // @ts-ignore\n    delete this.request;\n  }\n\n  isDone() {\n    return !this.request || !this.response;\n  }\n\n  async emit(eventName: string, ...args: any[]) {\n    return this.injector && this.injector.emit(eventName, ...args);\n  }\n\n  /**\n   * Return the framework request instance (Express, Koa, etc...)\n   */\n  getRequest<Req = any>(): Req {\n    return this.request.getRequest<Req>();\n  }\n\n  /**\n   * Return the framework response instance (Express, Koa, etc...)\n   */\n  getResponse<Res = any>(): Res {\n    return this.response.getResponse<Res>();\n  }\n\n  /**\n   * Get Node.js request\n   */\n  getReq(): IncomingMessage {\n    return this.request.getReq();\n  }\n\n  /**\n   * Get Node.js response\n   */\n  getRes(): ServerResponse {\n    return this.response.getRes();\n  }\n\n  /**\n   * Return the original application instance.\n   */\n  getApp<T = any>(): T {\n    return this.injector.get<PlatformApplication>(PlatformApplication)?.getApp() as any;\n  }\n}\n"]}