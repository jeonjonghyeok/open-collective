"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultipartFile = void 0;
const core_1 = require("@tsed/core");
const schema_1 = require("@tsed/schema");
const decorators_1 = require("../../../mvc/decorators");
const ParamTypes_1 = require("../../../mvc/models/ParamTypes");
const PlatformMulterMiddleware_1 = require("../../middlewares/PlatformMulterMiddleware");
function mapOptions(name, maxCount) {
    return {
        fields: [
            {
                name,
                maxCount
            }
        ]
    };
}
/**
 * Define a parameter as Multipart file.
 *
 * ```typescript
 * import {Controller, Post} from "@tsed/common";
 * import {MulterOptions, MultipartFile} from "@tsed/common";
 * import {Multer} from "@types/multer";
 *
 * type MulterFile = Express.Multer.File;
 *
 * @Controller('/')
 * class MyCtrl {
 *   @Post('/file')
 *   private uploadFile(@MultipartFile("file1") file: MulterFile) {
 *
 *   }
 *
 *   @Post('/file')
 *   @MulterOptions({dest: "/other-dir"})
 *   private uploadFile(@MultipartFile("file1") file: MulterFile) {
 *
 *   }
 *
 *   @Post('/file2')
 *   @MulterOptions({dest: "/other-dir"})
 *   private uploadFile(@MultipartFile("file1") file: MulterFile, @MultipartFile("file2") file2: MulterFile) {
 *
 *   }
 *
 *   @Post('/files')
 *   private uploadFile(@MultipartFile("file1") files: MulterFile[]) {
 *
 *   }
 * }
 * ```
 *
 * > See the tutorial on the [multer configuration](/tutorials/multer.md).
 *
 * @param name
 * @param maxCount
 * @returns Function
 * @decorator
 * @input
 */
function MultipartFile(name, maxCount) {
    return (...args) => {
        const [target, propertyKey, index] = args;
        const store = core_1.Store.fromMethod(target, String(propertyKey));
        const multiple = core_1.Metadata.getParamTypes(target, propertyKey)[index] === Array;
        const added = store.has("multipartAdded");
        name = (typeof name === "object" ? undefined : name);
        const expression = [name, !multiple && "0"].filter(Boolean).join(".");
        const decorators = core_1.useDecorators(core_1.useMethodDecorators(schema_1.Returns(400).Description(`<File too long | Too many parts | Too many files | Field name too long | Field value too long | Too many fields | Unexpected field>  [fieldName] Example: File too long file1`), schema_1.Consumes("multipart/form-data"), core_1.StoreSet("multipartAdded", true), !added && decorators_1.Use(PlatformMulterMiddleware_1.PlatformMulterMiddleware), core_1.StoreMerge(PlatformMulterMiddleware_1.PlatformMulterMiddleware, mapOptions(name, maxCount))), decorators_1.Req({ expression, useValidation: true }), decorators_1.UseParamType(ParamTypes_1.ParamTypes.FILES));
        decorators(...args);
    };
}
exports.MultipartFile = MultipartFile;
//# sourceMappingURL=multipartFile.js.map