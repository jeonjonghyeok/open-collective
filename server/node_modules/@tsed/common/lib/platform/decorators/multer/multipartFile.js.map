{"version":3,"file":"multipartFile.js","sourceRoot":"","sources":["../../../../src/platform/decorators/multer/multipartFile.ts"],"names":[],"mappings":";;;AAAA,qCAA0H;AAC1H,yCAA+C;AAE/C,wDAA+D;AAC/D,+DAA0D;AAC1D,yFAAwG;AAExG,SAAS,UAAU,CAAC,IAAY,EAAE,QAA4B;IAC5D,OAAO;QACL,MAAM,EAAE;YACN;gBACE,IAAI;gBACJ,QAAQ;aACT;SACF;KACF,CAAC;AACJ,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CG;AACH,SAAgB,aAAa,CAAC,IAAY,EAAE,QAAiB;IAC3D,OAAO,CAAC,GAAG,IAAyB,EAAQ,EAAE;QAC5C,MAAM,CAAC,MAAM,EAAE,WAAW,EAAE,KAAK,CAAC,GAAG,IAAI,CAAC;QAC1C,MAAM,KAAK,GAAG,YAAK,CAAC,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;QAC5D,MAAM,QAAQ,GAAG,eAAQ,CAAC,aAAa,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,KAAe,CAAC,KAAK,KAAK,CAAC;QACxF,MAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAE1C,IAAI,GAAG,CAAC,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAE,CAAC;QAEtD,MAAM,UAAU,GAAG,CAAC,IAAI,EAAE,CAAC,QAAQ,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEtE,MAAM,UAAU,GAAG,oBAAa,CAC9B,0BAAmB,CACjB,gBAAO,CAAC,GAAG,CAAC,CAAC,WAAW,CACtB,+KAA+K,CAChL,EACD,iBAAQ,CAAC,qBAAqB,CAAC,EAC/B,eAAQ,CAAC,gBAAgB,EAAE,IAAI,CAAC,EAChC,CAAC,KAAK,IAAI,gBAAG,CAAC,mDAAwB,CAAC,EACvC,iBAAU,CAAC,mDAAwB,EAAE,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CACjE,EACD,gBAAG,CAAC,EAAC,UAAU,EAAE,aAAa,EAAE,IAAI,EAAC,CAAC,EACtC,yBAAY,CAAC,uBAAU,CAAC,KAAK,CAAC,CAC/B,CAAC;QAEF,UAAU,CAAC,GAAG,IAAI,CAAC,CAAC;IACtB,CAAC,CAAC;AACJ,CAAC;AA3BD,sCA2BC","sourcesContent":["import {DecoratorParameters, Metadata, Store, StoreMerge, StoreSet, useDecorators, useMethodDecorators} from \"@tsed/core\";\nimport {Consumes, Returns} from \"@tsed/schema\";\nimport {PlatformMulterFile} from \"../../../config/interfaces/PlatformMulterSettings\";\nimport {Req, Use, UseParamType} from \"../../../mvc/decorators\";\nimport {ParamTypes} from \"../../../mvc/models/ParamTypes\";\nimport {MulterInputOptions, PlatformMulterMiddleware} from \"../../middlewares/PlatformMulterMiddleware\";\n\nfunction mapOptions(name: string, maxCount: number | undefined): MulterInputOptions {\n  return {\n    fields: [\n      {\n        name,\n        maxCount\n      }\n    ]\n  };\n}\n\n/**\n * Define a parameter as Multipart file.\n *\n * ```typescript\n * import {Controller, Post} from \"@tsed/common\";\n * import {MulterOptions, MultipartFile} from \"@tsed/common\";\n * import {Multer} from \"@types/multer\";\n *\n * type MulterFile = Express.Multer.File;\n *\n * @Controller('/')\n * class MyCtrl {\n *   @Post('/file')\n *   private uploadFile(@MultipartFile(\"file1\") file: MulterFile) {\n *\n *   }\n *\n *   @Post('/file')\n *   @MulterOptions({dest: \"/other-dir\"})\n *   private uploadFile(@MultipartFile(\"file1\") file: MulterFile) {\n *\n *   }\n *\n *   @Post('/file2')\n *   @MulterOptions({dest: \"/other-dir\"})\n *   private uploadFile(@MultipartFile(\"file1\") file: MulterFile, @MultipartFile(\"file2\") file2: MulterFile) {\n *\n *   }\n *\n *   @Post('/files')\n *   private uploadFile(@MultipartFile(\"file1\") files: MulterFile[]) {\n *\n *   }\n * }\n * ```\n *\n * > See the tutorial on the [multer configuration](/tutorials/multer.md).\n *\n * @param name\n * @param maxCount\n * @returns Function\n * @decorator\n * @input\n */\nexport function MultipartFile(name: string, maxCount?: number): ParameterDecorator {\n  return (...args: DecoratorParameters): void => {\n    const [target, propertyKey, index] = args;\n    const store = Store.fromMethod(target, String(propertyKey));\n    const multiple = Metadata.getParamTypes(target, propertyKey)[index as number] === Array;\n    const added = store.has(\"multipartAdded\");\n\n    name = (typeof name === \"object\" ? undefined : name)!;\n\n    const expression = [name, !multiple && \"0\"].filter(Boolean).join(\".\");\n\n    const decorators = useDecorators(\n      useMethodDecorators(\n        Returns(400).Description(\n          `<File too long | Too many parts | Too many files | Field name too long | Field value too long | Too many fields | Unexpected field>  [fieldName] Example: File too long file1`\n        ),\n        Consumes(\"multipart/form-data\"),\n        StoreSet(\"multipartAdded\", true),\n        !added && Use(PlatformMulterMiddleware),\n        StoreMerge(PlatformMulterMiddleware, mapOptions(name, maxCount))\n      ),\n      Req({expression, useValidation: true}),\n      UseParamType(ParamTypes.FILES)\n    );\n\n    decorators(...args);\n  };\n}\n\nexport type MultipartFile = PlatformMulterFile;\n"]}