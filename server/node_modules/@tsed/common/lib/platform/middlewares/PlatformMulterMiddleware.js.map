{"version":3,"file":"PlatformMulterMiddleware.js","sourceRoot":"","sources":["../../../src/platform/middlewares/PlatformMulterMiddleware.ts"],"names":[],"mappings":";;;;;AAAA,iCAA0C;AAC1C,iDAA2C;AAE3C,sEAAiE;AAEjE,mDAA8C;AAC9C,yEAAoE;AAMpE;;GAEG;AAEH,IAAa,wBAAwB,gCAArC,MAAa,wBAAwB;IAOnC,KAAK,CAAC,GAAG,CAAY,GAAY;QAC/B,IAAI;YACF,MAAM,IAAI,GAAG,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,0BAAwB,CAAC,CAAC;YACxD,MAAM,QAAQ,GAA2B,EAAC,GAAG,IAAI,CAAC,QAAQ,EAAC,CAAC;YAE5D,0BAA0B;YAC1B,IAAI,QAAQ,CAAC,OAAO,EAAE;gBACpB,OAAO,QAAQ,CAAC,IAAI,CAAC;aACtB;YAED,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YAE1E,OAAO,MAAM,UAAU,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;SAC9D;QAAC,OAAO,EAAE,EAAE;YACX,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,sBAAS,CAAC,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,OAAO,IAAI,EAAE,CAAC,KAAK,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;SACvF;IACH,CAAC;IAES,SAAS,CAAC,IAAwB;QAC1C,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAC,IAAI,EAAE,QAAQ,EAAC,EAAE,EAAE,CAAC,CAAC,EAAC,IAAI,EAAE,QAAQ,EAAC,CAAC,CAAC,CAAC;IACnE,CAAC;CACF,CAAA;AA1BC;IADC,aAAQ,CAAC,QAAQ,EAAE,EAAE,CAAC;;0DACU;AAGjC;IADC,WAAM,EAAE;sCACJ,yCAAmB;qDAAC;AAEzB;IAAW,mBAAA,iBAAO,EAAE,CAAA;;;;mDAgBnB;AAvBU,wBAAwB;IADpC,uBAAU,EAAE;GACA,wBAAwB,CA4BpC;AA5BY,4DAAwB","sourcesContent":["import {Constant, Inject} from \"@tsed/di\";\nimport {Exception} from \"@tsed/exceptions\";\nimport {PlatformMulterField, PlatformMulterSettings} from \"../../config\";\nimport {Middleware} from \"../../mvc/decorators/class/middleware\";\nimport {IMiddleware} from \"../../mvc/interfaces/IMiddleware\";\nimport {Context} from \"../decorators/context\";\nimport {PlatformApplication} from \"../services/PlatformApplication\";\n\nexport interface MulterInputOptions {\n  fields: PlatformMulterField[];\n}\n\n/**\n * @middleware\n */\n@Middleware()\nexport class PlatformMulterMiddleware implements IMiddleware {\n  @Constant(\"multer\", {})\n  settings: PlatformMulterSettings;\n\n  @Inject()\n  app: PlatformApplication;\n\n  async use(@Context() ctx: Context) {\n    try {\n      const conf = ctx.endpoint.get(PlatformMulterMiddleware);\n      const settings: PlatformMulterSettings = {...this.settings};\n\n      /* istanbul ignore next */\n      if (settings.storage) {\n        delete settings.dest;\n      }\n\n      const middleware = this.app.multer(settings).fields(this.getFields(conf));\n\n      return await middleware(ctx.getRequest(), ctx.getResponse());\n    } catch (er) {\n      throw er.code ? new Exception(er.code, `${er.message} ${er.field || \"\"}`.trim()) : er;\n    }\n  }\n\n  protected getFields(conf: MulterInputOptions) {\n    return conf.fields.map(({name, maxCount}) => ({name, maxCount}));\n  }\n}\n"]}