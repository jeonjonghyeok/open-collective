{"version":3,"file":"PlatformMulterSettings.js","sourceRoot":"","sources":["../../../src/config/interfaces/PlatformMulterSettings.ts"],"names":[],"mappings":"","sourcesContent":["import {Readable} from \"stream\";\n\ndeclare global {\n  namespace TsED {\n    export interface MulterFile {\n      /** Name of the form field associated with this file. */\n      fieldname: string;\n      /** Name of the file on the uploader's computer. */\n      originalname: string;\n      /** Value of the `Content-Type` header for this file. */\n      mimetype: string;\n      /** Size of the file in bytes. */\n      size: number;\n      /**\n       * A readable stream of this file. Only available to the `_handleFile`\n       * callback for custom `StorageEngine`s.\n       */\n      stream: Readable;\n      /** `DiskStorage` only: Directory to which this file has been uploaded. */\n      destination: string;\n      /** `DiskStorage` only: Name of this file within `destination`. */\n      filename: string;\n      /** `DiskStorage` only: Full path to the uploaded file. */\n      path: string;\n      /** `MemoryStorage` only: A Buffer containing the entire file. */\n      buffer: Buffer;\n    }\n\n    export interface MulterStorageEngine {}\n\n    export interface MulterOptions {\n      /**\n       * A `StorageEngine` responsible for processing files uploaded via Multer.\n       * Takes precedence over `dest`.\n       */\n      storage?: MulterStorageEngine;\n      /**\n       * The destination directory for uploaded files. If `storage` is not set\n       * and `dest` is, Multer will create a `DiskStorage` instance configured\n       * to store files at `dest` with random filenames.\n       *\n       * Ignored if `storage` is set.\n       */\n      dest?: string;\n      /**\n       * An object specifying various limits on incoming data. This object is\n       * passed to Busboy directly, and the details of properties can be found\n       * at https://github.com/mscdex/busboy#busboy-methods.\n       */\n      limits?: {\n        /** Maximum size of each form field name in bytes. (Default: 100) */\n        fieldNameSize?: number;\n        /** Maximum size of each form field value in bytes. (Default: 1048576) */\n        fieldSize?: number;\n        /** Maximum number of non-file form fields. (Default: Infinity) */\n        fields?: number;\n        /** Maximum size of each file in bytes. (Default: Infinity) */\n        fileSize?: number;\n        /** Maximum number of file fields. (Default: Infinity) */\n        files?: number;\n        /** Maximum number of parts (non-file fields + files). (Default: Infinity) */\n        parts?: number;\n        /** Maximum number of headers. (Default: 2000) */\n        headerPairs?: number;\n      };\n      /** Preserve the full path of the original filename rather than the basename. (Default: false) */\n      preservePath?: boolean;\n    }\n\n    export interface MulterField {\n      name: string;\n      maxCount?: number;\n    }\n\n    export type MulterHandler = (req: any, res: any) => Promise<any>;\n\n    export interface Multer {\n      /**\n       * Returns middleware that processes a single file associated with the\n       * given form field.\n       *\n       * The `Request` object will be populated with a `file` object containing\n       * information about the processed file.\n       *\n       * @param fieldName Name of the multipart form field to process.\n       */\n      single(fieldName: string): MulterHandler;\n\n      /**\n       * Returns middleware that processes multiple files sharing the same field\n       * name.\n       *\n       * The `Request` object will be populated with a `files` array containing\n       * an information object for each processed file.\n       *\n       * @param fieldName Shared name of the multipart form fields to process.\n       * @param maxCount Optional. Maximum number of files to process. (default: Infinity)\n       * @throws `MulterError('LIMIT_UNEXPECTED_FILE')` if more than `maxCount` files are associated with `fieldName`\n       */\n      array(fieldName: string, maxCount?: number): MulterHandler;\n\n      /**\n       * Returns middleware that processes multiple files associated with the\n       * given form fields.\n       *\n       * The `Request` object will be populated with a `files` object which\n       * maps each field name to an array of the associated file information\n       * objects.\n       *\n       * @param fields Array of `Field` objects describing multipart form fields to process.\n       * @throws `MulterError('LIMIT_UNEXPECTED_FILE')` if more than `maxCount` files are associated with `fieldName` for any field.\n       */\n      fields(fields: MulterField[]): MulterHandler;\n\n      /**\n       * Returns middleware that processes all files contained in the multipart\n       * request.\n       *\n       * The `Request` object will be populated with a `files` array containing\n       * an information object for each processed file.\n       */\n      any(): MulterHandler;\n\n      /**\n       * Returns middleware that accepts only non-file multipart form fields.\n       *\n       * @throws `MulterError('LIMIT_UNEXPECTED_FILE')` if any file is encountered.\n       */\n      none(): MulterHandler;\n    }\n  }\n}\n\nexport type PlatformMulter = TsED.Multer;\nexport type PlatformMulterSettings = TsED.MulterOptions;\nexport type PlatformMulterFile = TsED.MulterFile;\nexport type PlatformMulterField = TsED.MulterField;\n"]}