{"version":3,"file":"PlatformTest.js","sourceRoot":"","sources":["../../../src/platform-test/components/PlatformTest.ts"],"names":[],"mappings":"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","sourcesContent":["import {Env, getValue, Type} from \"@tsed/core\";\nimport {DITestInvokeOptions, InjectorService, LocalsContainer, OnInit, TokenProvider} from \"@tsed/di\";\nimport {DITest} from \"@tsed/di\";\nimport {createInjector, loadInjector, PlatformBuilder, PlatformType} from \"../../platform-builder\";\nimport {PlatformContext, RequestContextOptions} from \"../../platform/domain/PlatformContext\";\nimport {PlatformApplication} from \"../../platform/services/PlatformApplication\";\nimport {PlatformRequest} from \"../../platform/services/PlatformRequest\";\nimport {PlatformResponse} from \"../../platform/services/PlatformResponse\";\n\n/**\n * @platform\n */\nexport class PlatformTest extends DITest {\n  public static platformBuilder: Type<PlatformBuilder>;\n\n  static async create(options: Partial<TsED.Configuration> = {}) {\n    DITest.injector = PlatformTest.createInjector(options);\n\n    await loadInjector(DITest.injector);\n  }\n\n  /**\n   * Create a new injector with the right default services\n   */\n  static createInjector(settings: any = {}): InjectorService {\n    return createInjector(DITest.configure(settings));\n  }\n\n  /**\n   * Load the server silently without listening port and configure it on test profile.\n   * @decorator\n   * @param mod\n   * @param options\n   * @returns {Promise<void>}\n   */\n  static bootstrap(mod: any, settings: Partial<TsED.Configuration> = {}): () => Promise<void> {\n    return async function before(): Promise<void> {\n      let instance: any;\n      const platform: PlatformType = settings.platform || PlatformTest.platformBuilder;\n\n      /* istanbul ignore next */\n      if (!platform) {\n        throw new Error(\n          \"Platform type is not specified. Have you added at least `import @tsed/platform-express` (or equivalent) on your Server.ts ?\"\n        );\n      }\n\n      // @ts-ignore\n      instance = await PlatformBuilder.build(platform).bootstrap(mod, DITest.configure(settings));\n\n      await instance.callHook(\"$beforeListen\");\n      await instance.callHook(\"$afterListen\");\n      await instance.ready();\n\n      // used by inject method\n      DITest.injector = instance.injector;\n    };\n  }\n\n  /**\n   * It injects services into the test function where you can alter, spy on, and manipulate them.\n   *\n   * The inject function has two parameters\n   *\n   * * an array of Service dependency injection tokens,\n   * * a test function whose parameters correspond exactly to each item in the injection token array.\n   *\n   * @param targets\n   * @param func\n   */\n  static inject<T>(targets: any[], func: (...args: any[]) => Promise<T> | T): () => Promise<T> {\n    return async (): Promise<T> => {\n      if (!DITest.hasInjector()) {\n        await PlatformTest.create();\n      }\n\n      const injector: InjectorService = DITest.injector;\n      const deps = [];\n\n      for (const target of targets) {\n        deps.push(injector.has(target) ? injector.get(target) : await injector.invoke(target));\n      }\n\n      return await func(...deps);\n    };\n  }\n\n  /**\n   * Return the raw application (express or koa).\n   * Use this callback with SuperTest.\n   *\n   * ```typescript\n   * let request: SuperTest.SuperTest<SuperTest.Test>;\n   * beforeEach(PlatformTest.bootstrap(Server, {\n   *   mount: {\n   *     \"/rest\": [ProductsController]\n   *   }\n   * }));\n   * beforeEach(() => {\n   *   request = SuperTest(PlatformTest.callback());\n   * });\n   * ```\n   */\n  static callback() {\n    return DITest.injector.get<PlatformApplication>(PlatformApplication)?.callback();\n  }\n\n  static createRequestContext(options: Partial<RequestContextOptions> = {}) {\n    options.request = options.request || new PlatformRequest({} as any);\n    options.response = options.response || new PlatformResponse({} as any);\n\n    return new PlatformContext({\n      id: \"id\",\n      injector: DITest.injector,\n      logger: DITest.injector.logger,\n      url: \"/\",\n      ...options\n    });\n  }\n}\n"]}