{"version":3,"file":"createHttpServer.js","sourceRoot":"","sources":["../../../src/platform-builder/utils/createHttpServer.ts"],"names":[],"mappings":";;;AAAA,iCAA0E;AAC1E,6BAA6B;AAC7B,6CAAmD;AACnD,yDAAoD;AACpD,iDAA4C;AAE5C,SAAgB,gBAAgB,CAAC,QAAyB;IACxD,QAAQ,CAAC,YAAY,CAAC,uBAAU,CAAC,CAAC;AACpC,CAAC;AAFD,4CAEC;AAED,qBAAgB,CAAC;IACf,OAAO,EAAE,uBAAU;IACnB,IAAI,EAAE,CAAC,8BAAmB,CAAC;IAC3B,KAAK,EAAE,kBAAa,CAAC,SAAS;IAC9B,MAAM,EAAE,IAAI;IACZ,UAAU,CAAC,mBAAwC;QACjD,OAAO,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC3D,CAAC;CACF,CAAC,CAAC;AAEI,KAAK,UAAU,gBAAgB,CAAC,QAAyB;IAC9D,MAAM,EAAC,QAAQ,EAAC,GAAG,QAAQ,CAAC;IAC5B,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAa,uBAAU,CAAC,CAAC;IAEpD,IAAI,QAAQ,CAAC,QAAQ,KAAK,KAAK,IAAI,MAAM,EAAE;QACzC,MAAM,EAAC,OAAO,EAAE,IAAI,EAAC,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;QAC/C,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,0BAA0B,OAAO,IAAI,IAAI,EAAE,CAAC,CAAC;QAEnE,MAAM,OAAO,GAAG,MAAM,2BAAY,CAAC,MAAM,EAAE,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC;QAC5D,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAE9B,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,2BAA2B,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;KACpF;AACH,CAAC;AAbD,4CAaC","sourcesContent":["import {InjectorService, ProviderScope, registerProvider} from \"@tsed/di\";\nimport * as Http from \"http\";\nimport {PlatformApplication} from \"../../platform\";\nimport {HttpServer} from \"../decorators/httpServer\";\nimport {listenServer} from \"./listenServer\";\n\nexport function createHttpServer(injector: InjectorService): void {\n  injector.forkProvider(HttpServer);\n}\n\nregisterProvider({\n  provide: HttpServer,\n  deps: [PlatformApplication],\n  scope: ProviderScope.SINGLETON,\n  global: true,\n  useFactory(platformApplication: PlatformApplication) {\n    return Http.createServer(platformApplication.callback());\n  }\n});\n\nexport async function listenHttpServer(injector: InjectorService) {\n  const {settings} = injector;\n  const server = injector.get<HttpServer>(HttpServer);\n\n  if (settings.httpPort !== false && server) {\n    const {address, port} = settings.getHttpPort();\n    injector.logger.debug(`Start server on http://${address}:${port}`);\n\n    const options = await listenServer(server, {address, port});\n    settings.setHttpPort(options);\n\n    injector.logger.info(`Listen server on http://${options.address}:${options.port}`);\n  }\n}\n"]}