{"version":3,"file":"callHook.js","sourceRoot":"","sources":["../../../src/platform-builder/utils/callHook.ts"],"names":[],"mappings":";;;AAEA,MAAM,UAAU,GAAG,CAAC,aAAa,EAAE,YAAY,EAAE,SAAS,EAAE,wBAAwB,CAAC,CAAC;AAE/E,KAAK,UAAU,QAAQ,CAAC,QAAyB,EAAE,UAAe,EAAE,GAAW,EAAE,GAAG,IAAW;IACpG,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,GAAG,UAAU,CAAC,CAAC;IAExD,IAAI,GAAG,IAAI,UAAU,EAAE;QACrB,MAAM,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;KAChC;IAED,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC7B,MAAM,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC1B;AACH,CAAC;AAVD,4BAUC","sourcesContent":["import {InjectorService} from \"@tsed/di\";\n\nconst SKIP_HOOKS = [\"$beforeInit\", \"$afterInit\", \"$onInit\", \"$onMountingMiddlewares\"];\n\nexport async function callHook(injector: InjectorService, rootModule: any, key: string, ...args: any[]) {\n  injector.logger.info(`\\x1B[1mCall hook ${key}\\x1B[22m`);\n\n  if (key in rootModule) {\n    await rootModule[key](...args);\n  }\n\n  if (!SKIP_HOOKS.includes(key)) {\n    await injector.emit(key);\n  }\n}\n"]}