{"version":3,"file":"createHttpsServer.js","sourceRoot":"","sources":["../../../src/platform-builder/utils/createHttpsServer.ts"],"names":[],"mappings":";;;AAAA,iCAAyF;AACzF,+BAA+B;AAC/B,6CAAmD;AACnD,2DAAsD;AACtD,iDAA4C;AAE5C,SAAgB,iBAAiB,CAAC,QAAyB;IACzD,QAAQ,CAAC,YAAY,CAAC,yBAAW,CAAC,CAAC;AACrC,CAAC;AAFD,8CAEC;AAED,qBAAgB,CAAC;IACf,OAAO,EAAE,yBAAW;IACpB,IAAI,EAAE,CAAC,8BAAmB,EAAE,kBAAa,CAAC;IAC1C,KAAK,EAAE,kBAAa,CAAC,SAAS;IAC9B,MAAM,EAAE,IAAI;IACZ,UAAU,CAAC,mBAAwC,EAAE,QAAuB;QAC1E,MAAM,OAAO,GAAG,QAAQ,CAAC,YAAa,CAAC;QAEvC,OAAO,KAAK,CAAC,YAAY,CAAC,OAAO,EAAE,mBAAmB,CAAC,QAAQ,EAAE,CAAC,CAAC;IACrE,CAAC;CACF,CAAC,CAAC;AAEI,KAAK,UAAU,iBAAiB,CAAC,QAAyB;IAC/D,MAAM,EAAC,QAAQ,EAAC,GAAG,QAAQ,CAAC;IAC5B,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAc,yBAAW,CAAC,CAAC;IAEtD,IAAI,QAAQ,CAAC,SAAS,KAAK,KAAK,IAAI,MAAM,EAAE;QAC1C,MAAM,EAAC,OAAO,EAAE,IAAI,EAAC,GAAG,QAAQ,CAAC,YAAY,EAAE,CAAC;QAChD,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,2BAA2B,OAAO,IAAI,IAAI,EAAE,CAAC,CAAC;QAEpE,MAAM,OAAO,GAAG,MAAM,2BAAY,CAAC,MAAM,EAAE,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC;QAC5D,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QAE/B,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,4BAA4B,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;KACrF;AACH,CAAC;AAbD,8CAaC","sourcesContent":["import {Configuration, InjectorService, ProviderScope, registerProvider} from \"@tsed/di\";\nimport * as Https from \"https\";\nimport {PlatformApplication} from \"../../platform\";\nimport {HttpsServer} from \"../decorators/httpsServer\";\nimport {listenServer} from \"./listenServer\";\n\nexport function createHttpsServer(injector: InjectorService): void {\n  injector.forkProvider(HttpsServer);\n}\n\nregisterProvider({\n  provide: HttpsServer,\n  deps: [PlatformApplication, Configuration],\n  scope: ProviderScope.SINGLETON,\n  global: true,\n  useFactory(platformApplication: PlatformApplication, settings: Configuration) {\n    const options = settings.httpsOptions!;\n\n    return Https.createServer(options, platformApplication.callback());\n  }\n});\n\nexport async function listenHttpsServer(injector: InjectorService) {\n  const {settings} = injector;\n  const server = injector.get<HttpsServer>(HttpsServer);\n\n  if (settings.httpsPort !== false && server) {\n    const {address, port} = settings.getHttpsPort();\n    injector.logger.debug(`Start server on https://${address}:${port}`);\n\n    const options = await listenServer(server, {address, port});\n    settings.setHttpsPort(options);\n\n    injector.logger.info(`Listen server on https://${options.address}:${options.port}`);\n  }\n}\n"]}