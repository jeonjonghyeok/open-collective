{"version":3,"file":"listenServer.js","sourceRoot":"","sources":["../../../src/platform-builder/utils/listenServer.ts"],"names":[],"mappings":";;;AAGA,SAAgB,YAAY,CAC1B,IAAgC,EAChC,QAAkD;IAElD,MAAM,EAAC,OAAO,EAAE,IAAI,EAAC,GAAG,QAAQ,CAAC;IAEjC,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC9C,IAAI,CAAC,EAAE,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;QAC9B,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;QACX,MAAM,IAAI,GAAI,IAAI,CAAC,OAAO,EAAU,CAAC,IAAI,CAAC;QAE1C,OAAO,EAAC,OAAO,EAAE,QAAQ,CAAC,OAAiB,EAAE,IAAI,EAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,OAAc,CAAC,CAAC;IAElC,OAAO,OAAO,CAAC;AACjB,CAAC;AAlBD,oCAkBC","sourcesContent":["import * as Http from \"http\";\nimport * as Https from \"https\";\n\nexport function listenServer(\n  http: Http.Server | Https.Server,\n  settings: {address: string | number; port: number}\n): Promise<{address: string; port: number}> {\n  const {address, port} = settings;\n\n  const promise = new Promise((resolve, reject) => {\n    http.on(\"listening\", resolve);\n    http.on(\"error\", reject);\n  }).then(() => {\n    const port = (http.address() as any).port;\n\n    return {address: settings.address as string, port};\n  });\n\n  http.listen(port, address as any);\n\n  return promise;\n}\n"]}