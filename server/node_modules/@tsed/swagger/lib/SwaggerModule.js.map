{"version":3,"file":"SwaggerModule.js","sourceRoot":"","sources":["../src/SwaggerModule.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BeforeRoutesInit,\n  Configuration,\n  Inject,\n  InjectorService,\n  Module,\n  OnReady,\n  PlatformApplication,\n  PlatformContext,\n  PlatformRouter,\n  useCtxHandler\n} from \"@tsed/common\";\nimport * as Fs from \"fs\";\nimport {join} from \"path\";\nimport {SwaggerSettings} from \"./interfaces\";\nimport {cssMiddleware} from \"./middlewares/cssMiddleware\";\nimport {indexMiddleware} from \"./middlewares/indexMiddleware\";\nimport {jsMiddleware} from \"./middlewares/jsMiddleware\";\nimport {redirectMiddleware} from \"./middlewares/redirectMiddleware\";\nimport {SwaggerService} from \"./services/SwaggerService\";\n\nconst swaggerUiPath = require(\"swagger-ui-dist\").absolutePath();\n\n/**\n * @ignore\n */\n@Module()\nexport class SwaggerModule implements BeforeRoutesInit, OnReady {\n  @Inject()\n  injector: InjectorService;\n\n  @Inject()\n  app: PlatformApplication;\n\n  @Configuration()\n  configuration: Configuration;\n\n  @Inject()\n  swaggerService: SwaggerService;\n\n  private loaded = false;\n\n  get settings() {\n    return ([] as SwaggerSettings[]).concat(this.configuration.get<SwaggerSettings[]>(\"swagger\")).filter((o) => !!o);\n  }\n\n  /**\n   *\n   */\n  $beforeRoutesInit() {\n    if (this.loaded) {\n      return;\n    }\n\n    const urls: any[] = this.getUrls();\n\n    this.settings.forEach((conf: SwaggerSettings) => {\n      const {path = \"/\"} = conf;\n\n      this.app.get(path, useCtxHandler(redirectMiddleware(path)));\n      this.app.use(path, this.createRouter(conf, urls));\n    });\n\n    this.loaded = true;\n  }\n\n  $onRoutesInit() {\n    this.settings.forEach((conf) => {\n      const {outFile} = conf;\n      const spec = this.swaggerService.getOpenAPISpec(conf);\n\n      if (outFile) {\n        Fs.writeFileSync(outFile, JSON.stringify(spec, null, 2));\n      }\n    });\n  }\n\n  $onReady() {\n    const {configuration, injector} = this;\n    const {httpsPort, httpPort} = configuration;\n\n    const displayLog = (host: any) => {\n      this.settings.forEach((conf) => {\n        const {path = \"/\", doc} = conf;\n        const url = typeof host.port === \"number\" ? `${host.protocol}://${host.address}:${host.port}` : \"\";\n\n        injector.logger.info(`[${doc || \"default\"}] Swagger JSON is available on ${url}${path}/swagger.json`);\n        injector.logger.info(`[${doc || \"default\"}] Swagger UI is available on ${url}${path}/`);\n      });\n    };\n\n    if (httpsPort) {\n      const host = configuration.getHttpsPort();\n      displayLog({protocol: \"https\", ...host});\n    } else if (httpPort) {\n      const host = configuration.getHttpPort();\n      displayLog({protocol: \"http\", ...host});\n    }\n  }\n\n  private getUrls() {\n    return this.settings.reduce((acc: any[], conf) => {\n      const {path = \"/\", fileName = \"swagger.json\", doc, hidden} = conf;\n      if (!hidden) {\n        acc.push({url: `${path}/${fileName}`, name: doc || path});\n      }\n\n      return acc;\n    }, []);\n  }\n\n  /**\n   *\n   * @param conf\n   * @param urls\n   */\n  private createRouter(conf: SwaggerSettings, urls: string[]) {\n    const {cssPath, jsPath, viewPath = join(__dirname, \"../views/index.ejs\")} = conf;\n    const router = PlatformRouter.create(this.injector);\n\n    router.get(\"/swagger.json\", useCtxHandler(this.middlewareSwaggerJson(conf)));\n\n    if (viewPath) {\n      if (cssPath) {\n        router.get(\"/main.css\", useCtxHandler(cssMiddleware(cssPath)));\n      }\n\n      if (jsPath) {\n        router.get(\"/main.js\", useCtxHandler(jsMiddleware(jsPath)));\n      }\n\n      router.get(\"/\", useCtxHandler(indexMiddleware(viewPath, {urls, ...conf})));\n      router.statics(\"/\", {root: swaggerUiPath});\n    }\n\n    return router;\n  }\n\n  private middlewareSwaggerJson(conf: SwaggerSettings) {\n    return (ctx: PlatformContext) => {\n      ctx.response.status(200).body(this.swaggerService.getOpenAPISpec(conf));\n    };\n  }\n}\n"]}