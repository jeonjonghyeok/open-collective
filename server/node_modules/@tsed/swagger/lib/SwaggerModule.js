"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwaggerModule = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@tsed/common");
const Fs = require("fs");
const path_1 = require("path");
const cssMiddleware_1 = require("./middlewares/cssMiddleware");
const indexMiddleware_1 = require("./middlewares/indexMiddleware");
const jsMiddleware_1 = require("./middlewares/jsMiddleware");
const redirectMiddleware_1 = require("./middlewares/redirectMiddleware");
const SwaggerService_1 = require("./services/SwaggerService");
const swaggerUiPath = require("swagger-ui-dist").absolutePath();
/**
 * @ignore
 */
let SwaggerModule = class SwaggerModule {
    constructor() {
        this.loaded = false;
    }
    get settings() {
        return [].concat(this.configuration.get("swagger")).filter((o) => !!o);
    }
    /**
     *
     */
    $beforeRoutesInit() {
        if (this.loaded) {
            return;
        }
        const urls = this.getUrls();
        this.settings.forEach((conf) => {
            const { path = "/" } = conf;
            this.app.get(path, common_1.useCtxHandler(redirectMiddleware_1.redirectMiddleware(path)));
            this.app.use(path, this.createRouter(conf, urls));
        });
        this.loaded = true;
    }
    $onRoutesInit() {
        this.settings.forEach((conf) => {
            const { outFile } = conf;
            const spec = this.swaggerService.getOpenAPISpec(conf);
            if (outFile) {
                Fs.writeFileSync(outFile, JSON.stringify(spec, null, 2));
            }
        });
    }
    $onReady() {
        const { configuration, injector } = this;
        const { httpsPort, httpPort } = configuration;
        const displayLog = (host) => {
            this.settings.forEach((conf) => {
                const { path = "/", doc } = conf;
                const url = typeof host.port === "number" ? `${host.protocol}://${host.address}:${host.port}` : "";
                injector.logger.info(`[${doc || "default"}] Swagger JSON is available on ${url}${path}/swagger.json`);
                injector.logger.info(`[${doc || "default"}] Swagger UI is available on ${url}${path}/`);
            });
        };
        if (httpsPort) {
            const host = configuration.getHttpsPort();
            displayLog({ protocol: "https", ...host });
        }
        else if (httpPort) {
            const host = configuration.getHttpPort();
            displayLog({ protocol: "http", ...host });
        }
    }
    getUrls() {
        return this.settings.reduce((acc, conf) => {
            const { path = "/", fileName = "swagger.json", doc, hidden } = conf;
            if (!hidden) {
                acc.push({ url: `${path}/${fileName}`, name: doc || path });
            }
            return acc;
        }, []);
    }
    /**
     *
     * @param conf
     * @param urls
     */
    createRouter(conf, urls) {
        const { cssPath, jsPath, viewPath = path_1.join(__dirname, "../views/index.ejs") } = conf;
        const router = common_1.PlatformRouter.create(this.injector);
        router.get("/swagger.json", common_1.useCtxHandler(this.middlewareSwaggerJson(conf)));
        if (viewPath) {
            if (cssPath) {
                router.get("/main.css", common_1.useCtxHandler(cssMiddleware_1.cssMiddleware(cssPath)));
            }
            if (jsPath) {
                router.get("/main.js", common_1.useCtxHandler(jsMiddleware_1.jsMiddleware(jsPath)));
            }
            router.get("/", common_1.useCtxHandler(indexMiddleware_1.indexMiddleware(viewPath, { urls, ...conf })));
            router.statics("/", { root: swaggerUiPath });
        }
        return router;
    }
    middlewareSwaggerJson(conf) {
        return (ctx) => {
            ctx.response.status(200).body(this.swaggerService.getOpenAPISpec(conf));
        };
    }
};
tslib_1.__decorate([
    common_1.Inject(),
    tslib_1.__metadata("design:type", common_1.InjectorService)
], SwaggerModule.prototype, "injector", void 0);
tslib_1.__decorate([
    common_1.Inject(),
    tslib_1.__metadata("design:type", common_1.PlatformApplication)
], SwaggerModule.prototype, "app", void 0);
tslib_1.__decorate([
    common_1.Configuration(),
    tslib_1.__metadata("design:type", Object)
], SwaggerModule.prototype, "configuration", void 0);
tslib_1.__decorate([
    common_1.Inject(),
    tslib_1.__metadata("design:type", SwaggerService_1.SwaggerService)
], SwaggerModule.prototype, "swaggerService", void 0);
SwaggerModule = tslib_1.__decorate([
    common_1.Module()
], SwaggerModule);
exports.SwaggerModule = SwaggerModule;
//# sourceMappingURL=SwaggerModule.js.map