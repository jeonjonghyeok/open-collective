{"version":3,"file":"SwaggerService.js","sourceRoot":"","sources":["../../src/services/SwaggerService.ts"],"names":[],"mappings":";;;;AAAA,yCAAsG;AACtG,qCAA8C;AAE9C,yCAAuE;AACvE,yBAAyB;AAEzB,sDAAyD;AACzD,sDAAiD;AAGjD,IAAa,cAAc,GAA3B,MAAa,cAAc;IACzB,YACU,eAAgC,EAChC,QAAkB,EACD,aAA4B;QAF7C,oBAAe,GAAf,eAAe,CAAiB;QAChC,aAAQ,GAAR,QAAQ,CAAU;QACD,kBAAa,GAAb,aAAa,CAAe;IACpD,CAAC;IASG,cAAc,CAAC,IAAqB;QACzC,MAAM,WAAW,GAAQ,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QACnD,MAAM,QAAQ,GAAG,iCAAmB,CAAC,WAAW,CAAC,CAAC;QAClD,MAAM,EAAC,GAAG,EAAC,GAAG,IAAI,CAAC;QACnB,MAAM,SAAS,GAAQ,EAAE,CAAC;QAE1B,MAAM,OAAO,GAA0B;YACrC,KAAK,EAAE,EAAE;YACT,IAAI,EAAE,EAAE;YACR,OAAO,EAAE,EAAE;YACX,QAAQ;YACR,oBAAoB,EAAE,IAAI,CAAC,oBAAoB;YAC/C,kBAAkB,EAAE,IAAI,CAAC,kBAAkB;YAC3C,MAAM,CAAC,IAAS;gBACd,kBAAS,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YAC7B,CAAC;SACF,CAAC;QAEF,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAC,QAAQ,EAAE,KAAK,EAAC,EAAE,EAAE;YACjD,MAAM,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAC5C,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;YAE9C,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;gBACxD,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;oBACtC,GAAG,OAAO;oBACV,QAAQ,EAAE,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC;iBAC3C,CAAC,CAAC;gBAEH,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;aACtB;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,kBAAS,CAAC,WAAW,EAAE,SAAS,CAAQ,CAAC;IAClD,CAAC;IAED;;OAEG;IACO,cAAc,CAAC,IAA8B;QACrD,MAAM,EAAC,OAAO,EAAE,WAAW,EAAC,GAAG,IAAI,CAAC,aAAa,CAAC;QAClD,MAAM,EAAC,QAAQ,EAAE,WAAW,EAAC,GAAG,IAAI,CAAC;QACrC,MAAM,QAAQ,GAAmC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAE7F,MAAM,SAAS,GAAG,yBAAW,CAAC,eAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,CAAC,EAAE;YACxD,QAAQ;YACR,OAAO;YACP,WAAW;YACX,WAAW;SACZ,CAAC,CAAC;QAEH,eAAQ,CAAC,SAAS,EAAE,YAAY,EAAE,eAAQ,CAAC,SAAS,EAAE,YAAY,EAAE,mBAAmB,CAAC,CAAC,CAAC;QAC1F,eAAQ,CAAC,SAAS,EAAE,cAAc,EAAE,eAAQ,CAAC,SAAS,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC;QAElF,OAAO,SAAS,CAAC;IACnB,CAAC;IAES,YAAY,CAAC,IAAY;QACjC,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACxC,IAAI,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;YACvB,MAAM,IAAI,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,EAAC,QAAQ,EAAE,MAAM,EAAC,CAAC,CAAC;YACvD,0BAA0B;YAC1B,IAAI,IAAI,KAAK,EAAE,EAAE;gBACf,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;aACzB;SACF;QAED,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;;;OAIG;IACO,WAAW,CAAC,IAAwB,EAAE,OAA8B;QAC5E,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;QAE9C,IAAI,CAAC,QAAQ;aACV,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;aACrD,OAAO,CAAC,CAAC,QAA4B,EAAE,EAAE;YACxC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;gBACjC,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;oBACtC,GAAG,OAAO;oBACV,QAAQ;iBACT,CAAC,CAAC;gBAEH,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;aACtB;QACH,CAAC,CAAC,CAAC;QAEL,OAAO,gBAAO,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACtC,CAAC;CACF,CAAA;AA1GY,cAAc;IAD1B,mBAAU,EAAE;IAKR,mBAAA,sBAAa,EAAE,CAAA;6CAFS,wBAAe;QACtB,iBAAQ;GAHjB,cAAc,CA0G1B;AA1GY,wCAAc","sourcesContent":["import {Configuration, ControllerProvider, Injectable, InjectorService, Platform} from \"@tsed/common\";\nimport {getValue, setValue} from \"@tsed/core\";\nimport {OpenSpec2, OpenSpec3} from \"@tsed/openspec\";\nimport {getSpec, mergeSpec, SpecSerializerOptions} from \"@tsed/schema\";\nimport * as Fs from \"fs\";\nimport {SwaggerOS2Settings, SwaggerOS3Settings, SwaggerSettings} from \"../interfaces/SwaggerSettings\";\nimport {getSpecTypeFromSpec} from \"../utils/getSpecType\";\nimport {mapOpenSpec} from \"../utils/mapOpenSpec\";\n\n@Injectable()\nexport class SwaggerService {\n  constructor(\n    private injectorService: InjectorService,\n    private platform: Platform,\n    @Configuration() private configuration: Configuration\n  ) {}\n\n  /**\n   * Generate Spec for the given configuration\n   * @returns {Spec}\n   */\n  public getOpenAPISpec(conf: SwaggerOS3Settings): OpenSpec3;\n  public getOpenAPISpec(conf: SwaggerOS2Settings): OpenSpec2;\n  public getOpenAPISpec(conf: SwaggerSettings): OpenSpec2;\n  public getOpenAPISpec(conf: SwaggerSettings) {\n    const defaultSpec: any = this.getDefaultSpec(conf);\n    const specType = getSpecTypeFromSpec(defaultSpec);\n    const {doc} = conf;\n    const finalSpec: any = {};\n\n    const options: SpecSerializerOptions = {\n      paths: {},\n      tags: [],\n      schemas: {},\n      specType,\n      operationIdFormatter: conf.operationIdFormatter,\n      operationIdPattern: conf.operationIdPattern,\n      append(spec: any) {\n        mergeSpec(finalSpec, spec);\n      }\n    };\n\n    this.platform.routes.forEach(({provider, route}) => {\n      const hidden = provider.store.get(\"hidden\");\n      const docs = provider.store.get(\"docs\") || [];\n\n      if ((!doc && !hidden) || (doc && docs.indexOf(doc) > -1)) {\n        const spec = this.buildRoutes(provider, {\n          ...options,\n          rootPath: route.replace(provider.path, \"\")\n        });\n\n        options.append(spec);\n      }\n    });\n\n    return mergeSpec(defaultSpec, finalSpec) as any;\n  }\n\n  /**\n   * Return the global api information.\n   */\n  protected getDefaultSpec(conf: Partial<SwaggerSettings>): Partial<OpenSpec2 | OpenSpec3> {\n    const {version, acceptMimes} = this.configuration;\n    const {specPath, specVersion} = conf;\n    const fileSpec: Partial<OpenSpec2 | OpenSpec3> = specPath ? this.readSpecPath(specPath) : {};\n\n    const finalSpec = mapOpenSpec(getValue(conf, \"spec\", {}), {\n      fileSpec,\n      version,\n      specVersion,\n      acceptMimes\n    });\n\n    setValue(finalSpec, \"info.title\", getValue(finalSpec, \"info.title\", \"Api documentation\"));\n    setValue(finalSpec, \"info.version\", getValue(finalSpec, \"info.version\", \"1.0.0\"));\n\n    return finalSpec;\n  }\n\n  protected readSpecPath(path: string) {\n    path = this.configuration.resolve(path);\n    if (Fs.existsSync(path)) {\n      const json = Fs.readFileSync(path, {encoding: \"utf8\"});\n      /* istanbul ignore else */\n      if (json !== \"\") {\n        return JSON.parse(json);\n      }\n    }\n\n    return {};\n  }\n\n  /**\n   *\n   * @param ctrl\n   * @param options\n   */\n  protected buildRoutes(ctrl: ControllerProvider, options: SpecSerializerOptions) {\n    const rootPath = options.rootPath + ctrl.path;\n\n    ctrl.children\n      .map((ctrl) => this.injectorService.getProvider(ctrl))\n      .forEach((provider: ControllerProvider) => {\n        if (!provider.store.get(\"hidden\")) {\n          const spec = this.buildRoutes(provider, {\n            ...options,\n            rootPath\n          });\n\n          options.append(spec);\n        }\n      });\n\n    return getSpec(ctrl.token, options);\n  }\n}\n"]}