"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwaggerService = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@tsed/common");
const core_1 = require("@tsed/core");
const schema_1 = require("@tsed/schema");
const Fs = require("fs");
const getSpecType_1 = require("../utils/getSpecType");
const mapOpenSpec_1 = require("../utils/mapOpenSpec");
let SwaggerService = class SwaggerService {
    constructor(injectorService, platform, configuration) {
        this.injectorService = injectorService;
        this.platform = platform;
        this.configuration = configuration;
    }
    getOpenAPISpec(conf) {
        const defaultSpec = this.getDefaultSpec(conf);
        const specType = getSpecType_1.getSpecTypeFromSpec(defaultSpec);
        const { doc } = conf;
        const finalSpec = {};
        const options = {
            paths: {},
            tags: [],
            schemas: {},
            specType,
            operationIdFormatter: conf.operationIdFormatter,
            operationIdPattern: conf.operationIdPattern,
            append(spec) {
                schema_1.mergeSpec(finalSpec, spec);
            }
        };
        this.platform.routes.forEach(({ provider, route }) => {
            const hidden = provider.store.get("hidden");
            const docs = provider.store.get("docs") || [];
            if ((!doc && !hidden) || (doc && docs.indexOf(doc) > -1)) {
                const spec = this.buildRoutes(provider, {
                    ...options,
                    rootPath: route.replace(provider.path, "")
                });
                options.append(spec);
            }
        });
        return schema_1.mergeSpec(defaultSpec, finalSpec);
    }
    /**
     * Return the global api information.
     */
    getDefaultSpec(conf) {
        const { version, acceptMimes } = this.configuration;
        const { specPath, specVersion } = conf;
        const fileSpec = specPath ? this.readSpecPath(specPath) : {};
        const finalSpec = mapOpenSpec_1.mapOpenSpec(core_1.getValue(conf, "spec", {}), {
            fileSpec,
            version,
            specVersion,
            acceptMimes
        });
        core_1.setValue(finalSpec, "info.title", core_1.getValue(finalSpec, "info.title", "Api documentation"));
        core_1.setValue(finalSpec, "info.version", core_1.getValue(finalSpec, "info.version", "1.0.0"));
        return finalSpec;
    }
    readSpecPath(path) {
        path = this.configuration.resolve(path);
        if (Fs.existsSync(path)) {
            const json = Fs.readFileSync(path, { encoding: "utf8" });
            /* istanbul ignore else */
            if (json !== "") {
                return JSON.parse(json);
            }
        }
        return {};
    }
    /**
     *
     * @param ctrl
     * @param options
     */
    buildRoutes(ctrl, options) {
        const rootPath = options.rootPath + ctrl.path;
        ctrl.children
            .map((ctrl) => this.injectorService.getProvider(ctrl))
            .forEach((provider) => {
            if (!provider.store.get("hidden")) {
                const spec = this.buildRoutes(provider, {
                    ...options,
                    rootPath
                });
                options.append(spec);
            }
        });
        return schema_1.getSpec(ctrl.token, options);
    }
};
SwaggerService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(2, common_1.Configuration()),
    tslib_1.__metadata("design:paramtypes", [common_1.InjectorService,
        common_1.Platform, Object])
], SwaggerService);
exports.SwaggerService = SwaggerService;
//# sourceMappingURL=SwaggerService.js.map