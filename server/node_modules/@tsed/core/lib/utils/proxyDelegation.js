"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.proxyDelegation = void 0;
/**
 * Create a complete and iterable trap.
 * @param self
 * @param options
 * @ignore
 */
function proxyDelegation(self, options = {}) {
    const { handlers = {}, remove, ownKeys } = options;
    const get = options.getter || ((target, propertyKey) => target.get(propertyKey));
    const set = options.setter || ((target, propertyKey, value) => !!target.set(propertyKey, value));
    const itsOwnProp = (target, p) => Reflect.has(target, p) || typeof p === "symbol";
    return new Proxy(self, {
        getOwnPropertyDescriptor(target, p) {
            return Reflect.getOwnPropertyDescriptor(target, p);
        },
        has(target, p) {
            if (itsOwnProp(target, p)) {
                return Reflect.has(target, p);
            }
            return get(target, p) !== undefined;
        },
        get(target, p, receiver) {
            if (itsOwnProp(target, p)) {
                return Reflect.get(target, p, receiver);
            }
            return get(target, p);
        },
        set(target, p, value, receiver) {
            if (itsOwnProp(target, p)) {
                return Reflect.set(target, p, value, receiver);
            }
            return !!set(target, p, value, receiver);
        },
        deleteProperty(target, p) {
            if (itsOwnProp(target, p) || !remove) {
                return Reflect.deleteProperty(target, p);
            }
            return remove(target, p);
        },
        defineProperty(target, p, attributes) {
            return Reflect.defineProperty(target, p, attributes);
        },
        ownKeys(target) {
            return Reflect.ownKeys(target).concat((ownKeys && ownKeys(target)) || []);
        },
        ...handlers
    });
}
exports.proxyDelegation = proxyDelegation;
//# sourceMappingURL=proxyDelegation.js.map