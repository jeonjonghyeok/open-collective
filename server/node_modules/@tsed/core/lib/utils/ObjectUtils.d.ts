import { Type } from "../interfaces/Type";
/**
 * Get the class constructor
 * @param target
 */
export declare function getConstructor(target: any): Type<any>;
/**
 * Get the class constructor
 * @param target
 */
export declare function constructorOf(target: any): Type<any>;
export declare function toStringConstructor(target: any): string;
export declare function getConstructorArgNames(target: any): string[];
/**
 * Get the provide constructor if target is an instance.
 * @param target
 * @returns {*}
 */
export declare function getClass(target: any): any;
/**
 * Get the provide constructor if target is an instance.
 * @param target
 * @returns {*}
 * @alias getClass
 */
export declare function classOf(target: any): any;
/**
 *
 * @param target
 * @returns {symbol}
 */
export declare function getClassOrSymbol(target: any): any;
/**
 *
 * @param target
 * @returns {"string" | "number" | "boolean" | "any"}
 */
export declare function primitiveOf(target: any): "string" | "number" | "boolean" | "any";
/**
 *
 * @param target
 */
export declare function isSymbol(target: any): target is symbol;
/**
 *
 * @param target
 * @returns {boolean}
 */
export declare function isString(target: any): target is string;
/**
 *
 * @param target
 * @returns {boolean}
 */
export declare function isNumber(target: any): target is number;
/**
 *
 * @param target
 * @returns {boolean}
 */
export declare function isBoolean(target: any): target is boolean;
/**
 * Return true if the given obj is a primitive.
 * @param target
 * @returns {boolean}
 */
export declare function isPrimitiveOrPrimitiveClass(target: any): boolean;
export declare function isPrimitive(target: any): boolean;
/**
 *
 * @param target
 * @returns {Boolean}
 */
export declare function isArray<T = any>(target: any): target is T[];
/**
 * Return true if the clazz is an array.
 * @param target
 * @returns {boolean}
 */
export declare function isArrayOrArrayClass(target: any): boolean;
/**
 * Return true if the target.
 * @param target
 * @returns {boolean}
 */
export declare function isCollection(target: any): boolean;
/**
 *
 * @param target
 * @returns {boolean}
 */
export declare function isDate(target: any): boolean;
/**
 *
 * @param target
 * @returns {boolean}
 */
export declare function isClassObject(target: any): target is Object;
export declare function isPlainObject(target: any): boolean;
export declare function isObject(target: any): target is object;
/**
 *
 * @param target
 * @returns {boolean}
 */
export declare function isClass(target: any): boolean;
export declare function isFunction(target: any): target is Function;
export declare function isArrowFn(target: any): boolean;
/**
 *
 * @param value
 */
export declare function isNil(value: any): boolean;
/**
 * Return true if the value is an empty string, null or undefined.
 * @param value
 * @returns {boolean}
 */
export declare function isEmpty(value: any): boolean;
/**
 * Tests to see if the object is an ES2015 (ES6) Promise
 * @see {@link https://www.ecma-international.org/ecma-262/6.0/#sec-promise-objects}
 * @param target
 * @returns {boolean}
 */
export declare function isPromise(target: any): boolean;
export declare function isStream(obj: any): boolean;
export declare function isObservable<T>(obj: any): boolean;
/**
 *
 * @param target
 * @returns {any}
 */
export declare function getInheritedClass(target: any): any;
/**
 *
 * @param target
 * @returns {Array}
 */
export declare function ancestorsOf(target: any): any[];
export declare function isInheritedFrom(target: any, from: any, deep?: number): boolean;
/**
 * Get object name
 */
export declare function nameOf(obj: any): string;
/**
 * Get the provide name.
 * @param targetClass
 */
export declare function nameOfClass(targetClass: any): string;
/**
 * Get symbol name.
 * @param sym
 */
export declare const nameOfSymbol: (sym: symbol) => string;
/**
 * Return the descriptor for a given class and propertyKey
 * @param target
 * @param {string} propertyKey
 * @returns {PropertyDescriptor}
 */
export declare function descriptorOf(target: any, propertyKey: string | symbol): PropertyDescriptor;
export declare function inheritedDescriptorOf(target: any, propertyKey: string): PropertyDescriptor | undefined;
/**
 * Return the prototype of the given class.
 * @param target
 * @returns {any}
 */
export declare function prototypeOf(target: any): any;
/**
 * Return all methods for a given class.
 * @param target
 */
export declare function methodsOf(target: any): any[];
