import { DecoratorParameters } from "../interfaces";
export declare enum DecoratorTypes {
    PARAM = "parameter",
    PARAM_CTOR = "parameter.constructor",
    PARAM_STC = "parameter.static",
    PROP = "property",
    PROP_STC = "property.static",
    METHOD = "method",
    METHOD_STC = "method.static",
    CLASS = "class"
}
/**
 *
 * @param {any[]} args
 * @param longType
 * @returns {"parameter" | "property" | "property.static" | "method" | "method.static" | "class"}
 */
export declare function getDecoratorType(args: any[], longType?: boolean): DecoratorTypes;
export declare function decoratorTypeOf(args: any[]): DecoratorTypes;
/**
 *
 */
export declare class UnsupportedDecoratorType extends Error {
    name: "UNSUPPORTED_DECORATOR_TYPE";
    constructor(decorator: any, args: any[]);
    private static buildMessage;
}
/**
 *
 * @param target
 * @param {string} propertyKey
 * @returns {DecoratorParameters}
 */
export declare function decoratorArgs(target: any, propertyKey: string): DecoratorParameters;
export declare function decorateMethodsOf(klass: any, decorator: any): void;
export declare function applyDecorators(...decorators: (any | ClassDecorator | MethodDecorator | PropertyDescriptor | ParameterDecorator)[]): any;
export declare type AnyDecorator = any | ClassDecorator | MethodDecorator | PropertyDescriptor | ParameterDecorator;
export declare function useDecorators(...decorators: AnyDecorator[]): any;
export declare function useMethodDecorator(decorator: AnyDecorator): (target: any, propertyKey: string | symbol) => any;
export declare function useMethodDecorators(...decorators: AnyDecorator[]): (target: any, propertyKey: string | symbol) => void;
