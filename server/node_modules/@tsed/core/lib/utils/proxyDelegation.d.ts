/**
 * @ignore
 */
export declare type ProxyDelegationGetter<T = any> = (target: T, property: PropertyKey) => any | undefined;
/**
 * @ignore
 */
export declare type ProxyDelegationRemove<T = any> = (target: T, property: PropertyKey) => any;
/**
 * @ignore
 */
export declare type ProxyDelegationSetter<T = any> = (target: T, property: PropertyKey, value: any, receiver: any) => any;
/**
 * @ignore
 */
export declare type ProxyDelegationOwnKeys<T = any> = (target: T) => PropertyKey[];
/**
 * @ignore
 */
export interface ProxyDelegation<T extends object> {
    handlers?: ProxyHandler<T>;
    getter?: ProxyDelegationGetter<T>;
    setter?: ProxyDelegationSetter<T>;
    remove?: ProxyDelegationRemove<T>;
    ownKeys?: ProxyDelegationOwnKeys<T>;
}
/**
 * Create a complete and iterable trap.
 * @param self
 * @param options
 * @ignore
 */
export declare function proxyDelegation<T extends object = any>(self: any, options?: ProxyDelegation<T>): T;
