{"version":3,"file":"deepClone.js","sourceRoot":"","sources":["../../../src/utils/objects/deepClone.ts"],"names":[],"mappings":";;;AAAA,uCAA8C;AAC9C,qCAAgC;AAChC,6CAAwC;AACxC,mCAA8B;AAC9B,+CAA0C;AAC1C,yCAAoC;AAEpC,MAAM,WAAW,GAAG,CAAC,MAAW,EAAE,EAAE,CAAC,aAAK,CAAC,MAAM,CAAC,IAAI,yBAAW,CAAC,MAAM,CAAC,IAAI,mBAAQ,CAAC,MAAM,CAAC,IAAI,uBAAU,CAAC,MAAM,CAAC,CAAC;AAEpH;;;GAGG;AACH,SAAgB,SAAS,CAAC,MAAW;IACnC,IAAI,IAAS,CAAC;IAEd,IAAI,WAAW,CAAC,MAAM,CAAC,EAAE;QACvB,OAAO,MAAM,CAAC;KACf;IAED,IAAI,eAAM,CAAC,MAAM,CAAC,EAAE;QAClB,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC;KACzB;IAED,IAAI,GAAG,6BAAmB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IAE7C,KAAK,MAAM,GAAG,IAAI,MAAM,EAAE;QACxB,+FAA+F;QAC/F,MAAM,UAAU,GAAG,MAAM,CAAC,wBAAwB,CAAC,MAAM,EAAE,GAAG,CAAE,CAAC;QAEjE,IAAI,UAAU,EAAE;YACd,IAAI,CAAC,uBAAU,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;gBACjC,IAAI,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;aACzC;iBAAM;gBACL,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,GAAG,EAAE,UAAU,CAAC,CAAC;aAC9C;SACF;KACF;IAED,IAAI,CAAC,6BAAmB,CAAC,MAAM,CAAC,EAAE;QAChC,MAAM,SAAS,GAAG,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QACjD,OAAO,CAAC,cAAc,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;KACzC;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAhCD,8BAgCC","sourcesContent":["import {isArrayOrArrayClass} from \"./isArray\";\nimport {isDate} from \"./isDate\";\nimport {isFunction} from \"./isFunction\";\nimport {isNil} from \"./isNil\";\nimport {isPrimitive} from \"./isPrimitive\";\nimport {isSymbol} from \"./isSymbol\";\n\nconst isBasicType = (source: any) => isNil(source) || isPrimitive(source) || isSymbol(source) || isFunction(source);\n\n/**\n * Return a cloned value\n * @param source\n */\nexport function deepClone(source: any): any {\n  let dest: any;\n\n  if (isBasicType(source)) {\n    return source;\n  }\n\n  if (isDate(source)) {\n    return new Date(source);\n  }\n\n  dest = isArrayOrArrayClass(source) ? [] : {};\n\n  for (const key in source) {\n    // Use getOwnPropertyDescriptor instead of source[key] to prevent from trigering setter/getter.\n    const descriptor = Object.getOwnPropertyDescriptor(source, key)!;\n\n    if (descriptor) {\n      if (!isFunction(descriptor.value)) {\n        dest[key] = deepClone(descriptor.value);\n      } else {\n        Object.defineProperty(dest, key, descriptor);\n      }\n    }\n  }\n\n  if (!isArrayOrArrayClass(source)) {\n    const prototype = Reflect.getPrototypeOf(source);\n    Reflect.setPrototypeOf(dest, prototype);\n  }\n\n  return dest;\n}\n"]}