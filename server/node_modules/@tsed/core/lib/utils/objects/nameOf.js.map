{"version":3,"file":"nameOf.js","sourceRoot":"","sources":["../../../src/utils/objects/nameOf.ts"],"names":[],"mappings":";;;AAAA;;;GAGG;AACH,SAAgB,WAAW,CAAC,WAAgB;IAC1C,OAAO,OAAO,WAAW,KAAK,UAAU,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC;AAC7F,CAAC;AAFD,kCAEC;AAED;;;GAGG;AACU,QAAA,YAAY,GAAG,CAAC,GAAW,EAAU,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;AAE5G;;GAEG;AACH,SAAgB,MAAM,CAAC,GAAQ;IAC7B,QAAQ,OAAO,GAAG,EAAE;QAClB;YACE,OAAO,EAAE,GAAG,GAAG,CAAC;QAClB,KAAK,QAAQ;YACX,OAAO,oBAAY,CAAC,GAAG,CAAC,CAAC;QAC3B,KAAK,UAAU;YACb,OAAO,WAAW,CAAC,GAAG,CAAC,CAAC;KAC3B;AACH,CAAC;AATD,wBASC","sourcesContent":["/**\n * Get the provide name.\n * @param targetClass\n */\nexport function nameOfClass(targetClass: any): string {\n  return typeof targetClass === \"function\" ? targetClass.name : targetClass.constructor.name;\n}\n\n/**\n * Get symbol name.\n * @param sym\n */\nexport const nameOfSymbol = (sym: symbol): string => sym.toString().replace(\"Symbol(\", \"\").replace(\")\", \"\");\n\n/**\n * Get object name\n */\nexport function nameOf(obj: any): string {\n  switch (typeof obj) {\n    default:\n      return \"\" + obj;\n    case \"symbol\":\n      return nameOfSymbol(obj);\n    case \"function\":\n      return nameOfClass(obj);\n  }\n}\n"]}