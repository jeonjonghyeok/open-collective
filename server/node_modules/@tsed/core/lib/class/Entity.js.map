{"version":3,"file":"Entity.js","sourceRoot":"","sources":["../../src/class/Entity.ts"],"names":[],"mappings":";;;AACA,4DAAyE;AACzE,sDAAkI;AAalI,MAAsB,MAAM;IAgC1B,YAAsB,EAAC,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,KAAK,EAAgB;QAC3E,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,WAAW,GAAG,WAAY,CAAC;QAChC,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;QACxC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,KAAK,GAAG,KAAM,CAAC;QACpB,IAAI,CAAC,aAAa,GAAG,iCAAgB,CAAC,CAAC,MAAM,EAAE,WAAW,EAAE,UAAU,IAAI,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC;QACxF,IAAI,CAAC,KAAK,GAAG,MAAM,IAAI,qBAAO,CAAC,MAAM,CAAC,CAAC;IACzC,CAAC;IAED;;OAEG;IACH,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED;;;OAGG;IACH,IAAI,UAAU;QACZ,OAAO,oBAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACH,IAAI,cAAc;QAChB,OAAO,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,oBAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAChE,CAAC;IAED;;;OAGG;IACH,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED;;;OAGG;IACH,IAAI,IAAI,CAAC,KAAsB;QAC7B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED;;;;OAIG;IACH,IAAI,QAAQ;QACV,OAAO,oBAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAED;;;OAGG;IACH,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED;;;OAGG;IACH,IAAI,YAAY;QACd,OAAO,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC;IAC/B,CAAC;IAED;;;OAGG;IACH,IAAI,OAAO;QACT,OAAO,iCAAmB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAClD,CAAC;IAED;;;OAGG;IACH,IAAI,WAAW;QACb,OAAO,yCAA2B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACjD,CAAC;IAED;;;OAGG;IACH,IAAI,MAAM;QACR,OAAO,oBAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACnC,CAAC;IAED;;;OAGG;IACH,IAAI,QAAQ;QACV,OAAO,sBAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACrC,CAAC;IAED;;OAEG;IACH,IAAI,OAAO;QACT,OAAO,qBAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACpC,CAAC;CACF;AAjJD,wBAiJC","sourcesContent":["import {Type} from \"../interfaces/Type\";\nimport {DecoratorTypes, getDecoratorType} from \"../utils/DecoratorUtils\";\nimport {classOf, isArrayOrArrayClass, isClass, isDate, isObject, isPrimitiveOrPrimitiveClass, nameOf} from \"../utils/ObjectUtils\";\n\nexport interface EntityOptions {\n  target: Type<any>;\n  propertyKey?: string | symbol;\n  index?: number;\n  descriptor?: any;\n  type?: Type<any>;\n  collectionType?: Type<any>;\n\n  [key: string]: any;\n}\n\nexport abstract class Entity {\n  /**\n   * Original property key decorated by the decorator\n   */\n  readonly propertyKey: string | symbol;\n  /**\n   * Alias of the property\n   */\n  readonly propertyName: string;\n  /**\n   * Parameter index\n   */\n  readonly index: number;\n  /**\n   * Method's descriptor\n   */\n  readonly descriptor: number;\n  /**\n   * Decorator type used to declare the JsonSchemaStore.\n   */\n  readonly decoratorType: DecoratorTypes;\n  /**\n   * Type of the collection (Array, Map, Set, etc...)\n   */\n  public collectionType: Type<any>;\n  public token: Type<any>;\n  /**\n   *\n   */\n  protected _type: Type<any>;\n  protected _target: Type<any>;\n\n  protected constructor({target, propertyKey, descriptor, index}: EntityOptions) {\n    this._target = target;\n    this.propertyKey = propertyKey!;\n    this.propertyName = String(propertyKey);\n    this.descriptor = descriptor;\n    this.index = index!;\n    this.decoratorType = getDecoratorType([target, propertyKey, descriptor || index], true);\n    this.token = target && classOf(target);\n  }\n\n  /**\n   * Reference to the class\n   */\n  get target() {\n    return this._target;\n  }\n\n  /**\n   * Return the class name of the entity.\n   * @returns {string}\n   */\n  get targetName(): string {\n    return nameOf(this.token);\n  }\n\n  /**\n   * Return the collection name\n   * @returns {string}\n   * @todo should not be use in final API\n   */\n  get collectionName(): string {\n    return this.collectionType ? nameOf(this.collectionType) : \"\";\n  }\n\n  /**\n   *\n   * @returns {Type<any>}\n   */\n  get type(): Type<any> | any {\n    return this._type;\n  }\n\n  /**\n   * Get original type without transformation\n   * @param value\n   */\n  set type(value: Type<any> | any) {\n    this._type = value;\n  }\n\n  /**\n   * Return target type name\n   * @returns {string}\n   * @todo should not be use in final API\n   */\n  get typeName(): string {\n    return nameOf(this._type);\n  }\n\n  /**\n   * Return the itemSchema target type. if the type is a function used for recursive model, the function will be called to\n   * get the right type.\n   */\n  get computedType() {\n    return this._type;\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isCollection(): boolean {\n    return !!this.collectionType;\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isArray() {\n    return isArrayOrArrayClass(this.collectionType);\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isPrimitive() {\n    return isPrimitiveOrPrimitiveClass(this._type);\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isDate() {\n    return isDate(this.computedType);\n  }\n\n  /**\n   *\n   * @returns {boolean}\n   */\n  get isObject() {\n    return isObject(this.computedType);\n  }\n\n  /**\n   *\n   */\n  get isClass() {\n    return isClass(this.computedType);\n  }\n}\n"]}