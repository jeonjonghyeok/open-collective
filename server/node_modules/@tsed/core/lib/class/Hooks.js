"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Hooks = void 0;
class Hooks {
    constructor() {
        this.listeners = new Map();
    }
    /**
     * Listen a hook event
     * @param event
     * @param cb
     */
    on(event, cb) {
        if (!this.listeners.has(event)) {
            this.listeners.set(event, []);
        }
        this.listeners.get(event).push(cb);
        return this;
    }
    /**
     * Remove a listener attached to an event
     * @param event
     * @param cb
     */
    off(event, cb) {
        if (this.listeners.has(event)) {
            this.listeners.set(event, this.listeners.get(event).filter((item) => item === cb));
        }
        return this;
    }
    /**
     * Trigger an event and call listener.
     * @param event
     * @param args
     * @param callThis
     */
    emit(event, args = [], callThis = null) {
        if (this.listeners.has(event)) {
            for (const cb of this.listeners.get(event)) {
                cb.call(callThis, ...args);
            }
        }
    }
    /**
     * Trigger an event, listener alter given value and return it.
     * @param event
     * @param value
     * @param args
     * @param callThis
     */
    alter(event, value, args = [], callThis = null) {
        if (this.listeners.has(event)) {
            for (const cb of this.listeners.get(event)) {
                value = cb.call(callThis, value, ...args);
            }
        }
        return value;
    }
    /**
     * Trigger an event and call async listener.
     * @param event
     * @param args
     * @param callThis
     */
    async asyncEmit(event, args = [], callThis = null) {
        if (this.listeners.has(event)) {
            for (const cb of this.listeners.get(event)) {
                await cb.call(callThis, ...args);
            }
        }
    }
    /**
     * Trigger an event, async listener alter given value and return it.
     * @param event
     * @param value
     * @param args
     * @param callThis
     */
    async asyncAlter(event, value, args = [], callThis = null) {
        if (this.listeners.has(event)) {
            for (const cb of this.listeners.get(event)) {
                value = await cb.call(callThis, value, ...args);
            }
        }
        return value;
    }
}
exports.Hooks = Hooks;
//# sourceMappingURL=Hooks.js.map