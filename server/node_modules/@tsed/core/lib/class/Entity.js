"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Entity = void 0;
const DecoratorUtils_1 = require("../utils/DecoratorUtils");
const ObjectUtils_1 = require("../utils/ObjectUtils");
class Entity {
    constructor({ target, propertyKey, descriptor, index }) {
        this._target = target;
        this.propertyKey = propertyKey;
        this.propertyName = String(propertyKey);
        this.descriptor = descriptor;
        this.index = index;
        this.decoratorType = DecoratorUtils_1.getDecoratorType([target, propertyKey, descriptor || index], true);
        this.token = target && ObjectUtils_1.classOf(target);
    }
    /**
     * Reference to the class
     */
    get target() {
        return this._target;
    }
    /**
     * Return the class name of the entity.
     * @returns {string}
     */
    get targetName() {
        return ObjectUtils_1.nameOf(this.token);
    }
    /**
     * Return the collection name
     * @returns {string}
     * @todo should not be use in final API
     */
    get collectionName() {
        return this.collectionType ? ObjectUtils_1.nameOf(this.collectionType) : "";
    }
    /**
     *
     * @returns {Type<any>}
     */
    get type() {
        return this._type;
    }
    /**
     * Get original type without transformation
     * @param value
     */
    set type(value) {
        this._type = value;
    }
    /**
     * Return target type name
     * @returns {string}
     * @todo should not be use in final API
     */
    get typeName() {
        return ObjectUtils_1.nameOf(this._type);
    }
    /**
     * Return the itemSchema target type. if the type is a function used for recursive model, the function will be called to
     * get the right type.
     */
    get computedType() {
        return this._type;
    }
    /**
     *
     * @returns {boolean}
     */
    get isCollection() {
        return !!this.collectionType;
    }
    /**
     *
     * @returns {boolean}
     */
    get isArray() {
        return ObjectUtils_1.isArrayOrArrayClass(this.collectionType);
    }
    /**
     *
     * @returns {boolean}
     */
    get isPrimitive() {
        return ObjectUtils_1.isPrimitiveOrPrimitiveClass(this._type);
    }
    /**
     *
     * @returns {boolean}
     */
    get isDate() {
        return ObjectUtils_1.isDate(this.computedType);
    }
    /**
     *
     * @returns {boolean}
     */
    get isObject() {
        return ObjectUtils_1.isObject(this.computedType);
    }
    /**
     *
     */
    get isClass() {
        return ObjectUtils_1.isClass(this.computedType);
    }
}
exports.Entity = Entity;
//# sourceMappingURL=Entity.js.map