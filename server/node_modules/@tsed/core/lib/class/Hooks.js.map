{"version":3,"file":"Hooks.js","sourceRoot":"","sources":["../../src/class/Hooks.ts"],"names":[],"mappings":";;;AAAA,MAAa,KAAK;IAAlB;QACU,cAAS,GAA4B,IAAI,GAAG,EAAE,CAAC;IA8FzD,CAAC;IA5FC;;;;OAIG;IACH,EAAE,CAAC,KAAa,EAAE,EAAY;QAC5B,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YAC9B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;SAC/B;QAED,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEpC,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACH,GAAG,CAAC,KAAa,EAAE,EAAY;QAC7B,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YAC7B,IAAI,CAAC,SAAS,CAAC,GAAG,CAChB,KAAK,EACL,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAE,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,CACzD,CAAC;SACH;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACH,IAAI,CAAC,KAAa,EAAE,OAAc,EAAE,EAAE,WAAgB,IAAI;QACxD,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YAC7B,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAE,EAAE;gBAC3C,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,CAAC;aAC5B;SACF;IACH,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,KAAa,EAAE,KAAU,EAAE,OAAc,EAAE,EAAE,WAAgB,IAAI;QACrE,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YAC7B,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAE,EAAE;gBAC3C,KAAK,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,CAAC;aAC3C;SACF;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,SAAS,CAAC,KAAa,EAAE,OAAc,EAAE,EAAE,WAAgB,IAAI;QACnE,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YAC7B,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAE,EAAE;gBAC3C,MAAM,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,CAAC;aAClC;SACF;IACH,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,UAAU,CAAC,KAAa,EAAE,KAAU,EAAE,OAAiB,EAAE,EAAE,WAAgB,IAAI;QACnF,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YAC7B,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAE,EAAE;gBAC3C,KAAK,GAAG,MAAM,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,CAAC;aACjD;SACF;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AA/FD,sBA+FC","sourcesContent":["export class Hooks {\n  private listeners: Map<string, Function[]> = new Map();\n\n  /**\n   * Listen a hook event\n   * @param event\n   * @param cb\n   */\n  on(event: string, cb: Function) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n\n    this.listeners.get(event)!.push(cb);\n\n    return this;\n  }\n\n  /**\n   * Remove a listener attached to an event\n   * @param event\n   * @param cb\n   */\n  off(event: string, cb: Function) {\n    if (this.listeners.has(event)) {\n      this.listeners.set(\n        event,\n        this.listeners.get(event)!.filter((item) => item === cb)\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Trigger an event and call listener.\n   * @param event\n   * @param args\n   * @param callThis\n   */\n  emit(event: string, args: any[] = [], callThis: any = null): void {\n    if (this.listeners.has(event)) {\n      for (const cb of this.listeners.get(event)!) {\n        cb.call(callThis, ...args);\n      }\n    }\n  }\n\n  /**\n   * Trigger an event, listener alter given value and return it.\n   * @param event\n   * @param value\n   * @param args\n   * @param callThis\n   */\n  alter(event: string, value: any, args: any[] = [], callThis: any = null): any {\n    if (this.listeners.has(event)) {\n      for (const cb of this.listeners.get(event)!) {\n        value = cb.call(callThis, value, ...args);\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Trigger an event and call async listener.\n   * @param event\n   * @param args\n   * @param callThis\n   */\n  async asyncEmit(event: string, args: any[] = [], callThis: any = null): Promise<void> {\n    if (this.listeners.has(event)) {\n      for (const cb of this.listeners.get(event)!) {\n        await cb.call(callThis, ...args);\n      }\n    }\n  }\n\n  /**\n   * Trigger an event, async listener alter given value and return it.\n   * @param event\n   * @param value\n   * @param args\n   * @param callThis\n   */\n  async asyncAlter(event: string, value: any, args: string[] = [], callThis: any = null): Promise<any> {\n    if (this.listeners.has(event)) {\n      for (const cb of this.listeners.get(event)!) {\n        value = await cb.call(callThis, value, ...args);\n      }\n    }\n\n    return value;\n  }\n}\n"]}