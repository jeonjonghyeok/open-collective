{"version":3,"file":"BaseAppender.js","sourceRoot":"","sources":["../../../src/appenders/class/BaseAppender.ts"],"names":[],"mappings":";;AAKA,yDAAoD;AAkBpD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AACH,MAAsB,YAAY;IAMhC,YAAoB,OAA+B;QAA/B,YAAO,GAAP,OAAO,CAAwB;QAJ3C,oBAAe,GAAqB,EAAC,IAAI,EAAE,EAAE,EAAC,CAAC;QAKrD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAExB,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE;YACjB,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;SACjB;IACH,CAAC;IAED,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,SAAS,CAAC,MAAoC;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAEpC,IAAI,CAAC,OAAO,GAAG,iBAAO,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,aAAa,IAAI,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAE1F,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YACvB,IAAI,CAAC,OAAO,GAAG,iBAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;SAC3E;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,GAAG,IAAW;QACnB,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,CAAC;IACzC,CAAC;CAGF;AAtCD,oCAsCC","sourcesContent":["/**\n * @module appenders\n */\n/** */\nimport {LogEvent} from \"../../core/LogEvent\";\nimport {Layouts} from \"../../layouts/class/Layouts\";\nimport {IAppenderConfiguration, PartialAppenderConfiguration} from \"../interfaces/AppenderConfiguration\";\n\nexport interface IAppenderOptions {\n  name: string;\n  defaultLayout?: string;\n}\n\nexport interface IBaseAppender {\n  write(loggingEvent: LogEvent): any;\n\n  build?(): any;\n\n  reopen?(): any;\n\n  shutdown?(complete: any): any;\n}\n\n/**\n * ## BaseAppender\n *\n * ts-log-debug can load appenders from outside the core appenders. The type config value is used as a require path if no matching appender can be found. For example, the following configuration will create an appender with decorators:\n *\n * ```typescript\n * // consoleAppender.ts\n * import {Appender, BaseAppender, LogEvent} from \"ts-log-debug\";\n * const consoleLog = console.log.bind(console);\n *\n * @ Appender({name: \"console2\"})\n * export class ConsoleAppender extends BaseAppender {\n *   write(loggingEvent: LogEvent) {\n *       consoleLog(this.layout(loggingEvent, this.config.timezoneOffset));\n *   }\n * }\n * ```\n *\n * This appender can be use like this:\n *\n * ```typescript\n * import {Logger} from \"ts-log-debug\";\n * import \"./consoleAppender.ts\"\n *\n * const logger = new Logger(\"loggerName\");\n *\n * logger.appenders\n *   .set(\"console-log\", {\n *       type: \"console2\", level: [\"debug\", \"info\", \"trace\"]\n *   });\n * ```\n *\n *\n */\nexport abstract class BaseAppender implements IBaseAppender {\n  private _layout: any;\n  private appenderOptions: IAppenderOptions = {name: \"\"};\n\n  [key: string]: any;\n\n  constructor(private _config: IAppenderConfiguration) {\n    this.configure(_config);\n\n    if (this[\"build\"]) {\n      this[\"build\"]();\n    }\n  }\n\n  get config(): IAppenderConfiguration {\n    return this._config;\n  }\n\n  configure(config: PartialAppenderConfiguration) {\n    Object.assign(this._config, config);\n\n    this._layout = Layouts.get(this.appenderOptions.defaultLayout || \"colored\", this._config);\n\n    if (this._config.layout) {\n      this._layout = Layouts.get(this._config.layout.type, this._config.layout);\n    }\n    return this;\n  }\n\n  /**\n   *\n   * @param args\n   */\n  layout(...args: any[]): string {\n    return this._layout.transform(...args);\n  }\n\n  abstract write(loggingEvent: LogEvent): any;\n}\n"]}