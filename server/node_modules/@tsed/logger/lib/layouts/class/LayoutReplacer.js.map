{"version":3,"file":"LayoutReplacer.js","sourceRoot":"","sources":["../../../src/layouts/class/LayoutReplacer.ts"],"names":[],"mappings":"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","sourcesContent":["import {LogEvent} from \"../../core/LogEvent\";\nimport * as Os from \"os\";\nimport {LOG_COLORS} from \"../constants/logColors\";\nimport {colorizeEnd, colorizeStart} from \"../utils/colorizeUtils\";\nimport {IReplacers} from \"../interfaces/Replacers\";\nimport {TokensHandlers} from \"../interfaces/BasicLayoutConfiguration\";\nimport * as Util from \"util\";\n\n/**\n *\n */\nconst dateFormat = require(\"date-format\");\nconst eol = Os.EOL || \"\\n\";\n\nexport class LayoutReplacer {\n  constructor(private tokens: TokensHandlers, private timezoneOffset: number) {}\n\n  /**\n   *\n   * @param loggingEvent\n   * @param specifier\n   * @returns {any}\n   */\n  public categoryName = (loggingEvent: LogEvent, specifier: string): string => {\n    let loggerName = loggingEvent.categoryName;\n    if (specifier) {\n      const precision = parseInt(specifier, 10);\n      const loggerNameBits = loggerName.split(\".\");\n      if (precision < loggerNameBits.length) {\n        loggerName = loggerNameBits.slice(loggerNameBits.length - precision).join(\".\");\n      }\n    }\n    return loggerName;\n  };\n  /**\n   *\n   * @param loggingEvent\n   * @param specifier\n   * @returns {any}\n   */\n  public formatAsDate = (loggingEvent: LogEvent, specifier: string): string => {\n    let format = dateFormat.ISO8601_FORMAT;\n    if (specifier) {\n      format = specifier;\n      // Pick up special cases\n      if (format === \"ISO8601\") {\n        format = dateFormat.ISO8601_FORMAT;\n      } else if (format === \"ISO8601_WITH_TZ_OFFSET\") {\n        format = dateFormat.ISO8601_WITH_TZ_OFFSET_FORMAT;\n      } else if (format === \"ABSOLUTE\") {\n        format = dateFormat.ABSOLUTETIME_FORMAT;\n      } else if (format === \"DATE\") {\n        format = dateFormat.DATETIME_FORMAT;\n      }\n    }\n    // Format the date\n    return dateFormat.asString(format, loggingEvent.startTime, this.timezoneOffset);\n  };\n  /**\n   *\n   * @returns {string}\n   */\n  public hostname = (): string => {\n    return Os.hostname().toString();\n  };\n  /**\n   *\n   * @param loggingEvent\n   * @returns {any}\n   */\n  public formatMessage = (loggingEvent: LogEvent): string => {\n    return (Util.format as any)(...loggingEvent.data);\n  };\n  /**\n   *\n   * @returns {string|string}\n   */\n  public endOfLine = () => {\n    return eol;\n  };\n  /**\n   *\n   * @param loggingEvent\n   * @returns {string}\n   */\n  public logLevel = (loggingEvent: LogEvent): string => {\n    return loggingEvent.level.toString();\n  };\n  /**\n   *\n   * @param loggingEvent\n   * @returns {any}\n   */\n  public startTime = (loggingEvent: LogEvent): string => {\n    return dateFormat.asString(\"hh:mm:ss\", loggingEvent.startTime, this.timezoneOffset);\n  };\n  /**\n   *\n   * @param loggingEvent\n   * @returns {string}\n   */\n  public startColour = (loggingEvent: LogEvent): string => {\n    const index: any = loggingEvent.level.toString();\n    return colorizeStart(LOG_COLORS[index as keyof typeof LOG_COLORS]);\n  };\n  /**\n   *\n   * @param loggingEvent\n   * @returns {string}\n   */\n  public endColour = (loggingEvent: LogEvent): string => {\n    const index: any = loggingEvent.level.toString();\n    return colorizeEnd(LOG_COLORS[index as keyof typeof LOG_COLORS]);\n  };\n  /**\n   *\n   * @returns {string}\n   */\n  public percent = () => {\n    return \"%\";\n  };\n  /**\n   *\n   * @param loggingEvent\n   * @returns {string}\n   */\n  public pid = (loggingEvent?: LogEvent): string => {\n    return loggingEvent && loggingEvent.pid ? loggingEvent.pid.toString() : process.pid.toString();\n  };\n  /**\n   *\n   * @param loggingEvent\n   * @param specifier\n   * @returns {any}\n   */\n  public clusterInfo = (loggingEvent: LogEvent, specifier: string) => {\n    if (loggingEvent.cluster && specifier) {\n      return specifier\n        .replace(\"%m\", loggingEvent.cluster.master)\n        .replace(\"%w\", loggingEvent.cluster.worker)\n        .replace(\"%i\", loggingEvent.cluster.workerId);\n    } else if (loggingEvent.cluster) {\n      return `${loggingEvent.cluster.worker}@${loggingEvent.cluster.master}`;\n    }\n\n    return this.pid();\n  };\n  /**\n   *\n   * @param loggingEvent\n   * @param specifier\n   * @returns {any}\n   */\n  public userDefined = (loggingEvent: LogEvent, specifier: string) => {\n    if (typeof this.tokens[specifier] !== \"undefined\") {\n      return typeof this.tokens[specifier] === \"function\" ? this.tokens[specifier](loggingEvent) : this.tokens[specifier];\n    }\n\n    return null;\n  };\n\n  build(): IReplacers {\n    return {\n      c: this.categoryName,\n      d: this.formatAsDate,\n      h: this.hostname,\n      m: this.formatMessage,\n      n: this.endOfLine,\n      p: this.logLevel,\n      r: this.startTime,\n      \"[\": this.startColour,\n      \"]\": this.endColour,\n      y: this.clusterInfo,\n      z: this.pid,\n      \"%\": this.percent,\n      x: this.userDefined\n    };\n  }\n}\n"]}