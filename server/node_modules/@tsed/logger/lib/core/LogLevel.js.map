{"version":3,"file":"LogLevel.js","sourceRoot":"","sources":["../../src/core/LogLevel.ts"],"names":[],"mappings":";AAAA;;GAEG;AACH,MAAM;;AAEN,MAAa,QAAQ;IACnB,YAAoB,KAAa,EAAU,QAAgB;QAAvC,UAAK,GAAL,KAAK,CAAQ;QAAU,aAAQ,GAAR,QAAQ,CAAQ;QACzD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,IAA6B,EAAE,YAAgC;QAC7E,IAAI,IAAI,YAAY,QAAQ,EAAE;YAC5B,OAAO,IAAI,CAAC;SACb;QAED,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC5B,MAAM,KAAK,GAAQ,IAAI,CAAC,WAAW,EAAE,CAAC;YACtC,OAAQ,kBAA0B,CAAC,KAAK,CAAC,IAAI,YAAY,CAAC;SAC3D;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IACxC,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED,mBAAmB,CAAC,UAA6B;QAC/C,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;YAClC,UAAU,GAAG,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;SAC5C;QACD,OAAO,IAAI,CAAC,KAAK,IAAK,UAAuB,CAAC,KAAK,CAAC;IACtD,CAAC;IAED,sBAAsB,CAAC,UAA6B;QAClD,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;YAClC,UAAU,GAAG,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;SAC5C;QACD,OAAO,IAAI,CAAC,KAAK,IAAK,UAAuB,CAAC,KAAK,CAAC;IACtD,CAAC;IAED,SAAS,CAAC,UAA6B;QACrC,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;YAClC,UAAU,GAAG,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;SAC5C;QACD,OAAO,IAAI,CAAC,KAAK,KAAM,UAAuB,CAAC,KAAK,CAAC;IACvD,CAAC;CACF;AA3CD,4BA2CC;AAED,MAAM,kBAAkB,GAAG;IACzB,GAAG,EAAE,IAAI,QAAQ,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC;IAC1C,KAAK,EAAE,IAAI,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC;IAClC,KAAK,EAAE,IAAI,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC;IACnC,IAAI,EAAE,IAAI,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC;IACjC,IAAI,EAAE,IAAI,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC;IACjC,KAAK,EAAE,IAAI,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC;IACnC,KAAK,EAAE,IAAI,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC;IACnC,IAAI,EAAE,IAAI,QAAQ,CAAC,gBAAgB,EAAE,MAAM,CAAC;IAC5C,GAAG,EAAE,IAAI,QAAQ,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC;CAC3C,CAAC;AAEF,SAAgB,MAAM;IACpB,OAAO,kBAAkB,CAAC;AAC5B,CAAC;AAFD,wBAEC","sourcesContent":["/**\n * @module core\n */\n/** */\n\nexport class LogLevel {\n  constructor(private level: number, private levelStr: string) {\n    this.level = level;\n    this.levelStr = levelStr;\n  }\n\n  static getLevel(sArg: any | string | LogLevel, defaultLevel?: string | LogLevel): LogLevel {\n    if (sArg instanceof LogLevel) {\n      return sArg;\n    }\n\n    if (typeof sArg === \"string\") {\n      const index: any = sArg.toUpperCase();\n      return (DEFAULT_LOG_LEVELS as any)[index] || defaultLevel;\n    }\n\n    return this.getLevel(sArg.toString());\n  }\n\n  toString() {\n    return this.levelStr;\n  }\n\n  isLessThanOrEqualTo(otherLevel: LogLevel | string) {\n    if (typeof otherLevel === \"string\") {\n      otherLevel = LogLevel.getLevel(otherLevel);\n    }\n    return this.level <= (otherLevel as LogLevel).level;\n  }\n\n  isGreaterThanOrEqualTo(otherLevel: LogLevel | string) {\n    if (typeof otherLevel === \"string\") {\n      otherLevel = LogLevel.getLevel(otherLevel);\n    }\n    return this.level >= (otherLevel as LogLevel).level;\n  }\n\n  isEqualTo(otherLevel: LogLevel | string) {\n    if (typeof otherLevel === \"string\") {\n      otherLevel = LogLevel.getLevel(otherLevel);\n    }\n    return this.level === (otherLevel as LogLevel).level;\n  }\n}\n\nconst DEFAULT_LOG_LEVELS = {\n  ALL: new LogLevel(Number.MIN_VALUE, \"ALL\"),\n  TRACE: new LogLevel(5000, \"TRACE\"),\n  DEBUG: new LogLevel(10000, \"DEBUG\"),\n  INFO: new LogLevel(20000, \"INFO\"),\n  WARN: new LogLevel(30000, \"WARN\"),\n  ERROR: new LogLevel(40000, \"ERROR\"),\n  FATAL: new LogLevel(50000, \"FATAL\"),\n  MARK: new LogLevel(9007199254740992, \"MARK\"), // 2^53\n  OFF: new LogLevel(Number.MAX_VALUE, \"OFF\")\n};\n\nexport function levels() {\n  return DEFAULT_LOG_LEVELS;\n}\n"]}