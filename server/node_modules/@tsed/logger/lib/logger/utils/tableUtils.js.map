{"version":3,"file":"tableUtils.js","sourceRoot":"","sources":["../../../src/logger/utils/tableUtils.ts"],"names":[],"mappings":"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","sourcesContent":["export interface ITableSettings {\n  padding?: number;\n  header?: {\n    [key: string]: string;\n  };\n}\n\nexport function charRepeater(x: number, char = \" \") {\n  let res = \"\";\n  while (x--) res += char;\n  return res;\n}\n\n/**\n *\n * @returns {string}\n */\nexport function buildStartLine(fields: any, settings: ITableSettings) {\n  let line = \"┌\";\n  let list = Object.keys(fields);\n\n  list.forEach((key, index) => {\n    if (index !== 0 && index !== list.length) {\n      line += \"┬\";\n    }\n\n    line += charRepeater(fields[key] + 2 * settings.padding!, \"─\");\n  });\n\n  line += \"┐\";\n\n  return line;\n}\n\n/**\n *\n * @param fields\n * @param settings\n * @returns {string}\n */\nexport function buildEndLine(fields: any, settings: ITableSettings) {\n  let line = \"└\";\n  let list = Object.keys(fields);\n\n  list.forEach((key, index) => {\n    if (index !== 0 && index !== list.length) {\n      line += \"┴\";\n    }\n\n    line += charRepeater(fields[key] + 2 * settings.padding!, \"─\");\n  });\n\n  line += \"┘\";\n  return line;\n}\n\n/**\n *\n * @param fields\n * @param settings\n * @param char\n * @returns {string}\n */\nexport function buildLine(fields: any, settings: ITableSettings, char = \"─\") {\n  let line = \"\";\n\n  Object.keys(fields).forEach(key => {\n    line += \"│\";\n    line += charRepeater(fields[key] + 2 * settings.padding!, char);\n  });\n\n  line += \"│\";\n  return line;\n}\n\n/**\n *\n */\nexport function buildLineData(scope: any, fields: any, settings: ITableSettings) {\n  let line = \"\";\n\n  Object.keys(fields).forEach(key => {\n    line += \"│ \";\n    line += scope[key];\n    line += charRepeater(fields[key] + 2 * (settings.padding! - 1) - scope[key].length, \" \");\n    line += \" \";\n  });\n\n  line += \"│\";\n  return line;\n}\n\n/**\n *\n * @param list\n * @param settings\n * @returns {string}\n */\nexport function drawTable(list: any[], settings: ITableSettings = {}): string {\n  settings.padding = settings.padding || 1;\n\n  if (settings.header === undefined) {\n    settings.header = {};\n\n    Object.keys(list[0]).forEach(key => (settings.header![key] = key));\n  }\n\n  const fields: any = {};\n\n  // Calculate width for each column\n\n  Object.keys(settings.header).forEach(key => (fields[key] = settings.header![key].length));\n\n  list.forEach(route => {\n    Object.keys(fields).forEach(key => (fields[key] = Math.max((\"\" + route[key]).length, fields[key])));\n  });\n\n  let output = \"\";\n\n  output += buildStartLine(fields, settings) + \"\\n\";\n  output += buildLineData(settings.header, fields, settings) + \"\\n\";\n\n  list.forEach(scope => {\n    output += buildLine(fields, settings) + \"\\n\";\n    output += buildLineData(scope, fields, settings) + \"\\n\";\n  });\n\n  output += buildEndLine(fields, settings);\n\n  return output;\n}\n"]}