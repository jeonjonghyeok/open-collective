import { Type } from "@tsed/core";
export interface MongooseVirtualRefOptions {
    /**
     * @deprecated Since v6. Use ref instead.
     */
    type?: string | Type<any> | (() => Type<any>);
    ref?: string | Type<any> | (() => Type<any>);
    foreignField?: string;
    localField?: string;
    justOne?: boolean;
    options?: object;
}
/**
 * Define a property as mongoose virtual reference to other Model (decorated with @Model).
 *
 * ::: warning
 * To avoid circular dependencies, do not use the virtual reference model in
 * anything except a type declaration. Using the virtual reference model will prevent
 * typescript transpiler from stripping away the import statement and cause a circular
 * import in node.
 * :::
 *
 * ### Example
 *
 * <<< @/docs/tutorials/snippets/mongoose/virtual-references.ts
 *
 * @param type
 * @param foreignField
 * @returns {Function}
 * @decorator
 * @mongoose
 * @property
 */
export declare function VirtualRef(type: string, foreignField: string): Function;
export declare function VirtualRef(options: MongooseVirtualRefOptions): Function;
export declare function VirtualRef(options: string | MongooseVirtualRefOptions, foreignField?: string): Function;
export declare type VirtualRef<T> = T | null;
export declare type VirtualRefs<T> = T[];
