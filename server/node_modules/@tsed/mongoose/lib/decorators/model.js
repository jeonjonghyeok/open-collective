"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Model = void 0;
const core_1 = require("@tsed/core");
const constants_1 = require("../constants");
const MongooseModelRegistry_1 = require("../registries/MongooseModelRegistry");
const MongooseConnections_1 = require("../services/MongooseConnections");
const utils_1 = require("../utils");
const schemaOptions_1 = require("../utils/schemaOptions");
/**
 * Define a class as a Mongoose Model. The model can be injected to the Service, Controller, Middleware, Converters or Filter with
 * `@Inject` annotation.
 *
 * ### Example
 *
 * ```typescript
 * @Model()
 * export class EventModel {
 *   @Property()
 *   field: string;
 * }
 * ```
 *
 * Then inject the model into a service:
 *
 * ```typescript
 * class MyService {
 *    constructor(@Inject(EventModel) eventModel: MongooseModel<EventModel>) {
 *        eventModel.findById().exec();
 *    }
 * }
 * ```
 *
 * ### Options
 *
 * - `schemaOptions` (mongoose.SchemaOptions): Option to configure the schema behavior.
 * - `name` (String): model name.
 * - `collection` (String): collection (optional, induced from model name).
 * - `skipInit` (Boolean): skipInit whether to skip initialization (defaults to false).
 *
 * @param {MongooseModelOptions} options
 * @returns {(target: any) => void}
 * @decorator
 * @mongoose
 * @class
 */
function Model(options = {}) {
    return (target) => {
        const name = options.name || core_1.nameOf(target);
        core_1.Store.from(target).set(constants_1.MONGOOSE_MODEL_NAME, name);
        const schema = utils_1.getSchema(target, options);
        MongooseModelRegistry_1.registerModel({
            provide: target,
            deps: [MongooseConnections_1.MONGOOSE_CONNECTIONS],
            useFactory(connections) {
                schemaOptions_1.applySchemaOptions(schema, schemaOptions_1.schemaOptions(target));
                const model = utils_1.createModel(target, schema, options.name, options.collection, options.skipInit, connections.get(options.connection));
                model.prototype.$getTarget = () => target;
                return model;
            }
        });
    };
}
exports.Model = Model;
//# sourceMappingURL=model.js.map