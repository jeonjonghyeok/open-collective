{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../src/decorators/schema.ts"],"names":[],"mappings":";;;AAAA,yCAAsC;AACtC,qCAAyE;AAEzE,4CAA6C;AAE7C,wDAAmD;AA4BnD,SAAgB,MAAM,CAAC,UAAuD,EAAE;IAC9E,OAAO,CAAC,GAAG,UAAiB,EAAE,EAAE;QAC9B,QAAQ,uBAAgB,CAAC,UAAU,CAAC,EAAE;YACpC,KAAK,UAAU;gBACb,OAAO,sBAAe,CAAC,iBAAQ,EAAE,EAAE,iBAAU,CAAC,2BAAe,EAAE,OAAO,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC;YAE1F,KAAK,OAAO;gBACV,iBAAU,CAAC,2BAAe,EAAE,2BAAY,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,OAAgC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC;gBAC1G,MAAM;SACT;IACH,CAAC,CAAC;AACJ,CAAC;AAXD,wBAWC;AA4BD,SAAgB,cAAc,CAAC,UAAuD,EAAE;IACtF,OAAO,MAAM,CAAC,OAAO,CAAC,CAAC;AACzB,CAAC;AAFD,wCAEC","sourcesContent":["import {Property} from \"@tsed/common\";\nimport {applyDecorators, getDecoratorType, StoreMerge} from \"@tsed/core\";\nimport {SchemaTypeOpts} from \"mongoose\";\nimport {MONGOOSE_SCHEMA} from \"../constants\";\nimport {MongooseSchemaOptions} from \"../interfaces\";\nimport {createSchema} from \"../utils/createSchema\";\n\n/**\n * Define a class as a Mongoose Schema ready to be used to compose other schemes and models.\n *\n * ### Example\n *\n * ```typescript\n * @MongooseSchema()\n * export class EventSchema {\n *   @Property()\n *   field: string;\n * }\n * ```\n *\n * ### Options\n *\n * - `schemaOptions` (mongoose.SchemaOptions): Option to configure the schema behavior.\n *\n * @param {MongooseSchemaOptions | undefined} options\n * @returns {(target: any) => void}\n * @decorator\n * @mongoose\n * @property\n * @class\n */\nexport function Schema(options?: MongooseSchemaOptions): (target: any) => void;\nexport function Schema(definition: SchemaTypeOpts<any>): Function;\nexport function Schema(options: MongooseSchemaOptions | SchemaTypeOpts<any> = {}) {\n  return (...parameters: any[]) => {\n    switch (getDecoratorType(parameters)) {\n      case \"property\":\n        return applyDecorators(Property(), StoreMerge(MONGOOSE_SCHEMA, options))(...parameters);\n\n      case \"class\":\n        StoreMerge(MONGOOSE_SCHEMA, createSchema(parameters[0], options as MongooseSchemaOptions))(...parameters);\n        break;\n    }\n  };\n}\n\n/**\n * Define a class as a Mongoose Schema ready to be used to compose other schemes and models.\n *\n * ### Example\n *\n * ```typescript\n * @MongooseSchema()\n * export class EventSchema {\n *   @Property()\n *   field: string;\n * }\n * ```\n *\n * ### Options\n *\n * - `schemaOptions` (mongoose.SchemaOptions): Option to configure the schema behavior.\n *\n * @param {MongooseSchemaOptions | undefined} options\n * @returns {(target: any) => void}\n * @decorator\n * @mongoose\n * @property\n * @class\n */\nexport function MongooseSchema(options?: MongooseSchemaOptions): (target: any) => void;\nexport function MongooseSchema(definition: SchemaTypeOpts<any>): Function;\nexport function MongooseSchema(options: MongooseSchemaOptions | SchemaTypeOpts<any> = {}) {\n  return Schema(options);\n}\n"]}