"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostHook = void 0;
const core_1 = require("@tsed/core");
const schemaOptions_1 = require("../utils/schemaOptions");
/**
 * We can simply attach a `@PostHook` decorator to your model class and
 * define the hook function like you normally would in Mongoose.
 *
 * ```typescript
 * import {Ignore, Required} from "@tsed/common";
 * import {PostHook, Model} from "@tsed/mongoose";
 *
 * @Model()
 * @PostHook("save", (car: CarModel) => {
 *    if (car.topSpeedInKmH > 300) {
 *        console.log(car.model, 'is fast!');
 *    }
 * })
 * export class CarModel {
 *    @Ignore()
 *    _id: string;
 *
 *    @Required()
 *    model: string;
 *
 *    @Required()
 *    isFast: boolean;
 *
 *    // or Prehook on static method
 *    @PostHook("save")
 *    static postSave(car: CarModel) {
 *       if (car.topSpeedInKmH > 300) {
 *           console.log(car.model, 'is fast!');
 *       }
 *    }
 * }
 * ```
 *
 * This will execute the post-save hook each time a `CarModel` document is saved.
 *
 * @param {string} method
 * @param {MongoosePostHookCB<any> | MongoosePostErrorHookCB<any>} fn
 * @returns {Function}
 * @decorator
 * @mongoose
 * @class
 */
function PostHook(method, fn) {
    return (...args) => {
        if (core_1.getDecoratorType(args) === "method") {
            fn = args[0][args[1]].bind(args[0]);
        }
        schemaOptions_1.schemaOptions(args[0], {
            post: [
                {
                    method,
                    fn: fn
                }
            ]
        });
    };
}
exports.PostHook = PostHook;
//# sourceMappingURL=postHook.js.map