{"version":3,"file":"MongooseService.js","sourceRoot":"","sources":["../../src/services/MongooseService.ts"],"names":[],"mappings":";;;;AAAA,yCAA2C;AAC3C,qCAAqC;AAGrC,IAAa,eAAe,GAA5B,MAAa,eAAe;IAA5B;QACW,gBAAW,GAAqC,IAAI,GAAG,EAAE,CAAC;QAC3D,sBAAiB,GAAW,SAAS,CAAC;IAuDhD,CAAC;IArDC;;;OAGG;IACH,KAAK,CAAC,OAAO,CAAC,EAAU,EAAE,GAAW,EAAE,iBAA6C,EAAE,SAAS,GAAG,KAAK;QACrG,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;YAChB,OAAO,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,CAAE,CAAC;SAC5B;QAED,aAAI,CAAC,IAAI,CAAC,8BAA8B,EAAE,EAAE,CAAC,CAAC;QAC9C,aAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,EAAE,CAAC,CAAC;QAC1B,aAAI,CAAC,KAAK,CAAC,YAAY,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;QAE5D,IAAI;YACF,MAAM,UAAU,GAAG,MAAM,QAAQ,CAAC,gBAAgB,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;YAC3E,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;YAErC,IAAI,EAAE,KAAK,SAAS,IAAI,SAAS,EAAE;gBACjC,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;aAC7B;YAED,OAAO,UAAU,CAAC;SACnB;QAAC,OAAO,EAAE,EAAE;YACX,0BAA0B;YAC1B,aAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACf,0BAA0B;YAC1B,OAAO,CAAC,IAAI,EAAE,CAAC;SAChB;IACH,CAAC;IAED;;;OAGG;IACH,GAAG,CAAC,EAAW;QACb,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,IAAI,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC5D,CAAC;IAED;;;;OAIG;IACH,GAAG,CAAC,EAAW;QACb,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,IAAI,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC5D,CAAC;IAED,KAAK,CAAC,gBAAgB;QACpB,KAAK,MAAM,CAAC,EAAE,EAAE,UAAU,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,EAAE;YACzD,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;YACzB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;SAC7B;IACH,CAAC;CACF,CAAA;AAzDY,eAAe;IAD3B,gBAAO,EAAE;GACG,eAAe,CAyD3B;AAzDY,0CAAe","sourcesContent":["import {$log, Service} from \"@tsed/common\";\nimport * as Mongoose from \"mongoose\";\n\n@Service()\nexport class MongooseService {\n  readonly connections: Map<string, Mongoose.Connection> = new Map();\n  private defaultConnection: string = \"default\";\n\n  /**\n   *\n   * @returns {Promise<\"mongoose\".Connection>}\n   */\n  async connect(id: string, url: string, connectionOptions: Mongoose.ConnectionOptions, isDefault = false): Promise<any> {\n    if (this.has(id)) {\n      return await this.get(id)!;\n    }\n\n    $log.info(`Connect to mongo database: ${id}`);\n    $log.debug(`Url: ${url}`);\n    $log.debug(`options: ${JSON.stringify(connectionOptions)}`);\n\n    try {\n      const connection = await Mongoose.createConnection(url, connectionOptions);\n      this.connections.set(id, connection);\n\n      if (id === \"default\" || isDefault) {\n        this.defaultConnection = id;\n      }\n\n      return connection;\n    } catch (er) {\n      /* istanbul ignore next */\n      $log.error(er);\n      /* istanbul ignore next */\n      process.exit();\n    }\n  }\n\n  /**\n   *\n   * @returns {\"mongoose\".Connection}\n   */\n  get(id?: string): Mongoose.Connection | undefined {\n    return this.connections.get(id || this.defaultConnection);\n  }\n\n  /**\n   *\n   * @param {string} id\n   * @returns {boolean}\n   */\n  has(id?: string): boolean {\n    return this.connections.has(id || this.defaultConnection);\n  }\n\n  async closeConnections() {\n    for (const [id, connection] of this.connections.entries()) {\n      await connection.close();\n      this.connections.delete(id);\n    }\n  }\n}\n"]}