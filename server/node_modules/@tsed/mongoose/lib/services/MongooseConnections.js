"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MONGOOSE_CONNECTIONS = void 0;
const common_1 = require("@tsed/common");
const core_1 = require("@tsed/core");
const MongooseService_1 = require("../services/MongooseService");
/**
 * @ignore
 */
// tslint:disable-next-line:variable-name
exports.MONGOOSE_CONNECTIONS = Symbol.for("MONGOOSE_CONNECTIONS");
function mapOptions(options) {
    if (!options) {
        return [];
    }
    if (!core_1.isArray(options)) {
        const { url, connectionOptions } = options || {};
        return [
            {
                id: "default",
                url,
                connectionOptions
            }
        ];
    }
    return options.map((settings) => {
        return {
            ...settings,
            connectionOptions: settings.connectionOptions
        };
    });
}
common_1.registerProvider({
    provide: exports.MONGOOSE_CONNECTIONS,
    injectable: false,
    deps: [common_1.Configuration, MongooseService_1.MongooseService],
    async useAsyncFactory(configuration, mongooseService) {
        const settings = mapOptions(configuration.get("mongoose"));
        let isDefault = true;
        for (const current of settings) {
            await mongooseService.connect(current.id, current.url, current.connectionOptions || {
                useNewUrlParser: true,
                useUnifiedTopology: true
            }, isDefault);
            isDefault = false;
        }
        return mongooseService;
    }
});
//# sourceMappingURL=MongooseConnections.js.map