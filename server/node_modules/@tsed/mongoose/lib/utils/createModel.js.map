{"version":3,"file":"createModel.js","sourceRoot":"","sources":["../../src/utils/createModel.ts"],"names":[],"mappings":";;;AAAA,qCAAkC;AAClC,qCAAqC;AAGrC;;;;;;;;;;GAUG;AACH,SAAgB,WAAW,CACzB,MAAW,EACX,MAAuB,EACvB,OAAe,aAAM,CAAC,MAAM,CAAC,EAC7B,UAAmB,EACnB,QAAkB,EAClB,UAAuB;IAEvB,0BAA0B;IAC1B,IAAI,UAAU,EAAE;QACd,OAAO,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;KACnD;IAED,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;AAC5D,CAAC;AAdD,kCAcC","sourcesContent":["import {nameOf} from \"@tsed/core\";\nimport * as mongoose from \"mongoose\";\nimport {Connection} from \"mongoose\";\n\n/**\n * Create an instance of mongoose.model from a class.\n *\n * @param {Type<any>} target Class attached to the schema and model.\n * @param {\"mongoose\".Schema} schema Schema that will be attached to the model.\n * @param name model name\n * @param collection (optional, induced from model name)\n * @param skipInit whether to skip initialization (defaults to false)\n * @param connection\n * @returns {Model<T extends Document>}\n */\nexport function createModel<T>(\n  target: any,\n  schema: mongoose.Schema,\n  name: string = nameOf(target),\n  collection?: string,\n  skipInit?: boolean,\n  connection?: Connection\n) {\n  /* istanbul ignore else */\n  if (connection) {\n    return connection.model(name, schema, collection);\n  }\n\n  return mongoose.model(name, schema, collection, skipInit);\n}\n"]}