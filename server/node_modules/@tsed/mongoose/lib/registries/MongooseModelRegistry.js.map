{"version":3,"file":"MongooseModelRegistry.js","sourceRoot":"","sources":["../../src/registries/MongooseModelRegistry.ts"],"names":[],"mappings":";;;AAAA;;;GAGG;AACH,yCAA+E;AAElE,QAAA,4BAA4B,GAAG,eAAe,CAAC;AAC5D,0CAA0C;AAC7B,QAAA,qBAAqB,GAA2B,wBAAe,CAAC,cAAc,CAAC,oCAA4B,EAAE,iBAAQ,EAAE;IAClI,UAAU,EAAE,IAAI;CACjB,CAAC,CAAC;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AACU,QAAA,aAAa,GAAG,wBAAe,CAAC,gBAAgB,CAAC,oCAA4B,CAAC,CAAC","sourcesContent":["/**\n *\n * @type {Registry<Provider<any>, IProvider<any>>}\n */\nimport {GlobalProviders, Provider, TypedProvidersRegistry} from \"@tsed/common\";\n\nexport const PROVIDER_TYPE_MONGOOSE_MODEL = \"mongooseModel\";\n// tslint:disable-next-line: variable-name\nexport const MongooseModelRegistry: TypedProvidersRegistry = GlobalProviders.createRegistry(PROVIDER_TYPE_MONGOOSE_MODEL, Provider, {\n  injectable: true\n});\n\n/**\n * Add a new model in the `ProviderRegistry`.\n * This model will be built when `InjectorService` will be loaded.\n *\n * #### Example\n *\n * ```typescript\n * import {registerModel, InjectorService} from \"@tsed/common\";\n *\n * export default class MyModel {\n *     constructor(){}\n *     getFoo() {\n *         return \"test\";\n *     }\n * }\n *\n * registerModel({provide: MyModel});\n * // or\n * registerModel(MyModel);\n *\n * const injector = new InjectorService();\n * injector.load();\n *\n * const myModel = injector.get<MyModel>(MyModel);\n * myModel.getFoo(); // test\n * ```\n *\n * @param provider Provider configuration.\n */\nexport const registerModel = GlobalProviders.createRegisterFn(PROVIDER_TYPE_MONGOOSE_MODEL);\n"]}