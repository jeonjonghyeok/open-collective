{"version":3,"file":"IProvider.js","sourceRoot":"","sources":["../../src/interfaces/IProvider.ts"],"names":[],"mappings":"","sourcesContent":["import {Type} from \"@tsed/core\";\nimport {IDIResolver} from \"./IDIResolver\";\nimport {ProviderScope} from \"./ProviderScope\";\nimport {ProviderType} from \"./ProviderType\";\nimport {TokenProvider} from \"./TokenProvider\";\n/**\n *\n */\nexport interface IProvider<T = any> {\n  /**\n   * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n   */\n  provide: TokenProvider;\n  /**\n   * Provider type\n   */\n  type?: ProviderType | string;\n  /**\n   * Instance build by the injector\n   */\n  instance?: T;\n  /**\n   * Define dependencies to build the provider\n   */\n  deps?: TokenProvider[];\n  /**\n   * Class to instantiate for the `token`.\n   */\n  useClass?: Type<T>;\n  /**\n   * Provide a function to build the provider\n   */\n  useFactory?: Function;\n  /**\n   * Provide an async function to build the provider\n   */\n  useAsyncFactory?: Function;\n  /**\n   * Provide predefined value\n   */\n  useValue?: any;\n  /**\n   * Scope used by the injector to build the provider.\n   */\n  scope?: ProviderScope;\n  /**\n   * A list of resolvers which will be used to resolve missing Symbol/Class when injector invoke a Class. This property allow external DI usage.\n   */\n  resolvers?: IDIResolver[];\n\n  /**\n   *\n   */\n  [key: string]: any;\n}\n"]}