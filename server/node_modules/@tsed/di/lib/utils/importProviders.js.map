{"version":3,"file":"importProviders.js","sourceRoot":"","sources":["../../src/utils/importProviders.ts"],"names":[],"mappings":";;;AAEA,6DAAwD;AACxD,mEAA8D;AAC9D,yDAAoD;AAEpD,MAAM,eAAe,GAAG,CAAC,OAAY,EAAoB,EAAE;IACzD,OAAO,EAAE,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC;AAC/B,CAAC,CAAC;AAEF,KAAK,UAAU,gBAAgB,CAAC,SAA2B,EAAE,QAAqC,EAAE,UAAoB;IACtH,MAAM,EAAC,OAAO,GAAG,EAAE,EAAC,GAAG,QAAQ,CAAC;IAEhC,MAAM,QAAQ,GAAG,SAAS;SACvB,GAAG,CAAC,CAAC,EAAC,KAAK,EAAC,EAAE,EAAE,CAAC,iCAAe,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SAC5C,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,IAAI,MAAK,2BAAY,CAAC,MAAM,IAAI,QAAQ,CAAC,aAAa,CAAC;SACtF,GAAG,CAAC,CAAC,QAAkB,EAAE,EAAE,CAAC,eAAe,CAAC,EAAC,OAAO,EAAE,GAAG,QAAQ,CAAC,aAAa,EAAC,EAAE,UAAU,CAAC,CAAC,CAAC;IAElG,OAAO,eAAe,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtD,CAAC;AAED;;;;;GAKG;AACI,KAAK,UAAU,eAAe,CACnC,QAAqC,EACrC,aAAuB,CAAC,SAAS,CAAC;IAElC,MAAM,EAAC,OAAO,GAAG,EAAE,EAAC,GAAG,QAAQ,CAAC;IAEhC,MAAM,QAAQ,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,mCAAgB,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;IACnF,MAAM,SAAS,GAAG,eAAe,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC/D,MAAM,QAAQ,GAAG,MAAM,gBAAgB,CAAC,SAAS,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;IAEzE,OAAO,CAAC,GAAG,QAAQ,EAAE,GAAG,SAAS,CAAC,CAAC;AACrC,CAAC;AAXD,0CAWC","sourcesContent":["import {Provider} from \"../class/Provider\";\nimport {IProvider} from \"../interfaces/IProvider\";\nimport {ProviderType} from \"../interfaces/ProviderType\";\nimport {GlobalProviders} from \"../registries/GlobalProviders\";\nimport {importComponents} from \"./importComponents\";\n\nconst concatProviders = (results: any): IProvider<any>[] => {\n  return [].concat(...results);\n};\n\nasync function recursiveImports(providers: IProvider<any>[], settings: Partial<TsED.Configuration>, properties: string[]) {\n  const {exclude = []} = settings;\n\n  const promises = providers\n    .map(({token}) => GlobalProviders.get(token))\n    .filter((provider) => provider?.type === ProviderType.MODULE && provider.configuration)\n    .map((provider: Provider) => importProviders({exclude, ...provider.configuration}, properties));\n\n  return concatProviders(await Promise.all(promises));\n}\n\n/**\n * Import providers from given patterns.\n *\n * @param settings\n * @param properties\n */\nexport async function importProviders(\n  settings: Partial<TsED.Configuration>,\n  properties: string[] = [\"imports\"]\n): Promise<IProvider<any>[]> {\n  const {exclude = []} = settings;\n\n  const promises = properties.map((key) => importComponents(settings[key], exclude));\n  const providers = concatProviders(await Promise.all(promises));\n  const children = await recursiveImports(providers, settings, properties);\n\n  return [...children, ...providers];\n}\n"]}