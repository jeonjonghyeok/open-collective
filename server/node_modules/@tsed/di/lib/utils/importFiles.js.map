{"version":3,"file":"importFiles.js","sourceRoot":"","sources":["../../src/utils/importFiles.ts"],"names":[],"mappings":";;;AAAA,iCAAiC;AACjC,yCAAkC;AAClC,2DAAsD;AAE/C,KAAK,UAAU,WAAW,CAAC,QAA2B,EAAE,OAAiB;IAC9E,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,qCAAiB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;IAChE,MAAM,OAAO,GAAU,EAAE,CAAC;IAE1B,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;QACxB,IAAI;YACF,MAAM,OAAO,GAAG,2CAAa,IAAI,EAAC,CAAC;YACnC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SACnE;QAAC,OAAO,EAAE,EAAE;YACX,0BAA0B;YAC1B,aAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACf,0BAA0B;YAC1B,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;SAClB;KACF;IAED,OAAO,OAAO,CAAC;AACjB,CAAC;AAjBD,kCAiBC","sourcesContent":["import * as globby from \"globby\";\nimport {$log} from \"@tsed/logger\";\nimport {cleanGlobPatterns} from \"./cleanGlobPatterns\";\n\nexport async function importFiles(patterns: string | string[], exclude: string[]): Promise<any[]> {\n  const files = globby.sync(cleanGlobPatterns(patterns, exclude));\n  const symbols: any[] = [];\n\n  for (const file of files) {\n    try {\n      const exports = await import(file);\n      Object.keys(exports).forEach((key) => symbols.push(exports[key]));\n    } catch (er) {\n      /* istanbul ignore next */\n      $log.error(er);\n      /* istanbul ignore next */\n      process.exit(-1);\n    }\n  }\n\n  return symbols;\n}\n"]}