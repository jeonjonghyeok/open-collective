"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.importComponents = exports.mapConfiguration = void 0;
const core_1 = require("@tsed/core");
const importFiles_1 = require("./importFiles");
async function resolveSymbols(item, excludes) {
    if (core_1.isClass(item)) {
        return [item];
    }
    /* istanbul ignore else */
    if (!process.env.WEBPACK) {
        return importFiles_1.importFiles(item, excludes);
    }
    /* istanbul ignore next */
    return [];
}
function mapConfiguration(config) {
    if (core_1.isArray(config)) {
        return config.map((value) => {
            return {
                values: [].concat(value)
            };
        });
    }
    return Object.keys(config).reduce((list, key) => {
        list.push({
            endpoint: key,
            values: [].concat(config[key])
        });
        return list;
    }, []);
}
exports.mapConfiguration = mapConfiguration;
async function importComponents(config, excludes) {
    if (!config) {
        return [];
    }
    config = mapConfiguration(config);
    const promises = [];
    for (const option of config) {
        promises.push(...option.values.map(async (value) => {
            const symbols = await resolveSymbols(value, excludes);
            return symbols
                .filter((symbol) => core_1.isClass(symbol))
                .map((symbol) => {
                const provider = { token: symbol, route: option.endpoint };
                return provider;
            });
        }));
    }
    const result = await Promise.all(promises);
    return [].concat(...result);
}
exports.importComponents = importComponents;
//# sourceMappingURL=importComponents.js.map