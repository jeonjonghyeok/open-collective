{"version":3,"file":"intercept.js","sourceRoot":"","sources":["../../src/decorators/intercept.ts"],"names":[],"mappings":";;;AAAA,qCAAuC;AACvC,4CAA6C;AAC7C,8CAAgG;AAEhG;;;;;;GAMG;AACH,SAAgB,SAAS,CAA+B,WAAoB,EAAE,OAAa;IACzF,OAAO,CAAC,MAAW,EAAE,WAAmB,EAAE,UAA8B,EAAE,EAAE;QAC1E,YAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,2BAAe,EAAE;YACxC,CAAC,WAAW,CAAC,EAAE;gBACb,WAAW,EAAE,mCAAsB,CAAC,WAAW;gBAC/C,WAAW;gBACX,OAAO,EAAE,WAAW;gBACpB,OAAO;aACR;SACuB,CAAC,CAAC;QAE5B,OAAO,UAAU,CAAC;IACpB,CAAC,CAAC;AACJ,CAAC;AAbD,8BAaC","sourcesContent":["import {Store, Type} from \"@tsed/core\";\nimport {INJECTABLE_PROP} from \"../constants\";\nimport {IInjectableProperties, InjectablePropertyType, InterceptorMethods} from \"../interfaces\";\n\n/**\n * Attaches interceptor to method call and executes the before and after methods\n *\n * @param interceptor\n * @param options\n * @decorator\n */\nexport function Intercept<T extends InterceptorMethods>(interceptor: Type<T>, options?: any): Function {\n  return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n    Store.from(target).merge(INJECTABLE_PROP, {\n      [propertyKey]: {\n        bindingType: InjectablePropertyType.INTERCEPTOR,\n        propertyKey,\n        useType: interceptor,\n        options\n      }\n    } as IInjectableProperties);\n\n    return descriptor;\n  };\n}\n"]}