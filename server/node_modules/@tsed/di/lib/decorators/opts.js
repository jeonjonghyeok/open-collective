"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Opts = void 0;
const core_1 = require("@tsed/core");
const constants_1 = require("../constants");
const ProviderScope_1 = require("../interfaces/ProviderScope");
const inject_1 = require("./inject");
const scope_1 = require("./scope");
/**
 * Get instance options. This options depending on his invocation context.
 *
 * ```typescript
 * import {Injectable, Opts, UseOpts} from "@tsed/di";
 *
 * @Injectable()
 * class MyConfigurableService {
 *   source: string;
 *   constructor(@Opts options: any = {}) {
 *      console.log("Hello ", options.source); // log: Hello Service1 then Hello Service2
 *
 *      this.source = options.source;
 *   }
 * }
 *
 * @Injectable()
 * class MyService1 {
 *   constructor(@UseOpts({source: 'Service1'}) service: MyConfigurableService) {
 *     console.log(service.source) // log: Service1
 *   }
 * }
 *
 * @Injectable()
 * class MyService2 {
 *   constructor(@UseOpts({source: 'Service2'}) service: MyConfigurableService) {
 *     console.log(service.source) // log: Service2
 *   }
 * }
 * ```
 *
 * ::: warning
 * Using @@Opts@@ decorator on a constructor parameter change the Scope of the provider to `ProviderScope.INSTANCE`.
 * :::
 *
 * @param target
 * @param propertyKey
 * @param index
 * @decorator
 */
function Opts(target, propertyKey, index) {
    scope_1.Scope(ProviderScope_1.ProviderScope.INSTANCE)(core_1.classOf(target));
    inject_1.Inject(constants_1.DI_PARAM_OPTIONS)(target, propertyKey, index);
}
exports.Opts = Opts;
//# sourceMappingURL=opts.js.map