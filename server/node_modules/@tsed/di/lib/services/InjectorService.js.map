{"version":3,"file":"InjectorService.js","sourceRoot":"","sources":["../../src/services/InjectorService.ts"],"names":[],"mappings":";;;;;AAAA,qCAaoB;AACpB,kDAA6C;AAC7C,8DAAyD;AACzD,gDAA2C;AAC3C,4CAA+D;AAC/D,+DAA0D;AAC1D,yDAAoD;AACpD,6DAAwD;AACxD,uEAAkE;AAClE,8CAYuB;AACvB,mEAA8D;AAC9D,uDAAkD;AAClD,8DAAyD;AAczD;;;;;;;;;;;;;;;;;;;;GAoBG;AAKH,IAAa,eAAe,uBAA5B,MAAa,eAAgB,SAAQ,qBAAS;IAK5C;QACE,KAAK,EAAE,CAAC;QALH,aAAQ,GAAyC,IAAI,iCAAe,EAAS,CAAC;QAC9E,WAAM,GAAc,OAAO,CAAC;QAC3B,0BAAqB,GAAY,KAAK,CAAC;QAI7C,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,iBAAe,CAAC,CAAC,WAAW,CAAC,iBAAe,CAAE,CAAC;QACjF,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC;IAC3B,CAAC;IAED,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAU,CAAC;IAClC,CAAC;IAED,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAO,CAAC;IAC/B,CAAC;IAED;;;OAGG;IACI,OAAO,CAAC,QAAuB;QACpC,OAAO,QAAQ,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,0BAAa,CAAC,SAAS,CAAC;IACjF,CAAC;IAED;;;;OAIG;IACI,YAAY,CAAC,KAAoB,EAAE,WAAoC,EAAE;QAC9E,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;YAC5B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;SACzB;QAED,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAE,CAAC;QAE1C,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAElC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAEvC,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;OAEG;IACI,OAAO;QACZ,OAAO,KAAK,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC9D,CAAC;IAED;;;;;;;;;;;;;;;;;;;OAmBG;IACH,GAAG,CAAU,KAAoB,EAAE,UAAe,EAAE;QAClD,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,uBAAgB,CAAC,KAAK,CAAC,CAAE,CAAC,QAAQ,CAAC;QAElF,IAAI,QAAQ,EAAE;YACZ,OAAO,QAAQ,CAAC;SACjB;QAED,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;YAC5B,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,SAAS,EAAE;gBACrC,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;gBAE5C,IAAI,MAAM,KAAK,SAAS,EAAE;oBACxB,OAAO,MAAM,CAAC;iBACf;aACF;SACF;IACH,CAAC;IAED;;;;OAIG;IACH,GAAG,CAAC,KAAoB;QACtB,OAAO,KAAK,CAAC,GAAG,CAAC,uBAAgB,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACjE,CAAC;IAED;;;;;;;;;;;;;;;;;;;;OAoBG;IACI,MAAM,CACX,KAAoB,EACpB,SAAkC,IAAI,iCAAe,EAAE,EACvD,UAAqC,EAAE;QAEvC,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC5C,IAAI,QAAa,CAAC;QAElB,CAAC,MAAM,CAAC,GAAG,CAAC,6BAAa,CAAC,IAAI,MAAM,CAAC,GAAG,CAAC,6BAAa,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEvE,IAAI,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YACrB,OAAO,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SAC1B;QAED,IAAI,KAAK,KAAK,4BAAgB,EAAE;YAC9B,OAAO,EAAO,CAAC;SAChB;QAED,IAAI,CAAC,QAAQ,IAAI,OAAO,CAAC,OAAO,EAAE;YAChC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;YAChD,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAE,CAAC,QAAQ,GAAG,QAAQ,CAAC,CAAC;YAE1E,OAAO,QAAQ,CAAC;SACjB;QAED,QAAQ,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YAC9B,KAAK,0BAAa,CAAC,SAAS;gBAC1B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;oBACpB,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;oBAEzD,IAAI,QAAQ,CAAC,OAAO,EAAE,EAAE;wBACtB,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAa,EAAE,EAAE;4BACvC,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC;wBAC/B,CAAC,CAAC,CAAC;qBACJ;iBACF;gBAED,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAI,KAAK,CAAE,CAAC;gBAC/B,MAAM;YAER,KAAK,0BAAa,CAAC,OAAO;gBACxB,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;gBAChD,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;gBAC5B,MAAM;YAER,KAAK,0BAAa,CAAC,QAAQ;gBACzB,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;gBAC3D,MAAM;SACT;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,SAAS,CAAC,SAA+B,IAAI,iCAAe,EAAE;QAClE,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;QAElC,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;YAChC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;gBAC/B,IAAI,QAAQ,CAAC,OAAO,EAAE,EAAE;oBACtB,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;iBAC3C;gBAED,IAAI,QAAQ,CAAC,QAAQ,EAAE;oBACrB,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC;iBAC/C;aACF;SACF;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,QAAQ,CAAC,SAA+B,IAAI,iCAAe,EAAE;QAC3D,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;QAElC,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;YAChC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,0BAAa,CAAC,SAAS,EAAE;gBACrF,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;aACrC;YAED,IAAI,QAAQ,CAAC,QAAQ,EAAE;gBACrB,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC;aAC/C;SACF;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;;OAIG;IACH,SAAS,CAAC,YAAuB,iCAAe,EAAE;QAChD,uCAAuC;QACvC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAE7B,4BAA4B;QAC5B,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAE5B,OAAO,IAAI,CAAC;IACd,CAAC;IACD;;;;OAIG;IACH,KAAK,CAAC,IAAI,CAAC,YAAuB,iCAAe,EAAE;QACjD,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QAE1B,gCAAgC;QAChC,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;QAEpC,qBAAqB;QACrB,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAE/B,MAAM,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAE7B,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,oBAAoB;QAClB,IAAI,IAAI,CAAC,qBAAqB,EAAE;YAC9B,OAAO;SACR;QACD,MAAM,mBAAmB,GAAG,IAAI,GAAG,EAAE,CAAC;QAEtC,KAAK,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YACzB,IAAI,QAAQ,CAAC,aAAa,EAAE;gBAC1B,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;oBAC9D,mBAAmB,CAAC,GAAG,CAAC,GAAG,EAAE,mBAAmB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,kBAAW,CAAC,mBAAmB,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,gBAAS,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnI,CAAC,CAAC,CAAC;aACJ;YACD,IAAI,QAAQ,CAAC,SAAS,EAAE;gBACtB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC;aAC5C;QACH,CAAC,CAAC,CAAC;QAEH,mBAAmB,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;YACzC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,kBAAW,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QAEtB,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;IACpC,CAAC;IAED;;;;;OAKG;IACI,wBAAwB,CAAC,QAAa,EAAE,MAA+B,EAAE,OAA+B;QAC7G,MAAM,UAAU,GAA0B,kBAAW,CAAC,cAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,UAAe,EAAE,MAAW,EAAE,EAAE;YAC/G,MAAM,KAAK,GAAG,YAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAEjC,OAAO;gBACL,GAAG,UAAU;gBACb,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,2BAAe,CAAC,IAAI,EAAE,CAAC;aACtC,CAAC;QACJ,CAAC,EAAE,EAAE,CAAC,CAAC;QAEP,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;YAC/C,QAAQ,UAAU,CAAC,WAAW,EAAE;gBAC9B,KAAK,mCAAsB,CAAC,MAAM;oBAChC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;oBACtC,MAAM;gBACR,KAAK,mCAAsB,CAAC,QAAQ;oBAClC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,UAAU,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;oBACzD,MAAM;gBACR,KAAK,mCAAsB,CAAC,QAAQ;oBAClC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;oBACxC,MAAM;gBACR,KAAK,mCAAsB,CAAC,KAAK;oBAC/B,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;oBACrC,MAAM;gBACR,KAAK,mCAAsB,CAAC,WAAW;oBACrC,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;oBAC3C,MAAM;aACT;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACI,UAAU,CAAC,QAAa,EAAE,EAAC,WAAW,EAA6B;QACxE,MAAM,MAAM,GAAG,cAAO,CAAC,QAAQ,CAAC,CAAC;QACjC,MAAM,cAAc,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAC;QAC7C,MAAM,IAAI,GAAG,eAAQ,CAAC,aAAa,CAAC,kBAAW,CAAC,MAAM,CAAC,EAAE,WAAW,CAAC,CAAC;QAEtE,QAAQ,CAAC,WAAW,CAAC,GAAG,GAAG,EAAE;YAC3B,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,UAAe,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;YAErE,OAAO,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,QAAQ,CAAC,CAAC;QACpD,CAAC,CAAC;IACJ,CAAC;IAED;;;;;;;;OAQG;IACI,YAAY,CACjB,QAAa,EACb,EAAC,WAAW,EAAE,OAAO,EAAE,OAAO,EAA6B,EAC3D,MAA+B,EAC/B,aAAqC;QAErC,aAAa,GAAG,EAAC,GAAG,aAAa,EAAC,CAAC;QACnC,MAAM,CAAC,GAAG,CAAC,4BAAgB,EAAE,EAAC,GAAG,OAAO,EAAC,CAAC,CAAC;QAE3C,IAAI,IAAI,GAAQ,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC;QAE5D,MAAM,CAAC,MAAM,CAAC,4BAAgB,CAAC,CAAC;QAEhC,IAAI,gBAAS,CAAC,IAAI,CAAC,EAAE;YACnB,IAAI,CAAC,IAAI,CAAC,CAAC,MAAW,EAAE,EAAE;gBACxB,IAAI,GAAG,MAAM,CAAC;YAChB,CAAC,CAAC,CAAC;SACJ;QAED,MAAM,CAAC,cAAc,CAAC,QAAQ,EAAE,WAAW,EAAE;YAC3C,GAAG,EAAE,GAAG,EAAE,CAAC,IAAI;SAChB,CAAC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACI,SAAS,CAAC,QAAa,EAAE,EAAC,WAAW,EAAE,UAAU,EAAE,YAAY,EAA2B;QAC/F,MAAM,UAAU,GAAG;YACjB,GAAG,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,YAAY;YACxD,GAAG,EAAE,CAAC,KAAU,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,CAAC;YACzD,UAAU,EAAE,IAAI;YAChB,YAAY,EAAE,IAAI;SACnB,CAAC;QACF,MAAM,CAAC,cAAc,CAAC,QAAQ,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;IAC3D,CAAC;IAED;;;;;OAKG;IACI,YAAY,CAAC,QAAa,EAAE,EAAC,WAAW,EAAE,UAAU,EAAE,YAAY,EAA2B;QAClG,MAAM,KAAK,GAAG,CAAC,CAAM,EAAE,EAAE;YACvB,IAAI,CAAC,EAAE;gBACL,OAAO,MAAM,CAAC,MAAM,CAAC,gBAAS,CAAC,CAAC,CAAC,CAAC,CAAC;aACpC;YAED,OAAO,YAAY,CAAC;QACtB,CAAC,CAAC;QAEF,MAAM,UAAU,GAAG;YACjB,GAAG,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAE/C,UAAU,EAAE,IAAI;YAChB,YAAY,EAAE,IAAI;SACnB,CAAC;QACF,MAAM,CAAC,cAAc,CAAC,QAAQ,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;QAEzD,OAAO,UAAU,CAAC;IACpB,CAAC;IAED;;;;;;OAMG;IACI,eAAe,CAAC,QAAa,EAAE,EAAC,WAAW,EAAE,OAAO,EAAE,OAAO,EAA6B;QAC/F,MAAM,MAAM,GAAG,cAAO,CAAC,QAAQ,CAAC,CAAC;QACjC,MAAM,cAAc,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAC;QAE7C,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,IAAW,EAAE,EAAE;YACzC,MAAM,IAAI,GAAG,CAAC,GAAW,EAAE,EAAE;gBAC3B,IAAI,CAAC,GAAG,EAAE;oBACR,OAAO,cAAc,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;iBAC7C;gBAED,MAAM,GAAG,CAAC;YACZ,CAAC,CAAC;YAEF,MAAM,OAAO,GAA4B;gBACvC,MAAM;gBACN,WAAW;gBACX,IAAI;gBACJ,OAAO;gBACP,IAAI;aACL,CAAC;YAEF,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAqB,OAAO,CAAE,CAAC;YAE3D,OAAO,WAAW,CAAC,SAAU,CAC3B;gBACE,GAAG,OAAO;gBACV,OAAO;aACR,EACD,IAAI,CACL,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;IAES,cAAc,CAAC,KAAoB;QAC3C,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,iCAAe,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YAC1D,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;SACzB;QAED,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAE,CAAC;IAClC,CAAC;IAED;;;;;;;;;;;;;;;;OAgBG;IACK,OAAO,CAAI,MAAqB,EAAE,MAA+B,EAAE,UAAqC,EAAE;QAChH,MAAM,EAAC,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,EAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;QAE/G,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,QAAQ,CAAC,UAAU,IAAI,OAAO,CAAC,MAAM,EAAE;gBAC1C,MAAM,IAAI,+BAAc,CAAC,KAAK,EAAE,GAAG,aAAM,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,IAAI,wCAAwC,CAAC,CAAC;aAC5G;YAED,MAAM,EAAC,QAAQ,EAAC,GAAG,iCAAe,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;YAC/D,IAAI,QAAQ,EAAE;gBACZ,QAAQ,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;aAClC;SACF;QAED,IAAI,QAAa,CAAC;QAClB,IAAI,iBAAiB,GAAQ,KAAK,CAAC;QAEnC,IAAI;YACF,MAAM,gBAAgB,GAAG,CAAC,MAAY,EAAE,EAAE,CAAC,CAAC,KAAU,EAAE,KAAa,EAAO,EAAE;;gBAC5E,iBAAiB,GAAG,EAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAC,CAAC;gBAEzC,IAAI,KAAK,KAAK,4BAAgB,EAAE;oBAC9B,MAAM,OAAO,SAAG,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,KAAK,0CAAE,GAAG,CAAC,GAAG,4BAAgB,IAAI,KAAK,EAAE,CAAC,CAAC;oBAErE,MAAM,CAAC,GAAG,CAAC,4BAAgB,EAAE,OAAO,IAAI,EAAE,CAAC,CAAC;iBAC7C;gBAED,OAAO,sBAAe,CAAC,KAAK,EAAE,mBAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,EAAE,EAAC,MAAM,EAAC,CAAC,CAAC;YAC/F,CAAC,CAAC;YAEF,qCAAqC;YACrC,OAAO,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC,CAAC;YAEpC,sBAAsB;YACtB,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;YAEnD,iBAAiB,GAAG,KAAK,CAAC;YAE1B,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC;SAChC;QAAC,OAAO,KAAK,EAAE;YACd,+BAAc,CAAC,kBAAkB,CAAC,KAAK,EAAE,iBAAiB,EAAE,KAAK,CAAC,CAAC;SACpE;QAED,IAAI,QAAQ,KAAK,SAAS,EAAE;YAC1B,MAAM,IAAI,+BAAc,CACtB,KAAK,EACL,2FAA2F,aAAM,CAAC,KAAK,CAAC,EAAE,CAC3G,CAAC;SACH;QAED,IAAI,QAAQ,IAAI,UAAU,EAAE;YAC1B,IAAI,CAAC,wBAAwB,CAAC,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;SAC1D;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;;;OAKG;IACK,gBAAgB,CAAC,KAAoB,EAAE,MAA+B,EAAE,OAAoC;QAClH,IAAI,OAAO,GAAgC,OAAO,CAAC,OAAO,CAAC;QAC3D,IAAI,IAAI,GAAgC,OAAO,CAAC,IAAI,CAAC;QACrD,IAAI,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC1B,IAAI,SAAS,CAAC;QACd,IAAI,UAAU,GAAG,KAAK,CAAC;QAEvB,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,yCAAmB,EAAE,CAAC;SACjC;QAED,IAAI,QAAkB,CAAC;QAEvB,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;YAC5B,QAAQ,GAAG,IAAI,mBAAQ,CAAC,KAAK,CAAC,CAAC;YAE/B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBAClC,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,4BAAgB,CAAC,CAAC,CAAC;gBAEjE,IAAI,MAAM,KAAK,SAAS,EAAE;oBACxB,QAAQ,CAAC,UAAU,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC;iBACpC;YACH,CAAC,CAAC,CAAC;SACJ;aAAM;YACL,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAE,CAAC;SACrC;QAED,KAAK,GAAG,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACxC,IAAI,GAAG,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC;QAC7B,OAAO,GAAG,OAAO,IAAI,QAAQ,CAAC,OAAO,CAAC;QAEtC,IAAI,QAAQ,CAAC,QAAQ,EAAE;YACrB,SAAS,GAAG,GAAG,EAAE,CAAC,CAAC,iBAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;SAC7F;aAAM,IAAI,QAAQ,CAAC,UAAU,EAAE;YAC9B,SAAS,GAAG,CAAC,IAAqB,EAAE,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,CAAC;SACrE;aAAM,IAAI,QAAQ,CAAC,eAAe,EAAE;YACnC,SAAS,GAAG,CAAC,IAAqB,EAAE,EAAE,CAAC,QAAQ,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,CAAC;SAC1E;aAAM;YACL,WAAW;YACX,UAAU,GAAG,IAAI,CAAC;YAClB,IAAI,GAAG,IAAI,IAAI,eAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YACzD,SAAS,GAAG,CAAC,IAAqB,EAAE,EAAE,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,CAAC;SACvE;QAED,OAAO;YACL,KAAK;YACL,KAAK,EAAE,KAAK,IAAI,YAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,0BAAa,CAAC,SAAS;YACzE,IAAI,EAAE,IAAK,IAAI,EAAE;YACjB,OAAO,EAAE,OAAO,IAAI,EAAE;YACtB,UAAU;YACV,SAAS;YACT,QAAQ;SACT,CAAC;IACJ,CAAC;CACF,CAAA;AAxkBY,eAAe;IAJ3B,uBAAU,CAAC;QACV,KAAK,EAAE,0BAAa,CAAC,SAAS;QAC9B,MAAM,EAAE,IAAI;KACb,CAAC;;GACW,eAAe,CAwkB3B;AAxkBY,0CAAe","sourcesContent":["import {\n  ancestorsOf,\n  classOf,\n  deepClone,\n  deepExtends,\n  getClassOrSymbol,\n  isFunction,\n  isInheritedFrom,\n  isPromise,\n  Metadata,\n  nameOf,\n  prototypeOf,\n  Store\n} from \"@tsed/core\";\nimport {Container} from \"../class/Container\";\nimport {LocalsContainer} from \"../class/LocalsContainer\";\nimport {Provider} from \"../class/Provider\";\nimport {DI_PARAM_OPTIONS, INJECTABLE_PROP} from \"../constants\";\nimport {Configuration} from \"../decorators/configuration\";\nimport {Injectable} from \"../decorators/injectable\";\nimport {InjectionError} from \"../errors/InjectionError\";\nimport {UndefinedTokenError} from \"../errors/UndefinedTokenError\";\nimport {\n  IDILogger,\n  IInjectableProperties,\n  IInjectablePropertyService,\n  IInjectablePropertyValue,\n  InjectablePropertyType,\n  InterceptorContext,\n  InterceptorMethods,\n  InvokeOptions,\n  IProvider,\n  ProviderScope,\n  TokenProvider\n} from \"../interfaces\";\nimport {GlobalProviders} from \"../registries/GlobalProviders\";\nimport {DIConfiguration} from \"./DIConfiguration\";\nimport {createContainer} from \"../utils/createContainer\";\n\ninterface InvokeSettings {\n  token: TokenProvider;\n  parent?: TokenProvider;\n  scope: ProviderScope;\n  isBindable: boolean;\n  deps: TokenProvider[];\n  imports: TokenProvider[];\n  provider: Provider<any>;\n\n  construct(deps: TokenProvider[]): any;\n}\n\n/**\n * This service contain all services collected by `@Service` or services declared manually with `InjectorService.factory()` or `InjectorService.service()`.\n *\n * ### Example:\n *\n * ```typescript\n * import {InjectorService} from \"@tsed/di\";\n *\n * // Import the services (all services are decorated with @Service()\";\n * import MyService1 from \"./services/service1\";\n * import MyService2 from \"./services/service2\";\n * import MyService3 from \"./services/service3\";\n *\n * // When all services is imported you can load InjectorService.\n * const injector = new InjectorService()\n *\n * await injector.load();\n *\n * const myService1 = injector.get<MyService1>(MyServcice1);\n * ```\n */\n@Injectable({\n  scope: ProviderScope.SINGLETON,\n  global: true\n})\nexport class InjectorService extends Container {\n  public settings: TsED.Configuration & DIConfiguration = new DIConfiguration() as any;\n  public logger: IDILogger = console;\n  private resolvedConfiguration: boolean = false;\n\n  constructor() {\n    super();\n    const provider = this.addProvider(InjectorService).getProvider(InjectorService)!;\n    provider.instance = this;\n  }\n\n  get resolvers() {\n    return this.settings.resolvers!;\n  }\n\n  get scopes() {\n    return this.settings.scopes!;\n  }\n\n  /**\n   * Retrieve default scope for a given provider.\n   * @param provider\n   */\n  public scopeOf(provider: Provider<any>) {\n    return provider.scope || this.scopes[provider.type] || ProviderScope.SINGLETON;\n  }\n\n  /**\n   * Clone a provider from GlobalProviders and the given token. forkProvider method build automatically the provider if the instance parameter ins't given.\n   * @param token\n   * @param settings\n   */\n  public forkProvider(token: TokenProvider, settings: Partial<IProvider<any>> = {}): Provider {\n    if (!this.hasProvider(token)) {\n      this.addProvider(token);\n    }\n\n    const provider = this.getProvider(token)!;\n\n    Object.assign(provider, settings);\n\n    provider.instance = this.invoke(token);\n\n    return provider;\n  }\n\n  /**\n   * Return a list of instance build by the injector.\n   */\n  public toArray(): any[] {\n    return super.toArray().map((provider) => provider.instance);\n  }\n\n  /**\n   * Get a service or factory already constructed from his symbol or class.\n   *\n   * #### Example\n   *\n   * ```typescript\n   * import {InjectorService} from \"@tsed/di\";\n   * import MyService from \"./services\";\n   *\n   * class OtherService {\n   *      constructor(injectorService: InjectorService) {\n   *          const myService = injectorService.get<MyService>(MyService);\n   *      }\n   * }\n   * ```\n   *\n   * @param token The class or symbol registered in InjectorService.\n   * @param options\n   * @returns {boolean}\n   */\n  get<T = any>(token: TokenProvider, options: any = {}): T | undefined {\n    const instance = super.has(token) && super.get(getClassOrSymbol(token))!.instance;\n\n    if (instance) {\n      return instance;\n    }\n\n    if (!this.hasProvider(token)) {\n      for (const resolver of this.resolvers) {\n        const result = resolver.get(token, options);\n\n        if (result !== undefined) {\n          return result;\n        }\n      }\n    }\n  }\n\n  /**\n   * The has() method returns a boolean indicating whether an element with the specified key exists or not.\n   * @returns {boolean}\n   * @param token\n   */\n  has(token: TokenProvider): boolean {\n    return super.has(getClassOrSymbol(token)) && !!this.get(token);\n  }\n\n  /**\n   * Invoke the class and inject all services that required by the class constructor.\n   *\n   * #### Example\n   *\n   * ```typescript\n   * import {InjectorService} from \"@tsed/di\";\n   * import MyService from \"./services\";\n   *\n   * class OtherService {\n   *     constructor(injectorService: InjectorService) {\n   *          const myService = injectorService.invoke<MyService>(MyService);\n   *      }\n   *  }\n   * ```\n   *\n   * @param token The injectable class to invoke. Class parameters are injected according constructor signature.\n   * @param locals  Optional object. If preset then any argument Class are read from this object first, before the `InjectorService` is consulted.\n   * @param options\n   * @returns {T} The class constructed.\n   */\n  public invoke<T>(\n    token: TokenProvider,\n    locals: Map<TokenProvider, any> = new LocalsContainer(),\n    options: Partial<InvokeOptions<T>> = {}\n  ): T {\n    const provider = this.ensureProvider(token);\n    let instance: any;\n\n    !locals.has(Configuration) && locals.set(Configuration, this.settings);\n\n    if (locals.has(token)) {\n      return locals.get(token);\n    }\n\n    if (token === DI_PARAM_OPTIONS) {\n      return {} as T;\n    }\n\n    if (!provider || options.rebuild) {\n      instance = this.resolve(token, locals, options);\n      this.hasProvider(token) && (this.getProvider(token)!.instance = instance);\n\n      return instance;\n    }\n\n    switch (this.scopeOf(provider)) {\n      case ProviderScope.SINGLETON:\n        if (!this.has(token)) {\n          provider.instance = this.resolve(token, locals, options);\n\n          if (provider.isAsync()) {\n            provider.instance.then((instance: any) => {\n              provider.instance = instance;\n            });\n          }\n        }\n\n        instance = this.get<T>(token)!;\n        break;\n\n      case ProviderScope.REQUEST:\n        instance = this.resolve(token, locals, options);\n        locals.set(token, instance);\n        break;\n\n      case ProviderScope.INSTANCE:\n        instance = this.resolve(provider.provide, locals, options);\n        break;\n    }\n\n    return instance;\n  }\n\n  /**\n   * Build only providers which are asynchronous.\n   */\n  async loadAsync(locals: LocalsContainer<any> = new LocalsContainer()) {\n    const providers = super.toArray();\n\n    for (const provider of providers) {\n      if (!locals.has(provider.token)) {\n        if (provider.isAsync()) {\n          await this.invoke(provider.token, locals);\n        }\n\n        if (provider.instance) {\n          locals.set(provider.token, provider.instance);\n        }\n      }\n    }\n\n    return locals;\n  }\n\n  loadSync(locals: LocalsContainer<any> = new LocalsContainer()) {\n    const providers = super.toArray();\n\n    for (const provider of providers) {\n      if (!locals.has(provider.token) && this.scopeOf(provider) === ProviderScope.SINGLETON) {\n        this.invoke(provider.token, locals);\n      }\n\n      if (provider.instance) {\n        locals.set(provider.token, provider.instance);\n      }\n    }\n\n    return locals;\n  }\n\n  /**\n   * Boostrap injector from container and resolve configuration.\n   *\n   * @param container\n   */\n  bootstrap(container: Container = createContainer()) {\n    // Clone all providers in the container\n    this.addProviders(container);\n\n    // Resolve all configuration\n    this.resolveConfiguration();\n\n    return this;\n  }\n  /**\n   * Build all providers from given container (or GlobalProviders) and emit `$onInit` event.\n   *\n   * @param container\n   */\n  async load(container: Container = createContainer()): Promise<LocalsContainer<any>> {\n    this.bootstrap(container);\n\n    // build async and sync provider\n    let locals = await this.loadAsync();\n\n    // load sync provider\n    locals = this.loadSync(locals);\n\n    await locals.emit(\"$onInit\");\n\n    return locals;\n  }\n\n  /**\n   * Load all configurations registered on providers\n   */\n  resolveConfiguration() {\n    if (this.resolvedConfiguration) {\n      return;\n    }\n    const mergedConfiguration = new Map();\n\n    super.forEach((provider) => {\n      if (provider.configuration) {\n        Object.entries(provider.configuration).forEach(([key, value]) => {\n          mergedConfiguration.set(key, mergedConfiguration.has(key) ? deepExtends(mergedConfiguration.get(key), value) : deepClone(value));\n        });\n      }\n      if (provider.resolvers) {\n        this.resolvers.push(...provider.resolvers);\n      }\n    });\n\n    mergedConfiguration.forEach((value, key) => {\n      this.settings[key] = deepExtends(value, this.settings[key]);\n    });\n\n    this.settings.build();\n\n    this.resolvedConfiguration = true;\n  }\n\n  /**\n   *\n   * @param instance\n   * @param locals\n   * @param options\n   */\n  public bindInjectableProperties(instance: any, locals: Map<TokenProvider, any>, options: Partial<InvokeOptions>) {\n    const properties: IInjectableProperties = ancestorsOf(classOf(instance)).reduce((properties: any, target: any) => {\n      const store = Store.from(target);\n\n      return {\n        ...properties,\n        ...(store.get(INJECTABLE_PROP) || {})\n      };\n    }, {});\n\n    Object.values(properties).forEach((definition) => {\n      switch (definition.bindingType) {\n        case InjectablePropertyType.METHOD:\n          this.bindMethod(instance, definition);\n          break;\n        case InjectablePropertyType.PROPERTY:\n          this.bindProperty(instance, definition, locals, options);\n          break;\n        case InjectablePropertyType.CONSTANT:\n          this.bindConstant(instance, definition);\n          break;\n        case InjectablePropertyType.VALUE:\n          this.bindValue(instance, definition);\n          break;\n        case InjectablePropertyType.INTERCEPTOR:\n          this.bindInterceptor(instance, definition);\n          break;\n      }\n    });\n  }\n\n  /**\n   *\n   * @param instance\n   * @param {string} propertyKey\n   */\n  public bindMethod(instance: any, {propertyKey}: IInjectablePropertyService) {\n    const target = classOf(instance);\n    const originalMethod = instance[propertyKey];\n    const deps = Metadata.getParamTypes(prototypeOf(target), propertyKey);\n\n    instance[propertyKey] = () => {\n      const services = deps.map((dependency: any) => this.get(dependency));\n\n      return originalMethod.call(instance, ...services);\n    };\n  }\n\n  /**\n   *\n   * @param instance\n   * @param {string} propertyKey\n   * @param {any} useType\n   * @param options\n   * @param locals\n   * @param invokeOptions\n   */\n  public bindProperty(\n    instance: any,\n    {propertyKey, useType, options}: IInjectablePropertyService,\n    locals: Map<TokenProvider, any>,\n    invokeOptions: Partial<InvokeOptions>\n  ) {\n    invokeOptions = {...invokeOptions};\n    locals.set(DI_PARAM_OPTIONS, {...options});\n\n    let bean: any = this.invoke(useType, locals, invokeOptions);\n\n    locals.delete(DI_PARAM_OPTIONS);\n\n    if (isPromise(bean)) {\n      bean.then((result: any) => {\n        bean = result;\n      });\n    }\n\n    Object.defineProperty(instance, propertyKey, {\n      get: () => bean\n    });\n  }\n\n  /**\n   *\n   * @param instance\n   * @param {string} propertyKey\n   * @param {any} useType\n   */\n  public bindValue(instance: any, {propertyKey, expression, defaultValue}: IInjectablePropertyValue) {\n    const descriptor = {\n      get: () => this.settings.get(expression) || defaultValue,\n      set: (value: any) => this.settings.set(expression, value),\n      enumerable: true,\n      configurable: true\n    };\n    Object.defineProperty(instance, propertyKey, descriptor);\n  }\n\n  /**\n   *\n   * @param instance\n   * @param {string} propertyKey\n   * @param {any} useType\n   */\n  public bindConstant(instance: any, {propertyKey, expression, defaultValue}: IInjectablePropertyValue): PropertyDescriptor {\n    const clone = (o: any) => {\n      if (o) {\n        return Object.freeze(deepClone(o));\n      }\n\n      return defaultValue;\n    };\n\n    const descriptor = {\n      get: () => clone(this.settings.get(expression)),\n\n      enumerable: true,\n      configurable: true\n    };\n    Object.defineProperty(instance, propertyKey, descriptor);\n\n    return descriptor;\n  }\n\n  /**\n   *\n   * @param instance\n   * @param propertyKey\n   * @param useType\n   * @param options\n   */\n  public bindInterceptor(instance: any, {propertyKey, useType, options}: IInjectablePropertyService) {\n    const target = classOf(instance);\n    const originalMethod = instance[propertyKey];\n\n    instance[propertyKey] = (...args: any[]) => {\n      const next = (err?: Error) => {\n        if (!err) {\n          return originalMethod.apply(instance, args);\n        }\n\n        throw err;\n      };\n\n      const context: InterceptorContext<any> = {\n        target,\n        propertyKey,\n        args,\n        options,\n        next\n      };\n\n      const interceptor = this.get<InterceptorMethods>(useType)!;\n\n      return interceptor.intercept!(\n        {\n          ...context,\n          options\n        },\n        next\n      );\n    };\n  }\n\n  protected ensureProvider(token: TokenProvider): Provider | undefined {\n    if (!this.hasProvider(token) && GlobalProviders.has(token)) {\n      this.addProvider(token);\n    }\n\n    return this.getProvider(token)!;\n  }\n\n  /**\n   * Invoke a class method and inject service.\n   *\n   * #### IInjectableMethod options\n   *\n   * * **target**: Optional. The class instance.\n   * * **methodName**: `string` Optional. The method name.\n   * * **designParamTypes**: `any[]` Optional. List of injectable types.\n   * * **locals**: `Map<Function, any>` Optional. If preset then any argument Class are read from this object first, before the `InjectorService` is consulted.\n   *\n   * #### Example\n   *\n   * @param target\n   * @param locals\n   * @param options\n   * @private\n   */\n  private resolve<T>(target: TokenProvider, locals: Map<TokenProvider, any>, options: Partial<InvokeOptions<T>> = {}): Promise<T> {\n    const {token, deps, construct, isBindable, imports, provider} = this.mapInvokeOptions(target, locals, options);\n\n    if (provider) {\n      if (!provider.injectable && options.parent) {\n        throw new InjectionError(token, `${nameOf(token)} ${provider.type} is not injectable to another provider`);\n      }\n\n      const {onInvoke} = GlobalProviders.getRegistrySettings(target);\n      if (onInvoke) {\n        onInvoke(provider, locals, deps);\n      }\n    }\n\n    let instance: any;\n    let currentDependency: any = false;\n\n    try {\n      const invokeDependency = (parent?: any) => (token: any, index: number): any => {\n        currentDependency = {token, index, deps};\n\n        if (token !== DI_PARAM_OPTIONS) {\n          const options = provider?.store?.get(`${DI_PARAM_OPTIONS}:${index}`);\n\n          locals.set(DI_PARAM_OPTIONS, options || {});\n        }\n\n        return isInheritedFrom(token, Provider, 1) ? provider : this.invoke(token, locals, {parent});\n      };\n\n      // Invoke manually imported providers\n      imports.forEach(invokeDependency());\n\n      // Inject dependencies\n      const services = deps.map(invokeDependency(token));\n\n      currentDependency = false;\n\n      instance = construct(services);\n    } catch (error) {\n      InjectionError.throwInjectorError(token, currentDependency, error);\n    }\n\n    if (instance === undefined) {\n      throw new InjectionError(\n        token,\n        `Unable to create new instance from undefined value. Check your provider declaration for ${nameOf(token)}`\n      );\n    }\n\n    if (instance && isBindable) {\n      this.bindInjectableProperties(instance, locals, options);\n    }\n\n    return instance;\n  }\n\n  /**\n   * Create options to invoke a provider or class.\n   * @param token\n   * @param locals\n   * @param options\n   */\n  private mapInvokeOptions(token: TokenProvider, locals: Map<TokenProvider, any>, options: Partial<InvokeOptions<any>>): InvokeSettings {\n    let imports: TokenProvider[] | undefined = options.imports;\n    let deps: TokenProvider[] | undefined = options.deps;\n    let scope = options.scope;\n    let construct;\n    let isBindable = false;\n\n    if (!token) {\n      throw new UndefinedTokenError();\n    }\n\n    let provider: Provider;\n\n    if (!this.hasProvider(token)) {\n      provider = new Provider(token);\n\n      this.resolvers.forEach((resolver) => {\n        const result = resolver.get(token, locals.get(DI_PARAM_OPTIONS));\n\n        if (result !== undefined) {\n          provider.useFactory = () => result;\n        }\n      });\n    } else {\n      provider = this.getProvider(token)!;\n    }\n\n    scope = scope || this.scopeOf(provider);\n    deps = deps || provider.deps;\n    imports = imports || provider.imports;\n\n    if (provider.useValue) {\n      construct = () => (isFunction(provider.useValue) ? provider.useValue() : provider.useValue);\n    } else if (provider.useFactory) {\n      construct = (deps: TokenProvider[]) => provider.useFactory(...deps);\n    } else if (provider.useAsyncFactory) {\n      construct = (deps: TokenProvider[]) => provider.useAsyncFactory(...deps);\n    } else {\n      // useClass\n      isBindable = true;\n      deps = deps || Metadata.getParamTypes(provider.useClass);\n      construct = (deps: TokenProvider[]) => new provider.useClass(...deps);\n    }\n\n    return {\n      token,\n      scope: scope || Store.from(token).get(\"scope\") || ProviderScope.SINGLETON,\n      deps: deps! || [],\n      imports: imports || [],\n      isBindable,\n      construct,\n      provider\n    };\n  }\n}\n"]}