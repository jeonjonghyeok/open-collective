{"version":3,"file":"DITest.js","sourceRoot":"","sources":["../../src/services/DITest.ts"],"names":[],"mappings":";;;AAAA,qCAAyC;AACzC,kDAA6C;AAC7C,yCAAkC;AAClC,8DAAyD;AAGzD,uDAAkD;AAClD,4DAAuD;AAOvD;;GAEG;AACH,MAAa,MAAM;IAGjB,MAAM,KAAK,QAAQ;QACjB,IAAI,MAAM,CAAC,SAAS,EAAE;YACpB,OAAO,MAAM,CAAC,SAAU,CAAC;SAC1B;QAED,0BAA0B;QAC1B,MAAM,IAAI,KAAK,CACb,uIAAuI;YACrI,YAAY;YACZ,wBAAwB;YACxB,kCAAkC;YAClC,+CAA+C;YAC/C,IAAI,CACP,CAAC;IACJ,CAAC;IAED,MAAM,KAAK,QAAQ,CAAC,QAAyB;QAC3C,MAAM,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC9B,CAAC;IAED,MAAM,CAAC,WAAW;QAChB,OAAO,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC;IAC5B,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,WAAwC,EAAE;QAC5D,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAElD,MAAM,SAAS,GAAG,IAAI,qBAAS,EAAE,CAAC;QAClC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QAErC,MAAM,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACxC,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,cAAc,CAAC,WAAgB,EAAE;QACtC,MAAM,QAAQ,GAAG,IAAI,iCAAe,EAAE,CAAC;QACvC,QAAQ,CAAC,MAAM,GAAG,aAAI,CAAC;QAEvB,aAAa;QACb,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;QAElD,+BAAc,CAAC,QAAQ,CAAC,CAAC;QAEzB,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,KAAK;QAChB,IAAI,MAAM,CAAC,WAAW,EAAE,EAAE;YACxB,MAAM,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;YAChC,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC;SACzB;IACH,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,MAAM,CAAU,MAAqB,EAAE,YAAmC,EAAE;QACjF,MAAM,MAAM,GAAG,IAAI,iCAAe,EAAE,CAAC;QACrC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;YACtB,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAW,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,EAAE,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC;QAEjF,IAAI,QAAQ,IAAI,QAAQ,CAAC,OAAO,EAAE;YAChC,4BAA4B;YAC5B,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,EAAE,CAAC;YAClC,IAAI,MAAM,YAAY,OAAO,EAAE;gBAC7B,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,QAAe,CAAC,CAAC;aAC3C;SACF;QAED,OAAO,QAAe,CAAC;IACzB,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,GAAG,CAAU,MAAqB,EAAE,UAAe,EAAE;QAC1D,OAAO,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAI,MAAM,EAAE,OAAO,CAAE,CAAC;IAClD,CAAC;IAES,MAAM,CAAC,SAAS,CAAC,WAAwC,EAAE;QACnE,OAAO;YACL,GAAG,QAAQ;YACX,GAAG,EAAE,eAAQ,CAAC,QAAQ,EAAE,KAAK,EAAE,UAAG,CAAC,IAAI,CAAC;YACxC,MAAM,EAAE;gBACN,GAAG,eAAQ,CAAC,QAAQ,EAAE,QAAQ,EAAE,EAAE,CAAC;gBACnC,KAAK,EAAE,eAAQ,CAAC,QAAQ,EAAE,cAAc,EAAE,KAAK,CAAC;aACjD;SACF,CAAC;IACJ,CAAC;;AAvGH,wBAwGC;AAvGkB,gBAAS,GAA2B,IAAI,CAAC","sourcesContent":["import {Env, getValue} from \"@tsed/core\";\nimport {Container} from \"../class/Container\";\nimport {$log} from \"@tsed/logger\";\nimport {LocalsContainer} from \"../class/LocalsContainer\";\nimport {OnInit} from \"../interfaces/OnInit\";\nimport {TokenProvider} from \"../interfaces/TokenProvider\";\nimport {InjectorService} from \"./InjectorService\";\nimport {setLoggerLevel} from \"../utils/setLoggerLevel\";\n\nexport interface DITestInvokeOptions {\n  token?: TokenProvider;\n  use: any;\n}\n\n/**\n * Tool to run test with lightweight DI sandbox.\n */\nexport class DITest {\n  protected static _injector: InjectorService | null = null;\n\n  static get injector(): InjectorService {\n    if (DITest._injector) {\n      return DITest._injector!;\n    }\n\n    /* istanbul ignore next */\n    throw new Error(\n      \"PlatformTest.injector is not initialized. Use PlatformTest.create(): Promise before PlatformTest.invoke() or PlatformTest.injector.\\n\" +\n        \"Example:\\n\" +\n        \"before(async () => {\\n\" +\n        \"   await PlatformTest.create()\\n\" +\n        \"   await PlatformTest.invoke(MyService, [])\\n\" +\n        \"})\"\n    );\n  }\n\n  static set injector(injector: InjectorService) {\n    DITest._injector = injector;\n  }\n\n  static hasInjector() {\n    return !!DITest._injector;\n  }\n\n  static async create(settings: Partial<TsED.Configuration> = {}) {\n    DITest.injector = DITest.createInjector(settings);\n\n    const container = new Container();\n    DITest.injector.bootstrap(container);\n\n    await DITest.injector.load(container);\n  }\n\n  /**\n   * Create a new injector with the right default services\n   */\n  static createInjector(settings: any = {}): InjectorService {\n    const injector = new InjectorService();\n    injector.logger = $log;\n\n    // @ts-ignore\n    injector.settings.set(DITest.configure(settings));\n\n    setLoggerLevel(injector);\n\n    return injector;\n  }\n\n  /**\n   * Resets the test injector of the test context, so it won't pollute your next test. Call this in your `tearDown` logic.\n   */\n  static async reset() {\n    if (DITest.hasInjector()) {\n      await DITest.injector.destroy();\n      DITest._injector = null;\n    }\n  }\n\n  /**\n   * Invoke a provider and return a fresh instance\n   * @param target\n   * @param providers\n   */\n  static invoke<T = any>(target: TokenProvider, providers: DITestInvokeOptions[] = []): T | Promise<T> {\n    const locals = new LocalsContainer();\n    providers.forEach((p) => {\n      locals.set(p.token, p.use);\n    });\n\n    const instance: OnInit = DITest.injector.invoke(target, locals, {rebuild: true});\n\n    if (instance && instance.$onInit) {\n      // await instance.$onInit();\n      const result = instance.$onInit();\n      if (result instanceof Promise) {\n        return result.then(() => instance as any);\n      }\n    }\n\n    return instance as any;\n  }\n\n  /**\n   * Return the instance from injector registry\n   * @param target\n   * @param options\n   */\n  static get<T = any>(target: TokenProvider, options: any = {}): T {\n    return DITest.injector.get<T>(target, options)!;\n  }\n\n  protected static configure(settings: Partial<TsED.Configuration> = {}): Partial<TsED.Configuration> {\n    return {\n      ...settings,\n      env: getValue(settings, \"env\", Env.TEST),\n      logger: {\n        ...getValue(settings, \"logger\", {}),\n        level: getValue(settings, \"logger.level\", \"off\")\n      }\n    };\n  }\n}\n"]}