import { TokenProvider } from "../interfaces/TokenProvider";
import { InjectorService } from "./InjectorService";
export interface DITestInvokeOptions {
    token?: TokenProvider;
    use: any;
}
/**
 * Tool to run test with lightweight DI sandbox.
 */
export declare class DITest {
    protected static _injector: InjectorService | null;
    static get injector(): InjectorService;
    static set injector(injector: InjectorService);
    static hasInjector(): boolean;
    static create(settings?: Partial<TsED.Configuration>): Promise<void>;
    /**
     * Create a new injector with the right default services
     */
    static createInjector(settings?: any): InjectorService;
    /**
     * Resets the test injector of the test context, so it won't pollute your next test. Call this in your `tearDown` logic.
     */
    static reset(): Promise<void>;
    /**
     * Invoke a provider and return a fresh instance
     * @param target
     * @param providers
     */
    static invoke<T = any>(target: TokenProvider, providers?: DITestInvokeOptions[]): T | Promise<T>;
    /**
     * Return the instance from injector registry
     * @param target
     * @param options
     */
    static get<T = any>(target: TokenProvider, options?: any): T;
    protected static configure(settings?: Partial<TsED.Configuration>): Partial<TsED.Configuration>;
}
