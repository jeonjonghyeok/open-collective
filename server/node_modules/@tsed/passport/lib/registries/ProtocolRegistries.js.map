{"version":3,"file":"ProtocolRegistries.js","sourceRoot":"","sources":["../../src/registries/ProtocolRegistries.ts"],"names":[],"mappings":";;;AAAA;;;GAGG;AACH,yCAA+E;AAElE,QAAA,sBAAsB,GAAG,UAAU,CAAC;AACjD;;;GAGG;AACH,0CAA0C;AAC7B,QAAA,gBAAgB,GAA2B,wBAAe,CAAC,cAAc,CAAC,8BAAsB,EAAE,iBAAQ,EAAE;IACvH,UAAU,EAAE,IAAI;CACjB,CAAC,CAAC;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACU,QAAA,gBAAgB,GAAG,wBAAe,CAAC,gBAAgB,CAAC,8BAAsB,CAAC,CAAC","sourcesContent":["/**\n *\n * @type {Registry<Provider<any>, IProvider<any>>}\n */\nimport {GlobalProviders, Provider, TypedProvidersRegistry} from \"@tsed/common\";\n\nexport const PROVIDER_TYPE_PROTOCOL = \"protocol\";\n/**\n *\n * @type {Registry<Provider<any>, IProvider<any>>}\n */\n// tslint:disable-next-line: variable-name\nexport const ProtocolRegistry: TypedProvidersRegistry = GlobalProviders.createRegistry(PROVIDER_TYPE_PROTOCOL, Provider, {\n  injectable: true\n});\n/**\n * Add a new service in the `ProviderRegistry`. This service will be built when `InjectorService` will be loaded.\n *\n * #### Example\n *\n * ```typescript\n * import {registerSocketService, InjectorService} from \"@tsed/common\";\n *\n * export default class MyFooService {\n *     constructor(){}\n *     getFoo() {\n *         return \"test\";\n *     }\n * }\n *\n * registerSocketService({provide: MyFooService});\n * // or\n * registerSocketService(MyFooService);\n *\n * const injector = new InjectorService();\n * injector.load();\n *\n * const myFooService = injector.get<MyFooService>(MyFooService);\n * myFooService.getFoo(); // test\n * ```\n *\n * @param provider Provider configuration.\n */\nexport const registerProtocol = GlobalProviders.createRegisterFn(PROVIDER_TYPE_PROTOCOL);\n"]}