{"version":3,"file":"protocol.js","sourceRoot":"","sources":["../../src/decorators/protocol.ts"],"names":[],"mappings":";;;AAAA,qCAAqD;AACrD,iCAAuC;AAEvC,yEAAkE;AAElE;;;;;GAKG;AACH,SAAgB,QAAQ,CAAU,OAAoC;IACpE,OAAO,sBAAe,CACpB,qCAAgB,EAChB,eAAQ,CAAC,UAAU,EAAE,OAAO,CAAC,EAC7B,kBAAa,CAAC;QACZ,QAAQ,EAAE;YACR,SAAS,EAAE;gBACT,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,OAAO;aACxB;SACF;KACF,CAAC,CACH,CAAC;AACJ,CAAC;AAZD,4BAYC","sourcesContent":["import {applyDecorators, StoreSet} from \"@tsed/core\";\nimport {Configuration} from \"@tsed/di\";\nimport {IProtocolOptions} from \"../interfaces/IProtocolOptions\";\nimport {registerProtocol} from \"../registries/ProtocolRegistries\";\n\n/**\n * Declare a new Protocol base on a Passport Strategy\n *\n * @decorator\n * @class\n */\nexport function Protocol<T = any>(options: ProtocolOptionsDecorator<T>) {\n  return applyDecorators(\n    registerProtocol,\n    StoreSet(\"protocol\", options),\n    Configuration({\n      passport: {\n        protocols: {\n          [options.name]: options\n        }\n      }\n    })\n  );\n}\n\nexport type ProtocolOptionsDecorator<T = any> = {name: string} & Partial<IProtocolOptions<T>>;\n"]}