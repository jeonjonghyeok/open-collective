{"version":3,"file":"ProtocolsService.js","sourceRoot":"","sources":["../../src/services/ProtocolsService.ts"],"names":[],"mappings":"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","sourcesContent":["import {HandlerMetadata, HandlerType, Platform} from \"@tsed/common\";\nimport {Injectable, InjectorService, Provider} from \"@tsed/di\";\nimport * as Passport from \"passport\";\nimport {Strategy} from \"passport\";\nimport {IProtocol, IProtocolOptions} from \"../interfaces\";\nimport {PROVIDER_TYPE_PROTOCOL} from \"../registries/ProtocolRegistries\";\n\n@Injectable()\nexport class ProtocolsService {\n  readonly strategies: Map<string, Strategy> = new Map();\n\n  constructor(private injector: InjectorService) {}\n\n  public getProtocols(): Provider<any>[] {\n    return Array.from(this.injector.getProviders(PROVIDER_TYPE_PROTOCOL));\n  }\n\n  public getProtocolsNames(): string[] {\n    return Array.from(this.strategies.keys());\n  }\n\n  public invoke(provider: Provider<any>): any {\n    const {name, useStrategy: strategy, settings} = this.getOptions(provider);\n    const protocol = this.injector.get<IProtocol>(provider.provide)!;\n    const instance = new strategy(settings, this.createHandler(provider));\n\n    this.strategies.set(name, instance);\n\n    Passport.use(name, instance);\n\n    if (protocol.$onInstall) {\n      protocol.$onInstall(instance);\n    }\n\n    return protocol;\n  }\n\n  private getOptions(provider: Provider<any>): IProtocolOptions {\n    const {name} = provider.store.get(\"protocol\");\n    const {useStrategy = Strategy, settings = {}}: IProtocolOptions = this.injector.settings.get(`passport.protocols.${name}`) || {};\n\n    return {\n      name,\n      useStrategy,\n      settings: {\n        ...settings,\n        passReqToCallback: true\n      }\n    };\n  }\n\n  private createHandler(provider: Provider<any>) {\n    const handlerMetadata = new HandlerMetadata({\n      token: provider.provide,\n      target: provider.useClass,\n      type: HandlerType.CUSTOM,\n      propertyKey: \"$onVerify\"\n    });\n\n    const platform = this.injector.get<Platform>(Platform)!;\n    const middleware = platform.createHandler(handlerMetadata);\n\n    return async (req: any, ...args: any[]) => {\n      const done = args[args.length - 1];\n      req.$ctx.set(\"PROTOCOL_ARGS\", args.slice(0, -1));\n\n      try {\n        await middleware(req.$ctx);\n        done(null, ...[].concat(req.$ctx.data));\n      } catch (err) {\n        done(err, false, {message: err.message});\n      }\n    };\n  }\n}\n"]}