"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProtocolsService = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@tsed/common");
const di_1 = require("@tsed/di");
const Passport = require("passport");
const passport_1 = require("passport");
const ProtocolRegistries_1 = require("../registries/ProtocolRegistries");
let ProtocolsService = class ProtocolsService {
    constructor(injector) {
        this.injector = injector;
        this.strategies = new Map();
    }
    getProtocols() {
        return Array.from(this.injector.getProviders(ProtocolRegistries_1.PROVIDER_TYPE_PROTOCOL));
    }
    getProtocolsNames() {
        return Array.from(this.strategies.keys());
    }
    invoke(provider) {
        const { name, useStrategy: strategy, settings } = this.getOptions(provider);
        const protocol = this.injector.get(provider.provide);
        const instance = new strategy(settings, this.createHandler(provider));
        this.strategies.set(name, instance);
        Passport.use(name, instance);
        if (protocol.$onInstall) {
            protocol.$onInstall(instance);
        }
        return protocol;
    }
    getOptions(provider) {
        const { name } = provider.store.get("protocol");
        const { useStrategy = passport_1.Strategy, settings = {} } = this.injector.settings.get(`passport.protocols.${name}`) || {};
        return {
            name,
            useStrategy,
            settings: {
                ...settings,
                passReqToCallback: true
            }
        };
    }
    createHandler(provider) {
        const handlerMetadata = new common_1.HandlerMetadata({
            token: provider.provide,
            target: provider.useClass,
            type: common_1.HandlerType.CUSTOM,
            propertyKey: "$onVerify"
        });
        const platform = this.injector.get(common_1.Platform);
        const middleware = platform.createHandler(handlerMetadata);
        return async (req, ...args) => {
            const done = args[args.length - 1];
            req.$ctx.set("PROTOCOL_ARGS", args.slice(0, -1));
            try {
                await middleware(req.$ctx);
                done(null, ...[].concat(req.$ctx.data));
            }
            catch (err) {
                done(err, false, { message: err.message });
            }
        };
    }
};
ProtocolsService = tslib_1.__decorate([
    di_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [di_1.InjectorService])
], ProtocolsService);
exports.ProtocolsService = ProtocolsService;
//# sourceMappingURL=ProtocolsService.js.map