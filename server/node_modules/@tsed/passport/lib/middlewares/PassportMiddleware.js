"use strict";
var PassportMiddleware_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PassportMiddleware = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@tsed/common");
const exceptions_1 = require("@tsed/exceptions");
const Passport = require("passport");
const ProtocolsService_1 = require("../services/ProtocolsService");
const getProtocolsFromRequest_1 = require("../utils/getProtocolsFromRequest");
let PassportMiddleware = PassportMiddleware_1 = class PassportMiddleware {
    use(request, endpoint) {
        if (request.user && request.isAuthenticated()) {
            return;
        }
        const { options, protocol, method, originalUrl = true } = endpoint.store.get(PassportMiddleware_1);
        const protocols = getProtocolsFromRequest_1.getProtocolsFromRequest(request, protocol, this.protocolsService.getProtocolsNames());
        if (protocols.length === 0) {
            throw new exceptions_1.Unauthorized("Not authorized");
        }
        if (originalUrl) {
            request.url = request.originalUrl;
        }
        // @ts-ignore
        return Passport[method](protocols.length === 1 ? protocols[0] : protocols, options);
    }
};
tslib_1.__decorate([
    common_1.Inject(ProtocolsService_1.ProtocolsService),
    tslib_1.__metadata("design:type", ProtocolsService_1.ProtocolsService)
], PassportMiddleware.prototype, "protocolsService", void 0);
tslib_1.__decorate([
    tslib_1.__param(0, common_1.Req()), tslib_1.__param(1, common_1.EndpointInfo()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", void 0)
], PassportMiddleware.prototype, "use", null);
PassportMiddleware = PassportMiddleware_1 = tslib_1.__decorate([
    common_1.Middleware()
], PassportMiddleware);
exports.PassportMiddleware = PassportMiddleware;
//# sourceMappingURL=PassportMiddleware.js.map